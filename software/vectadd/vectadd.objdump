
vectadd.elf:     file format elf32-littlenios2
vectadd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005974 memsz 0x00005974 flags r-x
    LOAD off    0x00006994 vaddr 0x00015994 paddr 0x000173dc align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008e24 vaddr 0x00018e24 paddr 0x00018e24 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000056c4  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000011c  00015878  00015878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00015994  000173dc  00006994  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00018e24  00018e24  00008e24  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000083dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  00008408  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d4e  00000000  00000000  00008d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019aff  00000000  00000000  00009a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f91  00000000  00000000  0002354d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c85c  00000000  00000000  000284de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001018  00000000  00000000  00034d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000175b  00000000  00000000  00035d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e7f  00000000  00000000  000374af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b330  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003b340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003da5f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003da62  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003da6e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003da6f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003da70  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003da74  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003da78  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003da7c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003da87  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003da92  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  0003da9d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  0003daa4  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003f013  00000000  00000000  0003dac3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00015878 l    d  .rodata	00000000 .rodata
00015994 l    d  .rwdata	00000000 .rwdata
00018e24 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00015d9c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001234c l     F .text	00000058 std
00012458 l     F .text	00000008 __fp_lock
00012460 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00013050 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000130b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000131b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000132d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000133b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013518 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013748 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000173cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013a00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016344 l     O .rwdata	00001060 jtag_uart_0
00013ad8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013d18 l     F .text	00000228 altera_avalon_jtag_uart_irq
00013f40 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000147e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014bf0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014d40 l     F .text	000000f8 alt_file_locked
00014fc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00015660 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00015814 l     F .text	00000040 alt_sim_halt
00012db8 g     F .text	00000070 _isatty_r
00013578 g     F .text	0000006c alt_main
00010d14 g     F .text	000000a0 _puts_r
00018e74 g     O .bss	00000100 alt_irq
00012e28 g     F .text	00000078 _lseek_r
000173dc g       *ABS*	00000000 __flash_rwdata_start
00019104 g       *ABS*	00000000 __alt_heap_start
000129f4 g     F .text	00000068 __sseek
000123b4 g     F .text	000000a4 __sinit
000124b4 g     F .text	0000009c __sfmoreglue
00013604 g     F .text	00000020 __malloc_unlock
0001190c g     F .text	000000e0 memmove
000124a4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012d44 g     F .text	00000074 _fstat_r
00018e30 g     O .bss	00000004 errno
00018e38 g     O .bss	00000004 alt_argv
0001f3a4 g       *ABS*	00000000 _gp
000161c4 g     O .rwdata	00000180 alt_fd_list
000151e8 g     F .text	00000094 alt_find_dev
0001186c g     F .text	000000a0 memcpy
00012498 g     F .text	0000000c _cleanup_r
00014cc8 g     F .text	00000078 alt_io_redirect
00015878 g       *ABS*	00000000 __DTOR_END__
00010db4 g     F .text	00000014 puts
00014158 g     F .text	00000224 altera_avalon_jtag_uart_read
000105c0 g     F .text	00000014 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013214 g     F .text	000000c4 isatty
00018e24 g     O .bss	00000004 __malloc_top_pad
000112ec g     F .text	0000049c __sfvwrite_r
00010dc8 g     F .text	00000070 _sbrk_r
00012ea0 g     F .text	00000078 _read_r
000173c4 g     O .rwdata	00000004 alt_max_fd
00012c20 g     F .text	00000110 _fclose_r
00012318 g     F .text	00000034 fflush
00018e28 g     O .bss	00000004 __malloc_max_sbrked_mem
00013424 g     F .text	000000f4 lseek
000173b0 g     O .rwdata	00000004 _global_impure_ptr
000119ec g     F .text	000005f4 _realloc_r
00019104 g       *ABS*	00000000 __bss_end
00014af8 g     F .text	000000f8 alt_iic_isr_register
000150bc g     F .text	0000010c alt_tick
00012480 g     F .text	00000018 __fp_lock_all
00014ab0 g     F .text	00000048 alt_ic_irq_enabled
00015024 g     F .text	00000098 alt_alarm_stop
00018e40 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
0001619c g     O .rwdata	00000028 alt_dev_null
00014710 g     F .text	0000001c alt_dcache_flush_all
000173dc g       *ABS*	00000000 __ram_rwdata_end
000173bc g     O .rwdata	00000008 alt_dev_list
000138dc g     F .text	00000124 write
00015994 g       *ABS*	00000000 __ram_rodata_end
000130dc g     F .text	000000d8 fstat
00019104 g       *ABS*	00000000 end
00013c58 g     F .text	000000c0 altera_avalon_jtag_uart_init
00015874 g       *ABS*	00000000 __CTOR_LIST__
0001c350 g       *ABS*	00000000 __alt_stack_pointer
0001437c g     F .text	00000240 altera_avalon_jtag_uart_write
000123a4 g     F .text	00000004 __sfp_lock_acquire
00011788 g     F .text	000000e4 memchr
00010fd8 g     F .text	00000314 _free_r
00015664 g     F .text	000001b0 __call_exitprocs
000173a8 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00018e44 g     O .bss	00000004 _alt_tick_rate
00018e48 g     O .bss	00000004 _alt_nticks
00013624 g     F .text	00000124 read
00013a94 g     F .text	00000044 alt_sys_init
0001552c g     F .text	00000134 __register_exitproc
00013ff0 g     F .text	00000074 altera_avalon_jtag_uart_close
00012f18 g     F .text	00000038 __mulsi3
00015994 g       *ABS*	00000000 __ram_rwdata_start
00015878 g       *ABS*	00000000 __ram_rodata_start
00018e4c g     O .bss	00000028 __malloc_current_mallinfo
00013b10 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001539c g     F .text	000000d0 alt_get_fd
00012bb0 g     F .text	00000070 _close_r
000154b8 g     F .text	00000074 memcmp
00013bc0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00019104 g       *ABS*	00000000 __alt_stack_base
00013c08 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00011fe0 g     F .text	0000013c __swsetup_r
00012550 g     F .text	000000f0 __sfp
000101f0 g     F .text	000002b8 vectorAdd
00015994 g     O .rwdata	00000408 __malloc_av_
000123b0 g     F .text	00000004 __sinit_lock_release
00012ad8 g     F .text	00000060 __sread
0001527c g     F .text	00000120 alt_find_file
0001472c g     F .text	000000b4 alt_dev_llist_insert
000135e4 g     F .text	00000020 __malloc_lock
00013820 g     F .text	000000bc sbrk
0001211c g     F .text	000001fc _fflush_r
00018e24 g       *ABS*	00000000 __bss_start
00012954 g     F .text	00000098 memset
000104a8 g     F .text	00000104 main
00018e3c g     O .bss	00000004 alt_envp
00018e2c g     O .bss	00000004 __malloc_max_total_mem
00013b68 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000129ec g     F .text	00000008 __sclose
0001c350 g       *ABS*	00000000 __alt_heap_limit
00012d30 g     F .text	00000014 fclose
00018f74 g     O .bss	00000190 _atexit0
000105d4 g     F .text	00000740 _malloc_r
000173c8 g     O .rwdata	00000004 alt_errno
00012708 g     F .text	000000b8 _fwalk
00010eac g     F .text	0000012c _malloc_trim_r
00015878 g       *ABS*	00000000 __CTOR_END__
00015878 g       *ABS*	00000000 __flash_rodata_start
00015878 g       *ABS*	00000000 __DTOR_LIST__
00013a60 g     F .text	00000034 alt_irq_init
000137a8 g     F .text	00000078 alt_release_fd
0001546c g     F .text	00000014 atexit
00012b38 g     F .text	00000078 _write_r
000173ac g     O .rwdata	00000004 _impure_ptr
00018e34 g     O .bss	00000004 alt_argc
000148a4 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00012468 g     F .text	00000018 __fp_unlock_all
000173b4 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014924 g     F .text	00000050 alt_ic_isr_register
000173dc g       *ABS*	00000000 _edata
00019104 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00014064 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014a10 g     F .text	000000a0 alt_ic_irq_disable
00012a5c g     F .text	0000007c __swrite
000173a4 g     O .rwdata	00000004 __malloc_trim_threshold
000151c8 g     F .text	00000020 altera_nios2_qsys_irq_init
00015480 g     F .text	00000038 exit
00012640 g     F .text	000000c8 _fwalk_reent
0001c350 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000123a8 g     F .text	00000004 __sfp_lock_release
00015854 g     F .text	00000020 _exit
000145bc g     F .text	00000154 alt_alarm_start
000127c0 g     F .text	00000194 __smakebuf_r
00010e38 g     F .text	00000074 strlen
00014e38 g     F .text	0000018c open
00014908 g     F .text	0000001c alt_icache_flush_all
000173d0 g     O .rwdata	00000004 alt_priority_mask
00014974 g     F .text	0000009c alt_ic_irq_enable
000173d4 g     O .rwdata	00000008 alt_alarm_list
00014840 g     F .text	00000064 _do_ctors
00012f50 g     F .text	00000100 close
00013338 g     F .text	00000080 alt_load
000105ac g     F .text	00000014 free
000123ac g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406d14 	ori	at,at,436
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000b4 	movhi	r3,2
   10134:	18e39d04 	addi	r3,r3,-29068
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000b4 	movhi	r3,2
   1014c:	18e39d04 	addi	r3,r3,-29068
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	def0d414 	ori	sp,sp,50000

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101c0:	d6bce914 	ori	gp,gp,62372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101c8:	10a38914 	ori	r2,r2,36388

    movhi r3, %hi(__bss_end)
   101cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d0:	18e44114 	ori	r3,r3,37124

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	00133380 	call	13338 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	00135780 	call	13578 <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <vectorAdd>:
#define to_hw_sig (volatile char*) 0x00021010 // actual address here
#define to_sw_sig (char*) 0x00021000 // actual address here



void vectorAdd(short int *a, short int *b, short int *s, int len) {
   101f0:	defffa04 	addi	sp,sp,-24
   101f4:	dfc00515 	stw	ra,20(sp)
   101f8:	df000415 	stw	fp,16(sp)
   101fc:	df000404 	addi	fp,sp,16
   10200:	e13ffc15 	stw	r4,-16(fp)
   10204:	e17ffd15 	stw	r5,-12(fp)
   10208:	e1bffe15 	stw	r6,-8(fp)
   1020c:	e1ffff15 	stw	r7,-4(fp)
	// Transmit length
	printf("\nTransmitting length...\n");
   10210:	01000074 	movhi	r4,1
   10214:	21161e04 	addi	r4,r4,22648
   10218:	0010db40 	call	10db4 <puts>
	*to_hw_sig = 1;
   1021c:	00c000b4 	movhi	r3,2
   10220:	18c40404 	addi	r3,r3,4112
   10224:	00800044 	movi	r2,1
   10228:	18800005 	stb	r2,0(r3)
	*to_hw_port = len;
   1022c:	00c000b4 	movhi	r3,2
   10230:	18c40804 	addi	r3,r3,4128
   10234:	e0bfff17 	ldw	r2,-4(fp)
   10238:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 1); //READ_LENGTH
   1023c:	008000b4 	movhi	r2,2
   10240:	10840004 	addi	r2,r2,4096
   10244:	10800003 	ldbu	r2,0(r2)
   10248:	10803fcc 	andi	r2,r2,255
   1024c:	1080201c 	xori	r2,r2,128
   10250:	10bfe004 	addi	r2,r2,-128
   10254:	10800058 	cmpnei	r2,r2,1
   10258:	103ff81e 	bne	r2,zero,1023c <vectorAdd+0x4c>
	*to_hw_sig = 2;
   1025c:	00c000b4 	movhi	r3,2
   10260:	18c40404 	addi	r3,r3,4112
   10264:	00800084 	movi	r2,2
   10268:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 0); //ACK_LENGTH
   1026c:	008000b4 	movhi	r2,2
   10270:	10840004 	addi	r2,r2,4096
   10274:	10800003 	ldbu	r2,0(r2)
   10278:	10803fcc 	andi	r2,r2,255
   1027c:	1080201c 	xori	r2,r2,128
   10280:	10bfe004 	addi	r2,r2,-128
   10284:	1004c03a 	cmpne	r2,r2,zero
   10288:	103ff81e 	bne	r2,zero,1026c <vectorAdd+0x7c>

	printf("\nTransmitting Base Address A...\n");
   1028c:	01000074 	movhi	r4,1
   10290:	21162404 	addi	r4,r4,22672
   10294:	0010db40 	call	10db4 <puts>
	*to_hw_sig = 1;
   10298:	00c000b4 	movhi	r3,2
   1029c:	18c40404 	addi	r3,r3,4112
   102a0:	00800044 	movi	r2,1
   102a4:	18800005 	stb	r2,0(r3)
	*to_hw_port = a;
   102a8:	00c000b4 	movhi	r3,2
   102ac:	18c40804 	addi	r3,r3,4128
   102b0:	e0bffc17 	ldw	r2,-16(fp)
   102b4:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 1); // READ_ADDR_A
   102b8:	008000b4 	movhi	r2,2
   102bc:	10840004 	addi	r2,r2,4096
   102c0:	10800003 	ldbu	r2,0(r2)
   102c4:	10803fcc 	andi	r2,r2,255
   102c8:	1080201c 	xori	r2,r2,128
   102cc:	10bfe004 	addi	r2,r2,-128
   102d0:	10800058 	cmpnei	r2,r2,1
   102d4:	103ff81e 	bne	r2,zero,102b8 <vectorAdd+0xc8>
	*to_hw_sig = 2;
   102d8:	00c000b4 	movhi	r3,2
   102dc:	18c40404 	addi	r3,r3,4112
   102e0:	00800084 	movi	r2,2
   102e4:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 0); // ACK_ADDR_A
   102e8:	008000b4 	movhi	r2,2
   102ec:	10840004 	addi	r2,r2,4096
   102f0:	10800003 	ldbu	r2,0(r2)
   102f4:	10803fcc 	andi	r2,r2,255
   102f8:	1080201c 	xori	r2,r2,128
   102fc:	10bfe004 	addi	r2,r2,-128
   10300:	1004c03a 	cmpne	r2,r2,zero
   10304:	103ff81e 	bne	r2,zero,102e8 <vectorAdd+0xf8>

	printf("\nTransmitting Base Address B...\n");
   10308:	01000074 	movhi	r4,1
   1030c:	21162c04 	addi	r4,r4,22704
   10310:	0010db40 	call	10db4 <puts>
	*to_hw_sig = 1;
   10314:	00c000b4 	movhi	r3,2
   10318:	18c40404 	addi	r3,r3,4112
   1031c:	00800044 	movi	r2,1
   10320:	18800005 	stb	r2,0(r3)
	*to_hw_port = b;
   10324:	00c000b4 	movhi	r3,2
   10328:	18c40804 	addi	r3,r3,4128
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 1); // READ_ADDR_B
   10334:	008000b4 	movhi	r2,2
   10338:	10840004 	addi	r2,r2,4096
   1033c:	10800003 	ldbu	r2,0(r2)
   10340:	10803fcc 	andi	r2,r2,255
   10344:	1080201c 	xori	r2,r2,128
   10348:	10bfe004 	addi	r2,r2,-128
   1034c:	10800058 	cmpnei	r2,r2,1
   10350:	103ff81e 	bne	r2,zero,10334 <vectorAdd+0x144>
	*to_hw_sig = 2;
   10354:	00c000b4 	movhi	r3,2
   10358:	18c40404 	addi	r3,r3,4112
   1035c:	00800084 	movi	r2,2
   10360:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 0); // ACK_ADDR_B
   10364:	008000b4 	movhi	r2,2
   10368:	10840004 	addi	r2,r2,4096
   1036c:	10800003 	ldbu	r2,0(r2)
   10370:	10803fcc 	andi	r2,r2,255
   10374:	1080201c 	xori	r2,r2,128
   10378:	10bfe004 	addi	r2,r2,-128
   1037c:	1004c03a 	cmpne	r2,r2,zero
   10380:	103ff81e 	bne	r2,zero,10364 <vectorAdd+0x174>

	printf("\nTransmitting Base Address S...\n");
   10384:	01000074 	movhi	r4,1
   10388:	21163404 	addi	r4,r4,22736
   1038c:	0010db40 	call	10db4 <puts>
	*to_hw_sig = 1;
   10390:	00c000b4 	movhi	r3,2
   10394:	18c40404 	addi	r3,r3,4112
   10398:	00800044 	movi	r2,1
   1039c:	18800005 	stb	r2,0(r3)
	*to_hw_port = s;
   103a0:	00c000b4 	movhi	r3,2
   103a4:	18c40804 	addi	r3,r3,4128
   103a8:	e0bffe17 	ldw	r2,-8(fp)
   103ac:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 1); // READ_ADDR_S
   103b0:	008000b4 	movhi	r2,2
   103b4:	10840004 	addi	r2,r2,4096
   103b8:	10800003 	ldbu	r2,0(r2)
   103bc:	10803fcc 	andi	r2,r2,255
   103c0:	1080201c 	xori	r2,r2,128
   103c4:	10bfe004 	addi	r2,r2,-128
   103c8:	10800058 	cmpnei	r2,r2,1
   103cc:	103ff81e 	bne	r2,zero,103b0 <vectorAdd+0x1c0>
	*to_hw_sig = 2;
   103d0:	00c000b4 	movhi	r3,2
   103d4:	18c40404 	addi	r3,r3,4112
   103d8:	00800084 	movi	r2,2
   103dc:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 0); // ACK_ADDR_S
   103e0:	008000b4 	movhi	r2,2
   103e4:	10840004 	addi	r2,r2,4096
   103e8:	10800003 	ldbu	r2,0(r2)
   103ec:	10803fcc 	andi	r2,r2,255
   103f0:	1080201c 	xori	r2,r2,128
   103f4:	10bfe004 	addi	r2,r2,-128
   103f8:	1004c03a 	cmpne	r2,r2,zero
   103fc:	103ff81e 	bne	r2,zero,103e0 <vectorAdd+0x1f0>
	*to_hw_sig = 1;
   10400:	00c000b4 	movhi	r3,2
   10404:	18c40404 	addi	r3,r3,4112
   10408:	00800044 	movi	r2,1
   1040c:	18800005 	stb	r2,0(r3)
	printf("\nVector Add in ACC...\n");
   10410:	01000074 	movhi	r4,1
   10414:	21163c04 	addi	r4,r4,22768
   10418:	0010db40 	call	10db4 <puts>
	// VectAdd in ACC...

	while (*to_sw_sig != 1); // Wait until hardware finishes work
   1041c:	008000b4 	movhi	r2,2
   10420:	10840004 	addi	r2,r2,4096
   10424:	10800003 	ldbu	r2,0(r2)
   10428:	10803fcc 	andi	r2,r2,255
   1042c:	1080201c 	xori	r2,r2,128
   10430:	10bfe004 	addi	r2,r2,-128
   10434:	10800058 	cmpnei	r2,r2,1
   10438:	103ff81e 	bne	r2,zero,1041c <vectorAdd+0x22c>
	printf("\nACC Done...\n");
   1043c:	01000074 	movhi	r4,1
   10440:	21164204 	addi	r4,r4,22792
   10444:	0010db40 	call	10db4 <puts>
	*to_hw_sig = 2;
   10448:	00c000b4 	movhi	r3,2
   1044c:	18c40404 	addi	r3,r3,4112
   10450:	00800084 	movi	r2,2
   10454:	18800005 	stb	r2,0(r3)
	while (*to_sw_sig != 0); // ACK_DONE
   10458:	008000b4 	movhi	r2,2
   1045c:	10840004 	addi	r2,r2,4096
   10460:	10800003 	ldbu	r2,0(r2)
   10464:	10803fcc 	andi	r2,r2,255
   10468:	1080201c 	xori	r2,r2,128
   1046c:	10bfe004 	addi	r2,r2,-128
   10470:	1004c03a 	cmpne	r2,r2,zero
   10474:	103ff81e 	bne	r2,zero,10458 <vectorAdd+0x268>
	printf("\nVectadd Done...\n");
   10478:	01000074 	movhi	r4,1
   1047c:	21164604 	addi	r4,r4,22808
   10480:	0010db40 	call	10db4 <puts>
	*to_hw_sig = 1;
   10484:	00c000b4 	movhi	r3,2
   10488:	18c40404 	addi	r3,r3,4112
   1048c:	00800044 	movi	r2,1
   10490:	18800005 	stb	r2,0(r3)

	return;
}
   10494:	e037883a 	mov	sp,fp
   10498:	dfc00117 	ldw	ra,4(sp)
   1049c:	df000017 	ldw	fp,0(sp)
   104a0:	dec00204 	addi	sp,sp,8
   104a4:	f800283a 	ret

000104a8 <main>:


int main() {
   104a8:	defff904 	addi	sp,sp,-28
   104ac:	dfc00615 	stw	ra,24(sp)
   104b0:	df000515 	stw	fp,20(sp)
   104b4:	df000504 	addi	fp,sp,20
	printf("Near-Memory Accelerator for Vector Addition\n");
   104b8:	01000074 	movhi	r4,1
   104bc:	21164b04 	addi	r4,r4,22828
   104c0:	0010db40 	call	10db4 <puts>
	short int *a;
	short int *b;
	short int *s;

	int len = 3;
   104c4:	008000c4 	movi	r2,3
   104c8:	e0bffc15 	stw	r2,-16(fp)

	a = (short int *)malloc(sizeof(short int) * len);
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	1085883a 	add	r2,r2,r2
   104d4:	1009883a 	mov	r4,r2
   104d8:	00105c00 	call	105c0 <malloc>
   104dc:	e0bfff15 	stw	r2,-4(fp)
	b = (short int *)malloc(sizeof(short int) * len);
   104e0:	e0bffc17 	ldw	r2,-16(fp)
   104e4:	1085883a 	add	r2,r2,r2
   104e8:	1009883a 	mov	r4,r2
   104ec:	00105c00 	call	105c0 <malloc>
   104f0:	e0bffe15 	stw	r2,-8(fp)
	s = (short int *)malloc(sizeof(short int) * len);
   104f4:	e0bffc17 	ldw	r2,-16(fp)
   104f8:	1085883a 	add	r2,r2,r2
   104fc:	1009883a 	mov	r4,r2
   10500:	00105c00 	call	105c0 <malloc>
   10504:	e0bffd15 	stw	r2,-12(fp)

	int i;

	for (i = 0; i < len; ++i) {
   10508:	e03ffb15 	stw	zero,-20(fp)
   1050c:	00000a06 	br	10538 <main+0x90>
		a[i] = 2;
   10510:	e0bffb17 	ldw	r2,-20(fp)
   10514:	1085883a 	add	r2,r2,r2
   10518:	1007883a 	mov	r3,r2
   1051c:	e0bfff17 	ldw	r2,-4(fp)
   10520:	1887883a 	add	r3,r3,r2
   10524:	00800084 	movi	r2,2
   10528:	1880000d 	sth	r2,0(r3)
	b = (short int *)malloc(sizeof(short int) * len);
	s = (short int *)malloc(sizeof(short int) * len);

	int i;

	for (i = 0; i < len; ++i) {
   1052c:	e0bffb17 	ldw	r2,-20(fp)
   10530:	10800044 	addi	r2,r2,1
   10534:	e0bffb15 	stw	r2,-20(fp)
   10538:	e0fffb17 	ldw	r3,-20(fp)
   1053c:	e0bffc17 	ldw	r2,-16(fp)
   10540:	18bff316 	blt	r3,r2,10510 <main+0x68>
		a[i] = 2;
	}

	for (i = 0; i < len; ++i) {
   10544:	e03ffb15 	stw	zero,-20(fp)
   10548:	00000a06 	br	10574 <main+0xcc>
		b[i] = 4;
   1054c:	e0bffb17 	ldw	r2,-20(fp)
   10550:	1085883a 	add	r2,r2,r2
   10554:	1007883a 	mov	r3,r2
   10558:	e0bffe17 	ldw	r2,-8(fp)
   1055c:	1887883a 	add	r3,r3,r2
   10560:	00800104 	movi	r2,4
   10564:	1880000d 	sth	r2,0(r3)

	for (i = 0; i < len; ++i) {
		a[i] = 2;
	}

	for (i = 0; i < len; ++i) {
   10568:	e0bffb17 	ldw	r2,-20(fp)
   1056c:	10800044 	addi	r2,r2,1
   10570:	e0bffb15 	stw	r2,-20(fp)
   10574:	e0fffb17 	ldw	r3,-20(fp)
   10578:	e0bffc17 	ldw	r2,-16(fp)
   1057c:	18bff316 	blt	r3,r2,1054c <main+0xa4>
		b[i] = 4;
	}

	vectorAdd(a, b, s, len);
   10580:	e13fff17 	ldw	r4,-4(fp)
   10584:	e17ffe17 	ldw	r5,-8(fp)
   10588:	e1bffd17 	ldw	r6,-12(fp)
   1058c:	e1fffc17 	ldw	r7,-16(fp)
   10590:	00101f00 	call	101f0 <vectorAdd>
	for (i = 0; i < len; ++i) {
		printf("s[t] = %d\n", s[i]);
	}
	*/

	return 0;
   10594:	0005883a 	mov	r2,zero
}
   10598:	e037883a 	mov	sp,fp
   1059c:	dfc00117 	ldw	ra,4(sp)
   105a0:	df000017 	ldw	fp,0(sp)
   105a4:	dec00204 	addi	sp,sp,8
   105a8:	f800283a 	ret

000105ac <free>:
   105ac:	00800074 	movhi	r2,1
   105b0:	109ceb04 	addi	r2,r2,29612
   105b4:	200b883a 	mov	r5,r4
   105b8:	11000017 	ldw	r4,0(r2)
   105bc:	0010fd81 	jmpi	10fd8 <_free_r>

000105c0 <malloc>:
   105c0:	00800074 	movhi	r2,1
   105c4:	109ceb04 	addi	r2,r2,29612
   105c8:	200b883a 	mov	r5,r4
   105cc:	11000017 	ldw	r4,0(r2)
   105d0:	00105d41 	jmpi	105d4 <_malloc_r>

000105d4 <_malloc_r>:
   105d4:	defff604 	addi	sp,sp,-40
   105d8:	28c002c4 	addi	r3,r5,11
   105dc:	00800584 	movi	r2,22
   105e0:	dc800215 	stw	r18,8(sp)
   105e4:	dfc00915 	stw	ra,36(sp)
   105e8:	df000815 	stw	fp,32(sp)
   105ec:	ddc00715 	stw	r23,28(sp)
   105f0:	dd800615 	stw	r22,24(sp)
   105f4:	dd400515 	stw	r21,20(sp)
   105f8:	dd000415 	stw	r20,16(sp)
   105fc:	dcc00315 	stw	r19,12(sp)
   10600:	dc400115 	stw	r17,4(sp)
   10604:	dc000015 	stw	r16,0(sp)
   10608:	2025883a 	mov	r18,r4
   1060c:	10c01236 	bltu	r2,r3,10658 <_malloc_r+0x84>
   10610:	04400404 	movi	r17,16
   10614:	8940142e 	bgeu	r17,r5,10668 <_malloc_r+0x94>
   10618:	00800304 	movi	r2,12
   1061c:	0007883a 	mov	r3,zero
   10620:	90800015 	stw	r2,0(r18)
   10624:	1805883a 	mov	r2,r3
   10628:	dfc00917 	ldw	ra,36(sp)
   1062c:	df000817 	ldw	fp,32(sp)
   10630:	ddc00717 	ldw	r23,28(sp)
   10634:	dd800617 	ldw	r22,24(sp)
   10638:	dd400517 	ldw	r21,20(sp)
   1063c:	dd000417 	ldw	r20,16(sp)
   10640:	dcc00317 	ldw	r19,12(sp)
   10644:	dc800217 	ldw	r18,8(sp)
   10648:	dc400117 	ldw	r17,4(sp)
   1064c:	dc000017 	ldw	r16,0(sp)
   10650:	dec00a04 	addi	sp,sp,40
   10654:	f800283a 	ret
   10658:	00bffe04 	movi	r2,-8
   1065c:	18a2703a 	and	r17,r3,r2
   10660:	883fed16 	blt	r17,zero,10618 <_malloc_r+0x44>
   10664:	897fec36 	bltu	r17,r5,10618 <_malloc_r+0x44>
   10668:	9009883a 	mov	r4,r18
   1066c:	00135e40 	call	135e4 <__malloc_lock>
   10670:	00807dc4 	movi	r2,503
   10674:	14402b2e 	bgeu	r2,r17,10724 <_malloc_r+0x150>
   10678:	8806d27a 	srli	r3,r17,9
   1067c:	18003f1e 	bne	r3,zero,1077c <_malloc_r+0x1a8>
   10680:	880cd0fa 	srli	r6,r17,3
   10684:	300490fa 	slli	r2,r6,3
   10688:	02c00074 	movhi	r11,1
   1068c:	5ad66504 	addi	r11,r11,22932
   10690:	12cb883a 	add	r5,r2,r11
   10694:	2c000317 	ldw	r16,12(r5)
   10698:	580f883a 	mov	r7,r11
   1069c:	2c00041e 	bne	r5,r16,106b0 <_malloc_r+0xdc>
   106a0:	00000a06 	br	106cc <_malloc_r+0xf8>
   106a4:	1800860e 	bge	r3,zero,108c0 <_malloc_r+0x2ec>
   106a8:	84000317 	ldw	r16,12(r16)
   106ac:	2c000726 	beq	r5,r16,106cc <_malloc_r+0xf8>
   106b0:	80800117 	ldw	r2,4(r16)
   106b4:	00ffff04 	movi	r3,-4
   106b8:	10c8703a 	and	r4,r2,r3
   106bc:	2447c83a 	sub	r3,r4,r17
   106c0:	008003c4 	movi	r2,15
   106c4:	10fff70e 	bge	r2,r3,106a4 <_malloc_r+0xd0>
   106c8:	31bfffc4 	addi	r6,r6,-1
   106cc:	32400044 	addi	r9,r6,1
   106d0:	02800074 	movhi	r10,1
   106d4:	52966704 	addi	r10,r10,22940
   106d8:	54000217 	ldw	r16,8(r10)
   106dc:	8280a026 	beq	r16,r10,10960 <_malloc_r+0x38c>
   106e0:	80800117 	ldw	r2,4(r16)
   106e4:	00ffff04 	movi	r3,-4
   106e8:	10ca703a 	and	r5,r2,r3
   106ec:	2c4dc83a 	sub	r6,r5,r17
   106f0:	008003c4 	movi	r2,15
   106f4:	11808316 	blt	r2,r6,10904 <_malloc_r+0x330>
   106f8:	52800315 	stw	r10,12(r10)
   106fc:	52800215 	stw	r10,8(r10)
   10700:	30002916 	blt	r6,zero,107a8 <_malloc_r+0x1d4>
   10704:	8147883a 	add	r3,r16,r5
   10708:	18800117 	ldw	r2,4(r3)
   1070c:	9009883a 	mov	r4,r18
   10710:	10800054 	ori	r2,r2,1
   10714:	18800115 	stw	r2,4(r3)
   10718:	00136040 	call	13604 <__malloc_unlock>
   1071c:	80c00204 	addi	r3,r16,8
   10720:	003fc006 	br	10624 <_malloc_r+0x50>
   10724:	02c00074 	movhi	r11,1
   10728:	5ad66504 	addi	r11,r11,22932
   1072c:	8ac5883a 	add	r2,r17,r11
   10730:	14000317 	ldw	r16,12(r2)
   10734:	580f883a 	mov	r7,r11
   10738:	8806d0fa 	srli	r3,r17,3
   1073c:	14006c26 	beq	r2,r16,108f0 <_malloc_r+0x31c>
   10740:	80c00117 	ldw	r3,4(r16)
   10744:	00bfff04 	movi	r2,-4
   10748:	81800317 	ldw	r6,12(r16)
   1074c:	1886703a 	and	r3,r3,r2
   10750:	80c7883a 	add	r3,r16,r3
   10754:	18800117 	ldw	r2,4(r3)
   10758:	81400217 	ldw	r5,8(r16)
   1075c:	9009883a 	mov	r4,r18
   10760:	10800054 	ori	r2,r2,1
   10764:	18800115 	stw	r2,4(r3)
   10768:	31400215 	stw	r5,8(r6)
   1076c:	29800315 	stw	r6,12(r5)
   10770:	00136040 	call	13604 <__malloc_unlock>
   10774:	80c00204 	addi	r3,r16,8
   10778:	003faa06 	br	10624 <_malloc_r+0x50>
   1077c:	00800104 	movi	r2,4
   10780:	10c0052e 	bgeu	r2,r3,10798 <_malloc_r+0x1c4>
   10784:	00800504 	movi	r2,20
   10788:	10c07836 	bltu	r2,r3,1096c <_malloc_r+0x398>
   1078c:	198016c4 	addi	r6,r3,91
   10790:	300490fa 	slli	r2,r6,3
   10794:	003fbc06 	br	10688 <_malloc_r+0xb4>
   10798:	8804d1ba 	srli	r2,r17,6
   1079c:	11800e04 	addi	r6,r2,56
   107a0:	300490fa 	slli	r2,r6,3
   107a4:	003fb806 	br	10688 <_malloc_r+0xb4>
   107a8:	00807fc4 	movi	r2,511
   107ac:	1140bb36 	bltu	r2,r5,10a9c <_malloc_r+0x4c8>
   107b0:	2806d0fa 	srli	r3,r5,3
   107b4:	573ffe04 	addi	fp,r10,-8
   107b8:	00800044 	movi	r2,1
   107bc:	180890fa 	slli	r4,r3,3
   107c0:	1807d0ba 	srai	r3,r3,2
   107c4:	e1c00117 	ldw	r7,4(fp)
   107c8:	5909883a 	add	r4,r11,r4
   107cc:	21400217 	ldw	r5,8(r4)
   107d0:	10c4983a 	sll	r2,r2,r3
   107d4:	81000315 	stw	r4,12(r16)
   107d8:	81400215 	stw	r5,8(r16)
   107dc:	388eb03a 	or	r7,r7,r2
   107e0:	2c000315 	stw	r16,12(r5)
   107e4:	24000215 	stw	r16,8(r4)
   107e8:	e1c00115 	stw	r7,4(fp)
   107ec:	4807883a 	mov	r3,r9
   107f0:	4800cd16 	blt	r9,zero,10b28 <_malloc_r+0x554>
   107f4:	1807d0ba 	srai	r3,r3,2
   107f8:	00800044 	movi	r2,1
   107fc:	10c8983a 	sll	r4,r2,r3
   10800:	39004436 	bltu	r7,r4,10914 <_malloc_r+0x340>
   10804:	21c4703a 	and	r2,r4,r7
   10808:	10000a1e 	bne	r2,zero,10834 <_malloc_r+0x260>
   1080c:	2109883a 	add	r4,r4,r4
   10810:	00bfff04 	movi	r2,-4
   10814:	4884703a 	and	r2,r9,r2
   10818:	3906703a 	and	r3,r7,r4
   1081c:	12400104 	addi	r9,r2,4
   10820:	1800041e 	bne	r3,zero,10834 <_malloc_r+0x260>
   10824:	2109883a 	add	r4,r4,r4
   10828:	3904703a 	and	r2,r7,r4
   1082c:	4a400104 	addi	r9,r9,4
   10830:	103ffc26 	beq	r2,zero,10824 <_malloc_r+0x250>
   10834:	480490fa 	slli	r2,r9,3
   10838:	4819883a 	mov	r12,r9
   1083c:	023fff04 	movi	r8,-4
   10840:	589b883a 	add	r13,r11,r2
   10844:	6807883a 	mov	r3,r13
   10848:	014003c4 	movi	r5,15
   1084c:	1c000317 	ldw	r16,12(r3)
   10850:	1c00041e 	bne	r3,r16,10864 <_malloc_r+0x290>
   10854:	0000a706 	br	10af4 <_malloc_r+0x520>
   10858:	3000ab0e 	bge	r6,zero,10b08 <_malloc_r+0x534>
   1085c:	84000317 	ldw	r16,12(r16)
   10860:	1c00a426 	beq	r3,r16,10af4 <_malloc_r+0x520>
   10864:	80800117 	ldw	r2,4(r16)
   10868:	1204703a 	and	r2,r2,r8
   1086c:	144dc83a 	sub	r6,r2,r17
   10870:	29bff90e 	bge	r5,r6,10858 <_malloc_r+0x284>
   10874:	81000317 	ldw	r4,12(r16)
   10878:	80c00217 	ldw	r3,8(r16)
   1087c:	89400054 	ori	r5,r17,1
   10880:	8445883a 	add	r2,r16,r17
   10884:	20c00215 	stw	r3,8(r4)
   10888:	19000315 	stw	r4,12(r3)
   1088c:	81400115 	stw	r5,4(r16)
   10890:	1187883a 	add	r3,r2,r6
   10894:	31000054 	ori	r4,r6,1
   10898:	50800315 	stw	r2,12(r10)
   1089c:	50800215 	stw	r2,8(r10)
   108a0:	19800015 	stw	r6,0(r3)
   108a4:	11000115 	stw	r4,4(r2)
   108a8:	12800215 	stw	r10,8(r2)
   108ac:	12800315 	stw	r10,12(r2)
   108b0:	9009883a 	mov	r4,r18
   108b4:	00136040 	call	13604 <__malloc_unlock>
   108b8:	80c00204 	addi	r3,r16,8
   108bc:	003f5906 	br	10624 <_malloc_r+0x50>
   108c0:	8109883a 	add	r4,r16,r4
   108c4:	20800117 	ldw	r2,4(r4)
   108c8:	80c00217 	ldw	r3,8(r16)
   108cc:	81400317 	ldw	r5,12(r16)
   108d0:	10800054 	ori	r2,r2,1
   108d4:	20800115 	stw	r2,4(r4)
   108d8:	28c00215 	stw	r3,8(r5)
   108dc:	19400315 	stw	r5,12(r3)
   108e0:	9009883a 	mov	r4,r18
   108e4:	00136040 	call	13604 <__malloc_unlock>
   108e8:	80c00204 	addi	r3,r16,8
   108ec:	003f4d06 	br	10624 <_malloc_r+0x50>
   108f0:	80800204 	addi	r2,r16,8
   108f4:	14000317 	ldw	r16,12(r2)
   108f8:	143f911e 	bne	r2,r16,10740 <_malloc_r+0x16c>
   108fc:	1a400084 	addi	r9,r3,2
   10900:	003f7306 	br	106d0 <_malloc_r+0xfc>
   10904:	88c00054 	ori	r3,r17,1
   10908:	8445883a 	add	r2,r16,r17
   1090c:	80c00115 	stw	r3,4(r16)
   10910:	003fdf06 	br	10890 <_malloc_r+0x2bc>
   10914:	e4000217 	ldw	r16,8(fp)
   10918:	00bfff04 	movi	r2,-4
   1091c:	80c00117 	ldw	r3,4(r16)
   10920:	802d883a 	mov	r22,r16
   10924:	18aa703a 	and	r21,r3,r2
   10928:	ac401636 	bltu	r21,r17,10984 <_malloc_r+0x3b0>
   1092c:	ac49c83a 	sub	r4,r21,r17
   10930:	008003c4 	movi	r2,15
   10934:	1100130e 	bge	r2,r4,10984 <_malloc_r+0x3b0>
   10938:	88800054 	ori	r2,r17,1
   1093c:	8447883a 	add	r3,r16,r17
   10940:	80800115 	stw	r2,4(r16)
   10944:	20800054 	ori	r2,r4,1
   10948:	18800115 	stw	r2,4(r3)
   1094c:	e0c00215 	stw	r3,8(fp)
   10950:	9009883a 	mov	r4,r18
   10954:	00136040 	call	13604 <__malloc_unlock>
   10958:	80c00204 	addi	r3,r16,8
   1095c:	003f3106 	br	10624 <_malloc_r+0x50>
   10960:	39c00117 	ldw	r7,4(r7)
   10964:	573ffe04 	addi	fp,r10,-8
   10968:	003fa006 	br	107ec <_malloc_r+0x218>
   1096c:	00801504 	movi	r2,84
   10970:	10c06736 	bltu	r2,r3,10b10 <_malloc_r+0x53c>
   10974:	8804d33a 	srli	r2,r17,12
   10978:	11801b84 	addi	r6,r2,110
   1097c:	300490fa 	slli	r2,r6,3
   10980:	003f4106 	br	10688 <_malloc_r+0xb4>
   10984:	d0a6a017 	ldw	r2,-25984(gp)
   10988:	d0e00117 	ldw	r3,-32764(gp)
   1098c:	053fffc4 	movi	r20,-1
   10990:	10800404 	addi	r2,r2,16
   10994:	88a7883a 	add	r19,r17,r2
   10998:	1d000326 	beq	r3,r20,109a8 <_malloc_r+0x3d4>
   1099c:	98c3ffc4 	addi	r3,r19,4095
   109a0:	00bc0004 	movi	r2,-4096
   109a4:	18a6703a 	and	r19,r3,r2
   109a8:	9009883a 	mov	r4,r18
   109ac:	980b883a 	mov	r5,r19
   109b0:	0010dc80 	call	10dc8 <_sbrk_r>
   109b4:	1009883a 	mov	r4,r2
   109b8:	15000426 	beq	r2,r20,109cc <_malloc_r+0x3f8>
   109bc:	854b883a 	add	r5,r16,r21
   109c0:	1029883a 	mov	r20,r2
   109c4:	11405a2e 	bgeu	r2,r5,10b30 <_malloc_r+0x55c>
   109c8:	87000c26 	beq	r16,fp,109fc <_malloc_r+0x428>
   109cc:	e4000217 	ldw	r16,8(fp)
   109d0:	80c00117 	ldw	r3,4(r16)
   109d4:	00bfff04 	movi	r2,-4
   109d8:	1884703a 	and	r2,r3,r2
   109dc:	14400336 	bltu	r2,r17,109ec <_malloc_r+0x418>
   109e0:	1449c83a 	sub	r4,r2,r17
   109e4:	008003c4 	movi	r2,15
   109e8:	113fd316 	blt	r2,r4,10938 <_malloc_r+0x364>
   109ec:	9009883a 	mov	r4,r18
   109f0:	00136040 	call	13604 <__malloc_unlock>
   109f4:	0007883a 	mov	r3,zero
   109f8:	003f0a06 	br	10624 <_malloc_r+0x50>
   109fc:	05c000b4 	movhi	r23,2
   10a00:	bde39304 	addi	r23,r23,-29108
   10a04:	b8800017 	ldw	r2,0(r23)
   10a08:	988d883a 	add	r6,r19,r2
   10a0c:	b9800015 	stw	r6,0(r23)
   10a10:	d0e00117 	ldw	r3,-32764(gp)
   10a14:	00bfffc4 	movi	r2,-1
   10a18:	18808e26 	beq	r3,r2,10c54 <_malloc_r+0x680>
   10a1c:	2145c83a 	sub	r2,r4,r5
   10a20:	3085883a 	add	r2,r6,r2
   10a24:	b8800015 	stw	r2,0(r23)
   10a28:	20c001cc 	andi	r3,r4,7
   10a2c:	18005f1e 	bne	r3,zero,10bac <_malloc_r+0x5d8>
   10a30:	000b883a 	mov	r5,zero
   10a34:	a4c5883a 	add	r2,r20,r19
   10a38:	1083ffcc 	andi	r2,r2,4095
   10a3c:	00c40004 	movi	r3,4096
   10a40:	1887c83a 	sub	r3,r3,r2
   10a44:	28e7883a 	add	r19,r5,r3
   10a48:	9009883a 	mov	r4,r18
   10a4c:	980b883a 	mov	r5,r19
   10a50:	0010dc80 	call	10dc8 <_sbrk_r>
   10a54:	1007883a 	mov	r3,r2
   10a58:	00bfffc4 	movi	r2,-1
   10a5c:	18807a26 	beq	r3,r2,10c48 <_malloc_r+0x674>
   10a60:	1d05c83a 	sub	r2,r3,r20
   10a64:	9885883a 	add	r2,r19,r2
   10a68:	10c00054 	ori	r3,r2,1
   10a6c:	b8800017 	ldw	r2,0(r23)
   10a70:	a021883a 	mov	r16,r20
   10a74:	a0c00115 	stw	r3,4(r20)
   10a78:	9885883a 	add	r2,r19,r2
   10a7c:	b8800015 	stw	r2,0(r23)
   10a80:	e5000215 	stw	r20,8(fp)
   10a84:	b7003626 	beq	r22,fp,10b60 <_malloc_r+0x58c>
   10a88:	018003c4 	movi	r6,15
   10a8c:	35404b36 	bltu	r6,r21,10bbc <_malloc_r+0x5e8>
   10a90:	00800044 	movi	r2,1
   10a94:	a0800115 	stw	r2,4(r20)
   10a98:	003fcd06 	br	109d0 <_malloc_r+0x3fc>
   10a9c:	2808d27a 	srli	r4,r5,9
   10aa0:	2000371e 	bne	r4,zero,10b80 <_malloc_r+0x5ac>
   10aa4:	2808d0fa 	srli	r4,r5,3
   10aa8:	200690fa 	slli	r3,r4,3
   10aac:	1ad1883a 	add	r8,r3,r11
   10ab0:	41800217 	ldw	r6,8(r8)
   10ab4:	41805b26 	beq	r8,r6,10c24 <_malloc_r+0x650>
   10ab8:	30800117 	ldw	r2,4(r6)
   10abc:	00ffff04 	movi	r3,-4
   10ac0:	10c4703a 	and	r2,r2,r3
   10ac4:	2880022e 	bgeu	r5,r2,10ad0 <_malloc_r+0x4fc>
   10ac8:	31800217 	ldw	r6,8(r6)
   10acc:	41bffa1e 	bne	r8,r6,10ab8 <_malloc_r+0x4e4>
   10ad0:	32000317 	ldw	r8,12(r6)
   10ad4:	39c00117 	ldw	r7,4(r7)
   10ad8:	82000315 	stw	r8,12(r16)
   10adc:	81800215 	stw	r6,8(r16)
   10ae0:	07000074 	movhi	fp,1
   10ae4:	e7166504 	addi	fp,fp,22932
   10ae8:	34000315 	stw	r16,12(r6)
   10aec:	44000215 	stw	r16,8(r8)
   10af0:	003f3e06 	br	107ec <_malloc_r+0x218>
   10af4:	63000044 	addi	r12,r12,1
   10af8:	608000cc 	andi	r2,r12,3
   10afc:	10005d26 	beq	r2,zero,10c74 <_malloc_r+0x6a0>
   10b00:	18c00204 	addi	r3,r3,8
   10b04:	003f5106 	br	1084c <_malloc_r+0x278>
   10b08:	8089883a 	add	r4,r16,r2
   10b0c:	003f6d06 	br	108c4 <_malloc_r+0x2f0>
   10b10:	00805504 	movi	r2,340
   10b14:	10c02036 	bltu	r2,r3,10b98 <_malloc_r+0x5c4>
   10b18:	8804d3fa 	srli	r2,r17,15
   10b1c:	11801dc4 	addi	r6,r2,119
   10b20:	300490fa 	slli	r2,r6,3
   10b24:	003ed806 	br	10688 <_malloc_r+0xb4>
   10b28:	48c000c4 	addi	r3,r9,3
   10b2c:	003f3106 	br	107f4 <_malloc_r+0x220>
   10b30:	05c000b4 	movhi	r23,2
   10b34:	bde39304 	addi	r23,r23,-29108
   10b38:	b8800017 	ldw	r2,0(r23)
   10b3c:	988d883a 	add	r6,r19,r2
   10b40:	b9800015 	stw	r6,0(r23)
   10b44:	293fb21e 	bne	r5,r4,10a10 <_malloc_r+0x43c>
   10b48:	2083ffcc 	andi	r2,r4,4095
   10b4c:	103fb01e 	bne	r2,zero,10a10 <_malloc_r+0x43c>
   10b50:	e4000217 	ldw	r16,8(fp)
   10b54:	9d45883a 	add	r2,r19,r21
   10b58:	10800054 	ori	r2,r2,1
   10b5c:	80800115 	stw	r2,4(r16)
   10b60:	b8c00017 	ldw	r3,0(r23)
   10b64:	d0a6a117 	ldw	r2,-25980(gp)
   10b68:	10c0012e 	bgeu	r2,r3,10b70 <_malloc_r+0x59c>
   10b6c:	d0e6a115 	stw	r3,-25980(gp)
   10b70:	d0a6a217 	ldw	r2,-25976(gp)
   10b74:	10ff962e 	bgeu	r2,r3,109d0 <_malloc_r+0x3fc>
   10b78:	d0e6a215 	stw	r3,-25976(gp)
   10b7c:	003f9406 	br	109d0 <_malloc_r+0x3fc>
   10b80:	00800104 	movi	r2,4
   10b84:	11001e36 	bltu	r2,r4,10c00 <_malloc_r+0x62c>
   10b88:	2804d1ba 	srli	r2,r5,6
   10b8c:	11000e04 	addi	r4,r2,56
   10b90:	200690fa 	slli	r3,r4,3
   10b94:	003fc506 	br	10aac <_malloc_r+0x4d8>
   10b98:	00815504 	movi	r2,1364
   10b9c:	10c01d2e 	bgeu	r2,r3,10c14 <_malloc_r+0x640>
   10ba0:	01801f84 	movi	r6,126
   10ba4:	0080fc04 	movi	r2,1008
   10ba8:	003eb706 	br	10688 <_malloc_r+0xb4>
   10bac:	00800204 	movi	r2,8
   10bb0:	10cbc83a 	sub	r5,r2,r3
   10bb4:	2169883a 	add	r20,r4,r5
   10bb8:	003f9e06 	br	10a34 <_malloc_r+0x460>
   10bbc:	00bffe04 	movi	r2,-8
   10bc0:	a93ffd04 	addi	r4,r21,-12
   10bc4:	2088703a 	and	r4,r4,r2
   10bc8:	b10b883a 	add	r5,r22,r4
   10bcc:	00c00144 	movi	r3,5
   10bd0:	28c00215 	stw	r3,8(r5)
   10bd4:	28c00115 	stw	r3,4(r5)
   10bd8:	b0800117 	ldw	r2,4(r22)
   10bdc:	1080004c 	andi	r2,r2,1
   10be0:	2084b03a 	or	r2,r4,r2
   10be4:	b0800115 	stw	r2,4(r22)
   10be8:	313fdd2e 	bgeu	r6,r4,10b60 <_malloc_r+0x58c>
   10bec:	b1400204 	addi	r5,r22,8
   10bf0:	9009883a 	mov	r4,r18
   10bf4:	0010fd80 	call	10fd8 <_free_r>
   10bf8:	e4000217 	ldw	r16,8(fp)
   10bfc:	003fd806 	br	10b60 <_malloc_r+0x58c>
   10c00:	00800504 	movi	r2,20
   10c04:	11001536 	bltu	r2,r4,10c5c <_malloc_r+0x688>
   10c08:	210016c4 	addi	r4,r4,91
   10c0c:	200690fa 	slli	r3,r4,3
   10c10:	003fa606 	br	10aac <_malloc_r+0x4d8>
   10c14:	8804d4ba 	srli	r2,r17,18
   10c18:	11801f04 	addi	r6,r2,124
   10c1c:	300490fa 	slli	r2,r6,3
   10c20:	003e9906 	br	10688 <_malloc_r+0xb4>
   10c24:	2009d0ba 	srai	r4,r4,2
   10c28:	01400074 	movhi	r5,1
   10c2c:	29566504 	addi	r5,r5,22932
   10c30:	00c00044 	movi	r3,1
   10c34:	28800117 	ldw	r2,4(r5)
   10c38:	1906983a 	sll	r3,r3,r4
   10c3c:	10c4b03a 	or	r2,r2,r3
   10c40:	28800115 	stw	r2,4(r5)
   10c44:	003fa306 	br	10ad4 <_malloc_r+0x500>
   10c48:	0027883a 	mov	r19,zero
   10c4c:	00c00044 	movi	r3,1
   10c50:	003f8606 	br	10a6c <_malloc_r+0x498>
   10c54:	d1200115 	stw	r4,-32764(gp)
   10c58:	003f7306 	br	10a28 <_malloc_r+0x454>
   10c5c:	00801504 	movi	r2,84
   10c60:	11001936 	bltu	r2,r4,10cc8 <_malloc_r+0x6f4>
   10c64:	2804d33a 	srli	r2,r5,12
   10c68:	11001b84 	addi	r4,r2,110
   10c6c:	200690fa 	slli	r3,r4,3
   10c70:	003f8e06 	br	10aac <_malloc_r+0x4d8>
   10c74:	480b883a 	mov	r5,r9
   10c78:	6807883a 	mov	r3,r13
   10c7c:	288000cc 	andi	r2,r5,3
   10c80:	18fffe04 	addi	r3,r3,-8
   10c84:	297fffc4 	addi	r5,r5,-1
   10c88:	10001526 	beq	r2,zero,10ce0 <_malloc_r+0x70c>
   10c8c:	18800217 	ldw	r2,8(r3)
   10c90:	10fffa26 	beq	r2,r3,10c7c <_malloc_r+0x6a8>
   10c94:	2109883a 	add	r4,r4,r4
   10c98:	393f1e36 	bltu	r7,r4,10914 <_malloc_r+0x340>
   10c9c:	203f1d26 	beq	r4,zero,10914 <_malloc_r+0x340>
   10ca0:	21c4703a 	and	r2,r4,r7
   10ca4:	10000226 	beq	r2,zero,10cb0 <_malloc_r+0x6dc>
   10ca8:	6013883a 	mov	r9,r12
   10cac:	003ee106 	br	10834 <_malloc_r+0x260>
   10cb0:	2109883a 	add	r4,r4,r4
   10cb4:	3904703a 	and	r2,r7,r4
   10cb8:	63000104 	addi	r12,r12,4
   10cbc:	103ffc26 	beq	r2,zero,10cb0 <_malloc_r+0x6dc>
   10cc0:	6013883a 	mov	r9,r12
   10cc4:	003edb06 	br	10834 <_malloc_r+0x260>
   10cc8:	00805504 	movi	r2,340
   10ccc:	11000836 	bltu	r2,r4,10cf0 <_malloc_r+0x71c>
   10cd0:	2804d3fa 	srli	r2,r5,15
   10cd4:	11001dc4 	addi	r4,r2,119
   10cd8:	200690fa 	slli	r3,r4,3
   10cdc:	003f7306 	br	10aac <_malloc_r+0x4d8>
   10ce0:	0104303a 	nor	r2,zero,r4
   10ce4:	388e703a 	and	r7,r7,r2
   10ce8:	e1c00115 	stw	r7,4(fp)
   10cec:	003fe906 	br	10c94 <_malloc_r+0x6c0>
   10cf0:	00815504 	movi	r2,1364
   10cf4:	1100032e 	bgeu	r2,r4,10d04 <_malloc_r+0x730>
   10cf8:	01001f84 	movi	r4,126
   10cfc:	00c0fc04 	movi	r3,1008
   10d00:	003f6a06 	br	10aac <_malloc_r+0x4d8>
   10d04:	2804d4ba 	srli	r2,r5,18
   10d08:	11001f04 	addi	r4,r2,124
   10d0c:	200690fa 	slli	r3,r4,3
   10d10:	003f6606 	br	10aac <_malloc_r+0x4d8>

00010d14 <_puts_r>:
   10d14:	defff604 	addi	sp,sp,-40
   10d18:	dc400715 	stw	r17,28(sp)
   10d1c:	2023883a 	mov	r17,r4
   10d20:	2809883a 	mov	r4,r5
   10d24:	dfc00915 	stw	ra,36(sp)
   10d28:	dcc00815 	stw	r19,32(sp)
   10d2c:	2827883a 	mov	r19,r5
   10d30:	0010e380 	call	10e38 <strlen>
   10d34:	89400217 	ldw	r5,8(r17)
   10d38:	00c00074 	movhi	r3,1
   10d3c:	18d65604 	addi	r3,r3,22872
   10d40:	01c00044 	movi	r7,1
   10d44:	12000044 	addi	r8,r2,1
   10d48:	d8c00515 	stw	r3,20(sp)
   10d4c:	d9c00615 	stw	r7,24(sp)
   10d50:	d8c00304 	addi	r3,sp,12
   10d54:	01c00084 	movi	r7,2
   10d58:	8809883a 	mov	r4,r17
   10d5c:	d80d883a 	mov	r6,sp
   10d60:	d8c00015 	stw	r3,0(sp)
   10d64:	dcc00315 	stw	r19,12(sp)
   10d68:	da000215 	stw	r8,8(sp)
   10d6c:	d9c00115 	stw	r7,4(sp)
   10d70:	d8800415 	stw	r2,16(sp)
   10d74:	00112ec0 	call	112ec <__sfvwrite_r>
   10d78:	00ffffc4 	movi	r3,-1
   10d7c:	10000626 	beq	r2,zero,10d98 <_puts_r+0x84>
   10d80:	1805883a 	mov	r2,r3
   10d84:	dfc00917 	ldw	ra,36(sp)
   10d88:	dcc00817 	ldw	r19,32(sp)
   10d8c:	dc400717 	ldw	r17,28(sp)
   10d90:	dec00a04 	addi	sp,sp,40
   10d94:	f800283a 	ret
   10d98:	00c00284 	movi	r3,10
   10d9c:	1805883a 	mov	r2,r3
   10da0:	dfc00917 	ldw	ra,36(sp)
   10da4:	dcc00817 	ldw	r19,32(sp)
   10da8:	dc400717 	ldw	r17,28(sp)
   10dac:	dec00a04 	addi	sp,sp,40
   10db0:	f800283a 	ret

00010db4 <puts>:
   10db4:	00800074 	movhi	r2,1
   10db8:	109ceb04 	addi	r2,r2,29612
   10dbc:	200b883a 	mov	r5,r4
   10dc0:	11000017 	ldw	r4,0(r2)
   10dc4:	0010d141 	jmpi	10d14 <_puts_r>

00010dc8 <_sbrk_r>:
   10dc8:	defffd04 	addi	sp,sp,-12
   10dcc:	dc000015 	stw	r16,0(sp)
   10dd0:	040000b4 	movhi	r16,2
   10dd4:	84238c04 	addi	r16,r16,-29136
   10dd8:	dc400115 	stw	r17,4(sp)
   10ddc:	80000015 	stw	zero,0(r16)
   10de0:	2023883a 	mov	r17,r4
   10de4:	2809883a 	mov	r4,r5
   10de8:	dfc00215 	stw	ra,8(sp)
   10dec:	00138200 	call	13820 <sbrk>
   10df0:	1007883a 	mov	r3,r2
   10df4:	00bfffc4 	movi	r2,-1
   10df8:	18800626 	beq	r3,r2,10e14 <_sbrk_r+0x4c>
   10dfc:	1805883a 	mov	r2,r3
   10e00:	dfc00217 	ldw	ra,8(sp)
   10e04:	dc400117 	ldw	r17,4(sp)
   10e08:	dc000017 	ldw	r16,0(sp)
   10e0c:	dec00304 	addi	sp,sp,12
   10e10:	f800283a 	ret
   10e14:	80800017 	ldw	r2,0(r16)
   10e18:	103ff826 	beq	r2,zero,10dfc <_sbrk_r+0x34>
   10e1c:	88800015 	stw	r2,0(r17)
   10e20:	1805883a 	mov	r2,r3
   10e24:	dfc00217 	ldw	ra,8(sp)
   10e28:	dc400117 	ldw	r17,4(sp)
   10e2c:	dc000017 	ldw	r16,0(sp)
   10e30:	dec00304 	addi	sp,sp,12
   10e34:	f800283a 	ret

00010e38 <strlen>:
   10e38:	208000cc 	andi	r2,r4,3
   10e3c:	2011883a 	mov	r8,r4
   10e40:	1000161e 	bne	r2,zero,10e9c <strlen+0x64>
   10e44:	20c00017 	ldw	r3,0(r4)
   10e48:	017fbff4 	movhi	r5,65279
   10e4c:	297fbfc4 	addi	r5,r5,-257
   10e50:	01e02074 	movhi	r7,32897
   10e54:	39e02004 	addi	r7,r7,-32640
   10e58:	1945883a 	add	r2,r3,r5
   10e5c:	11c4703a 	and	r2,r2,r7
   10e60:	00c6303a 	nor	r3,zero,r3
   10e64:	1886703a 	and	r3,r3,r2
   10e68:	18000c1e 	bne	r3,zero,10e9c <strlen+0x64>
   10e6c:	280d883a 	mov	r6,r5
   10e70:	380b883a 	mov	r5,r7
   10e74:	21000104 	addi	r4,r4,4
   10e78:	20800017 	ldw	r2,0(r4)
   10e7c:	1187883a 	add	r3,r2,r6
   10e80:	1946703a 	and	r3,r3,r5
   10e84:	0084303a 	nor	r2,zero,r2
   10e88:	10c4703a 	and	r2,r2,r3
   10e8c:	103ff926 	beq	r2,zero,10e74 <strlen+0x3c>
   10e90:	20800007 	ldb	r2,0(r4)
   10e94:	10000326 	beq	r2,zero,10ea4 <strlen+0x6c>
   10e98:	21000044 	addi	r4,r4,1
   10e9c:	20800007 	ldb	r2,0(r4)
   10ea0:	103ffd1e 	bne	r2,zero,10e98 <strlen+0x60>
   10ea4:	2205c83a 	sub	r2,r4,r8
   10ea8:	f800283a 	ret

00010eac <_malloc_trim_r>:
   10eac:	defffb04 	addi	sp,sp,-20
   10eb0:	dcc00315 	stw	r19,12(sp)
   10eb4:	04c00074 	movhi	r19,1
   10eb8:	9cd66504 	addi	r19,r19,22932
   10ebc:	dc800215 	stw	r18,8(sp)
   10ec0:	dc400115 	stw	r17,4(sp)
   10ec4:	dc000015 	stw	r16,0(sp)
   10ec8:	2823883a 	mov	r17,r5
   10ecc:	2025883a 	mov	r18,r4
   10ed0:	dfc00415 	stw	ra,16(sp)
   10ed4:	00135e40 	call	135e4 <__malloc_lock>
   10ed8:	98800217 	ldw	r2,8(r19)
   10edc:	9009883a 	mov	r4,r18
   10ee0:	000b883a 	mov	r5,zero
   10ee4:	10c00117 	ldw	r3,4(r2)
   10ee8:	00bfff04 	movi	r2,-4
   10eec:	18a0703a 	and	r16,r3,r2
   10ef0:	8463c83a 	sub	r17,r16,r17
   10ef4:	8c43fbc4 	addi	r17,r17,4079
   10ef8:	8822d33a 	srli	r17,r17,12
   10efc:	0083ffc4 	movi	r2,4095
   10f00:	8c7fffc4 	addi	r17,r17,-1
   10f04:	8822933a 	slli	r17,r17,12
   10f08:	1440060e 	bge	r2,r17,10f24 <_malloc_trim_r+0x78>
   10f0c:	0010dc80 	call	10dc8 <_sbrk_r>
   10f10:	98c00217 	ldw	r3,8(r19)
   10f14:	9009883a 	mov	r4,r18
   10f18:	044bc83a 	sub	r5,zero,r17
   10f1c:	80c7883a 	add	r3,r16,r3
   10f20:	10c00926 	beq	r2,r3,10f48 <_malloc_trim_r+0x9c>
   10f24:	00136040 	call	13604 <__malloc_unlock>
   10f28:	0005883a 	mov	r2,zero
   10f2c:	dfc00417 	ldw	ra,16(sp)
   10f30:	dcc00317 	ldw	r19,12(sp)
   10f34:	dc800217 	ldw	r18,8(sp)
   10f38:	dc400117 	ldw	r17,4(sp)
   10f3c:	dc000017 	ldw	r16,0(sp)
   10f40:	dec00504 	addi	sp,sp,20
   10f44:	f800283a 	ret
   10f48:	9009883a 	mov	r4,r18
   10f4c:	0010dc80 	call	10dc8 <_sbrk_r>
   10f50:	844dc83a 	sub	r6,r16,r17
   10f54:	00ffffc4 	movi	r3,-1
   10f58:	9009883a 	mov	r4,r18
   10f5c:	000b883a 	mov	r5,zero
   10f60:	01c000b4 	movhi	r7,2
   10f64:	39e39304 	addi	r7,r7,-29108
   10f68:	31800054 	ori	r6,r6,1
   10f6c:	10c00926 	beq	r2,r3,10f94 <_malloc_trim_r+0xe8>
   10f70:	38800017 	ldw	r2,0(r7)
   10f74:	98c00217 	ldw	r3,8(r19)
   10f78:	9009883a 	mov	r4,r18
   10f7c:	1445c83a 	sub	r2,r2,r17
   10f80:	38800015 	stw	r2,0(r7)
   10f84:	19800115 	stw	r6,4(r3)
   10f88:	00136040 	call	13604 <__malloc_unlock>
   10f8c:	00800044 	movi	r2,1
   10f90:	003fe606 	br	10f2c <_malloc_trim_r+0x80>
   10f94:	0010dc80 	call	10dc8 <_sbrk_r>
   10f98:	99800217 	ldw	r6,8(r19)
   10f9c:	100f883a 	mov	r7,r2
   10fa0:	9009883a 	mov	r4,r18
   10fa4:	1187c83a 	sub	r3,r2,r6
   10fa8:	008003c4 	movi	r2,15
   10fac:	19400054 	ori	r5,r3,1
   10fb0:	10ffdc0e 	bge	r2,r3,10f24 <_malloc_trim_r+0x78>
   10fb4:	00800074 	movhi	r2,1
   10fb8:	109cea04 	addi	r2,r2,29608
   10fbc:	10c00017 	ldw	r3,0(r2)
   10fc0:	008000b4 	movhi	r2,2
   10fc4:	10a39304 	addi	r2,r2,-29108
   10fc8:	31400115 	stw	r5,4(r6)
   10fcc:	38c7c83a 	sub	r3,r7,r3
   10fd0:	10c00015 	stw	r3,0(r2)
   10fd4:	003fd306 	br	10f24 <_malloc_trim_r+0x78>

00010fd8 <_free_r>:
   10fd8:	defffd04 	addi	sp,sp,-12
   10fdc:	dc400115 	stw	r17,4(sp)
   10fe0:	dc000015 	stw	r16,0(sp)
   10fe4:	dfc00215 	stw	ra,8(sp)
   10fe8:	2821883a 	mov	r16,r5
   10fec:	2023883a 	mov	r17,r4
   10ff0:	28005a26 	beq	r5,zero,1115c <_free_r+0x184>
   10ff4:	00135e40 	call	135e4 <__malloc_lock>
   10ff8:	823ffe04 	addi	r8,r16,-8
   10ffc:	41400117 	ldw	r5,4(r8)
   11000:	00bfff84 	movi	r2,-2
   11004:	02800074 	movhi	r10,1
   11008:	52966504 	addi	r10,r10,22932
   1100c:	288e703a 	and	r7,r5,r2
   11010:	41cd883a 	add	r6,r8,r7
   11014:	30c00117 	ldw	r3,4(r6)
   11018:	51000217 	ldw	r4,8(r10)
   1101c:	00bfff04 	movi	r2,-4
   11020:	1892703a 	and	r9,r3,r2
   11024:	5017883a 	mov	r11,r10
   11028:	31006726 	beq	r6,r4,111c8 <_free_r+0x1f0>
   1102c:	2880004c 	andi	r2,r5,1
   11030:	1005003a 	cmpeq	r2,r2,zero
   11034:	32400115 	stw	r9,4(r6)
   11038:	10001a1e 	bne	r2,zero,110a4 <_free_r+0xcc>
   1103c:	000b883a 	mov	r5,zero
   11040:	3247883a 	add	r3,r6,r9
   11044:	18800117 	ldw	r2,4(r3)
   11048:	1080004c 	andi	r2,r2,1
   1104c:	1000231e 	bne	r2,zero,110dc <_free_r+0x104>
   11050:	280ac03a 	cmpne	r5,r5,zero
   11054:	3a4f883a 	add	r7,r7,r9
   11058:	2800451e 	bne	r5,zero,11170 <_free_r+0x198>
   1105c:	31000217 	ldw	r4,8(r6)
   11060:	00800074 	movhi	r2,1
   11064:	10966704 	addi	r2,r2,22940
   11068:	20807b26 	beq	r4,r2,11258 <_free_r+0x280>
   1106c:	30800317 	ldw	r2,12(r6)
   11070:	3a07883a 	add	r3,r7,r8
   11074:	19c00015 	stw	r7,0(r3)
   11078:	11000215 	stw	r4,8(r2)
   1107c:	20800315 	stw	r2,12(r4)
   11080:	38800054 	ori	r2,r7,1
   11084:	40800115 	stw	r2,4(r8)
   11088:	28001a26 	beq	r5,zero,110f4 <_free_r+0x11c>
   1108c:	8809883a 	mov	r4,r17
   11090:	dfc00217 	ldw	ra,8(sp)
   11094:	dc400117 	ldw	r17,4(sp)
   11098:	dc000017 	ldw	r16,0(sp)
   1109c:	dec00304 	addi	sp,sp,12
   110a0:	00136041 	jmpi	13604 <__malloc_unlock>
   110a4:	80bffe17 	ldw	r2,-8(r16)
   110a8:	50c00204 	addi	r3,r10,8
   110ac:	4091c83a 	sub	r8,r8,r2
   110b0:	41000217 	ldw	r4,8(r8)
   110b4:	388f883a 	add	r7,r7,r2
   110b8:	20c06126 	beq	r4,r3,11240 <_free_r+0x268>
   110bc:	40800317 	ldw	r2,12(r8)
   110c0:	3247883a 	add	r3,r6,r9
   110c4:	000b883a 	mov	r5,zero
   110c8:	11000215 	stw	r4,8(r2)
   110cc:	20800315 	stw	r2,12(r4)
   110d0:	18800117 	ldw	r2,4(r3)
   110d4:	1080004c 	andi	r2,r2,1
   110d8:	103fdd26 	beq	r2,zero,11050 <_free_r+0x78>
   110dc:	38800054 	ori	r2,r7,1
   110e0:	3a07883a 	add	r3,r7,r8
   110e4:	280ac03a 	cmpne	r5,r5,zero
   110e8:	40800115 	stw	r2,4(r8)
   110ec:	19c00015 	stw	r7,0(r3)
   110f0:	283fe61e 	bne	r5,zero,1108c <_free_r+0xb4>
   110f4:	00807fc4 	movi	r2,511
   110f8:	11c01f2e 	bgeu	r2,r7,11178 <_free_r+0x1a0>
   110fc:	3806d27a 	srli	r3,r7,9
   11100:	1800481e 	bne	r3,zero,11224 <_free_r+0x24c>
   11104:	3804d0fa 	srli	r2,r7,3
   11108:	100690fa 	slli	r3,r2,3
   1110c:	1acd883a 	add	r6,r3,r11
   11110:	31400217 	ldw	r5,8(r6)
   11114:	31405926 	beq	r6,r5,1127c <_free_r+0x2a4>
   11118:	28800117 	ldw	r2,4(r5)
   1111c:	00ffff04 	movi	r3,-4
   11120:	10c4703a 	and	r2,r2,r3
   11124:	3880022e 	bgeu	r7,r2,11130 <_free_r+0x158>
   11128:	29400217 	ldw	r5,8(r5)
   1112c:	317ffa1e 	bne	r6,r5,11118 <_free_r+0x140>
   11130:	29800317 	ldw	r6,12(r5)
   11134:	41800315 	stw	r6,12(r8)
   11138:	41400215 	stw	r5,8(r8)
   1113c:	8809883a 	mov	r4,r17
   11140:	2a000315 	stw	r8,12(r5)
   11144:	32000215 	stw	r8,8(r6)
   11148:	dfc00217 	ldw	ra,8(sp)
   1114c:	dc400117 	ldw	r17,4(sp)
   11150:	dc000017 	ldw	r16,0(sp)
   11154:	dec00304 	addi	sp,sp,12
   11158:	00136041 	jmpi	13604 <__malloc_unlock>
   1115c:	dfc00217 	ldw	ra,8(sp)
   11160:	dc400117 	ldw	r17,4(sp)
   11164:	dc000017 	ldw	r16,0(sp)
   11168:	dec00304 	addi	sp,sp,12
   1116c:	f800283a 	ret
   11170:	31000217 	ldw	r4,8(r6)
   11174:	003fbd06 	br	1106c <_free_r+0x94>
   11178:	3806d0fa 	srli	r3,r7,3
   1117c:	00800044 	movi	r2,1
   11180:	51400117 	ldw	r5,4(r10)
   11184:	180890fa 	slli	r4,r3,3
   11188:	1807d0ba 	srai	r3,r3,2
   1118c:	22c9883a 	add	r4,r4,r11
   11190:	21800217 	ldw	r6,8(r4)
   11194:	10c4983a 	sll	r2,r2,r3
   11198:	41000315 	stw	r4,12(r8)
   1119c:	41800215 	stw	r6,8(r8)
   111a0:	288ab03a 	or	r5,r5,r2
   111a4:	22000215 	stw	r8,8(r4)
   111a8:	8809883a 	mov	r4,r17
   111ac:	51400115 	stw	r5,4(r10)
   111b0:	32000315 	stw	r8,12(r6)
   111b4:	dfc00217 	ldw	ra,8(sp)
   111b8:	dc400117 	ldw	r17,4(sp)
   111bc:	dc000017 	ldw	r16,0(sp)
   111c0:	dec00304 	addi	sp,sp,12
   111c4:	00136041 	jmpi	13604 <__malloc_unlock>
   111c8:	2880004c 	andi	r2,r5,1
   111cc:	3a4d883a 	add	r6,r7,r9
   111d0:	1000071e 	bne	r2,zero,111f0 <_free_r+0x218>
   111d4:	80bffe17 	ldw	r2,-8(r16)
   111d8:	4091c83a 	sub	r8,r8,r2
   111dc:	41000317 	ldw	r4,12(r8)
   111e0:	40c00217 	ldw	r3,8(r8)
   111e4:	308d883a 	add	r6,r6,r2
   111e8:	20c00215 	stw	r3,8(r4)
   111ec:	19000315 	stw	r4,12(r3)
   111f0:	00800074 	movhi	r2,1
   111f4:	109ce904 	addi	r2,r2,29604
   111f8:	11000017 	ldw	r4,0(r2)
   111fc:	30c00054 	ori	r3,r6,1
   11200:	52000215 	stw	r8,8(r10)
   11204:	40c00115 	stw	r3,4(r8)
   11208:	313fa036 	bltu	r6,r4,1108c <_free_r+0xb4>
   1120c:	008000b4 	movhi	r2,2
   11210:	10a38904 	addi	r2,r2,-29148
   11214:	11400017 	ldw	r5,0(r2)
   11218:	8809883a 	mov	r4,r17
   1121c:	0010eac0 	call	10eac <_malloc_trim_r>
   11220:	003f9a06 	br	1108c <_free_r+0xb4>
   11224:	00800104 	movi	r2,4
   11228:	10c0072e 	bgeu	r2,r3,11248 <_free_r+0x270>
   1122c:	00800504 	movi	r2,20
   11230:	10c01936 	bltu	r2,r3,11298 <_free_r+0x2c0>
   11234:	188016c4 	addi	r2,r3,91
   11238:	100690fa 	slli	r3,r2,3
   1123c:	003fb306 	br	1110c <_free_r+0x134>
   11240:	01400044 	movi	r5,1
   11244:	003f7e06 	br	11040 <_free_r+0x68>
   11248:	3804d1ba 	srli	r2,r7,6
   1124c:	10800e04 	addi	r2,r2,56
   11250:	100690fa 	slli	r3,r2,3
   11254:	003fad06 	br	1110c <_free_r+0x134>
   11258:	22000315 	stw	r8,12(r4)
   1125c:	22000215 	stw	r8,8(r4)
   11260:	3a05883a 	add	r2,r7,r8
   11264:	38c00054 	ori	r3,r7,1
   11268:	11c00015 	stw	r7,0(r2)
   1126c:	41000215 	stw	r4,8(r8)
   11270:	40c00115 	stw	r3,4(r8)
   11274:	41000315 	stw	r4,12(r8)
   11278:	003f8406 	br	1108c <_free_r+0xb4>
   1127c:	1005d0ba 	srai	r2,r2,2
   11280:	00c00044 	movi	r3,1
   11284:	51000117 	ldw	r4,4(r10)
   11288:	1886983a 	sll	r3,r3,r2
   1128c:	20c8b03a 	or	r4,r4,r3
   11290:	51000115 	stw	r4,4(r10)
   11294:	003fa706 	br	11134 <_free_r+0x15c>
   11298:	00801504 	movi	r2,84
   1129c:	10c00436 	bltu	r2,r3,112b0 <_free_r+0x2d8>
   112a0:	3804d33a 	srli	r2,r7,12
   112a4:	10801b84 	addi	r2,r2,110
   112a8:	100690fa 	slli	r3,r2,3
   112ac:	003f9706 	br	1110c <_free_r+0x134>
   112b0:	00805504 	movi	r2,340
   112b4:	10c00436 	bltu	r2,r3,112c8 <_free_r+0x2f0>
   112b8:	3804d3fa 	srli	r2,r7,15
   112bc:	10801dc4 	addi	r2,r2,119
   112c0:	100690fa 	slli	r3,r2,3
   112c4:	003f9106 	br	1110c <_free_r+0x134>
   112c8:	00815504 	movi	r2,1364
   112cc:	10c0032e 	bgeu	r2,r3,112dc <_free_r+0x304>
   112d0:	00801f84 	movi	r2,126
   112d4:	00c0fc04 	movi	r3,1008
   112d8:	003f8c06 	br	1110c <_free_r+0x134>
   112dc:	3804d4ba 	srli	r2,r7,18
   112e0:	10801f04 	addi	r2,r2,124
   112e4:	100690fa 	slli	r3,r2,3
   112e8:	003f8806 	br	1110c <_free_r+0x134>

000112ec <__sfvwrite_r>:
   112ec:	30800217 	ldw	r2,8(r6)
   112f0:	defff504 	addi	sp,sp,-44
   112f4:	df000915 	stw	fp,36(sp)
   112f8:	dd800715 	stw	r22,28(sp)
   112fc:	dc800315 	stw	r18,12(sp)
   11300:	dfc00a15 	stw	ra,40(sp)
   11304:	ddc00815 	stw	r23,32(sp)
   11308:	dd400615 	stw	r21,24(sp)
   1130c:	dd000515 	stw	r20,20(sp)
   11310:	dcc00415 	stw	r19,16(sp)
   11314:	dc400215 	stw	r17,8(sp)
   11318:	dc000115 	stw	r16,4(sp)
   1131c:	302d883a 	mov	r22,r6
   11320:	2039883a 	mov	fp,r4
   11324:	2825883a 	mov	r18,r5
   11328:	10001c26 	beq	r2,zero,1139c <__sfvwrite_r+0xb0>
   1132c:	29c0030b 	ldhu	r7,12(r5)
   11330:	3880020c 	andi	r2,r7,8
   11334:	10002726 	beq	r2,zero,113d4 <__sfvwrite_r+0xe8>
   11338:	28800417 	ldw	r2,16(r5)
   1133c:	10002526 	beq	r2,zero,113d4 <__sfvwrite_r+0xe8>
   11340:	3880008c 	andi	r2,r7,2
   11344:	b5400017 	ldw	r21,0(r22)
   11348:	10002826 	beq	r2,zero,113ec <__sfvwrite_r+0x100>
   1134c:	0021883a 	mov	r16,zero
   11350:	0023883a 	mov	r17,zero
   11354:	880d883a 	mov	r6,r17
   11358:	e009883a 	mov	r4,fp
   1135c:	00810004 	movi	r2,1024
   11360:	80006e26 	beq	r16,zero,1151c <__sfvwrite_r+0x230>
   11364:	800f883a 	mov	r7,r16
   11368:	91400717 	ldw	r5,28(r18)
   1136c:	1400012e 	bgeu	r2,r16,11374 <__sfvwrite_r+0x88>
   11370:	100f883a 	mov	r7,r2
   11374:	90c00917 	ldw	r3,36(r18)
   11378:	183ee83a 	callr	r3
   1137c:	1007883a 	mov	r3,r2
   11380:	80a1c83a 	sub	r16,r16,r2
   11384:	88a3883a 	add	r17,r17,r2
   11388:	00806d0e 	bge	zero,r2,11540 <__sfvwrite_r+0x254>
   1138c:	b0800217 	ldw	r2,8(r22)
   11390:	10c5c83a 	sub	r2,r2,r3
   11394:	b0800215 	stw	r2,8(r22)
   11398:	103fee1e 	bne	r2,zero,11354 <__sfvwrite_r+0x68>
   1139c:	0009883a 	mov	r4,zero
   113a0:	2005883a 	mov	r2,r4
   113a4:	dfc00a17 	ldw	ra,40(sp)
   113a8:	df000917 	ldw	fp,36(sp)
   113ac:	ddc00817 	ldw	r23,32(sp)
   113b0:	dd800717 	ldw	r22,28(sp)
   113b4:	dd400617 	ldw	r21,24(sp)
   113b8:	dd000517 	ldw	r20,20(sp)
   113bc:	dcc00417 	ldw	r19,16(sp)
   113c0:	dc800317 	ldw	r18,12(sp)
   113c4:	dc400217 	ldw	r17,8(sp)
   113c8:	dc000117 	ldw	r16,4(sp)
   113cc:	dec00b04 	addi	sp,sp,44
   113d0:	f800283a 	ret
   113d4:	0011fe00 	call	11fe0 <__swsetup_r>
   113d8:	1000e41e 	bne	r2,zero,1176c <__sfvwrite_r+0x480>
   113dc:	91c0030b 	ldhu	r7,12(r18)
   113e0:	b5400017 	ldw	r21,0(r22)
   113e4:	3880008c 	andi	r2,r7,2
   113e8:	103fd81e 	bne	r2,zero,1134c <__sfvwrite_r+0x60>
   113ec:	3880004c 	andi	r2,r7,1
   113f0:	1005003a 	cmpeq	r2,r2,zero
   113f4:	10005726 	beq	r2,zero,11554 <__sfvwrite_r+0x268>
   113f8:	0029883a 	mov	r20,zero
   113fc:	002f883a 	mov	r23,zero
   11400:	a0004226 	beq	r20,zero,1150c <__sfvwrite_r+0x220>
   11404:	3880800c 	andi	r2,r7,512
   11408:	94000217 	ldw	r16,8(r18)
   1140c:	10008b26 	beq	r2,zero,1163c <__sfvwrite_r+0x350>
   11410:	800d883a 	mov	r6,r16
   11414:	a400a536 	bltu	r20,r16,116ac <__sfvwrite_r+0x3c0>
   11418:	3881200c 	andi	r2,r7,1152
   1141c:	10002726 	beq	r2,zero,114bc <__sfvwrite_r+0x1d0>
   11420:	90800517 	ldw	r2,20(r18)
   11424:	92000417 	ldw	r8,16(r18)
   11428:	91400017 	ldw	r5,0(r18)
   1142c:	1087883a 	add	r3,r2,r2
   11430:	1887883a 	add	r3,r3,r2
   11434:	1808d7fa 	srli	r4,r3,31
   11438:	2a21c83a 	sub	r16,r5,r8
   1143c:	80800044 	addi	r2,r16,1
   11440:	20c9883a 	add	r4,r4,r3
   11444:	2027d07a 	srai	r19,r4,1
   11448:	a085883a 	add	r2,r20,r2
   1144c:	980d883a 	mov	r6,r19
   11450:	9880022e 	bgeu	r19,r2,1145c <__sfvwrite_r+0x170>
   11454:	1027883a 	mov	r19,r2
   11458:	100d883a 	mov	r6,r2
   1145c:	3881000c 	andi	r2,r7,1024
   11460:	1000b826 	beq	r2,zero,11744 <__sfvwrite_r+0x458>
   11464:	300b883a 	mov	r5,r6
   11468:	e009883a 	mov	r4,fp
   1146c:	00105d40 	call	105d4 <_malloc_r>
   11470:	10003126 	beq	r2,zero,11538 <__sfvwrite_r+0x24c>
   11474:	91400417 	ldw	r5,16(r18)
   11478:	1009883a 	mov	r4,r2
   1147c:	800d883a 	mov	r6,r16
   11480:	1023883a 	mov	r17,r2
   11484:	001186c0 	call	1186c <memcpy>
   11488:	90c0030b 	ldhu	r3,12(r18)
   1148c:	00beffc4 	movi	r2,-1025
   11490:	1886703a 	and	r3,r3,r2
   11494:	18c02014 	ori	r3,r3,128
   11498:	90c0030d 	sth	r3,12(r18)
   1149c:	9c07c83a 	sub	r3,r19,r16
   114a0:	8c05883a 	add	r2,r17,r16
   114a4:	a00d883a 	mov	r6,r20
   114a8:	a021883a 	mov	r16,r20
   114ac:	90800015 	stw	r2,0(r18)
   114b0:	90c00215 	stw	r3,8(r18)
   114b4:	94400415 	stw	r17,16(r18)
   114b8:	94c00515 	stw	r19,20(r18)
   114bc:	91000017 	ldw	r4,0(r18)
   114c0:	b80b883a 	mov	r5,r23
   114c4:	a023883a 	mov	r17,r20
   114c8:	001190c0 	call	1190c <memmove>
   114cc:	90c00217 	ldw	r3,8(r18)
   114d0:	90800017 	ldw	r2,0(r18)
   114d4:	a027883a 	mov	r19,r20
   114d8:	1c07c83a 	sub	r3,r3,r16
   114dc:	1405883a 	add	r2,r2,r16
   114e0:	90c00215 	stw	r3,8(r18)
   114e4:	a021883a 	mov	r16,r20
   114e8:	90800015 	stw	r2,0(r18)
   114ec:	b0800217 	ldw	r2,8(r22)
   114f0:	1405c83a 	sub	r2,r2,r16
   114f4:	b0800215 	stw	r2,8(r22)
   114f8:	103fa826 	beq	r2,zero,1139c <__sfvwrite_r+0xb0>
   114fc:	a469c83a 	sub	r20,r20,r17
   11500:	91c0030b 	ldhu	r7,12(r18)
   11504:	bcef883a 	add	r23,r23,r19
   11508:	a03fbe1e 	bne	r20,zero,11404 <__sfvwrite_r+0x118>
   1150c:	adc00017 	ldw	r23,0(r21)
   11510:	ad000117 	ldw	r20,4(r21)
   11514:	ad400204 	addi	r21,r21,8
   11518:	003fb906 	br	11400 <__sfvwrite_r+0x114>
   1151c:	ac400017 	ldw	r17,0(r21)
   11520:	ac000117 	ldw	r16,4(r21)
   11524:	ad400204 	addi	r21,r21,8
   11528:	003f8a06 	br	11354 <__sfvwrite_r+0x68>
   1152c:	91400417 	ldw	r5,16(r18)
   11530:	e009883a 	mov	r4,fp
   11534:	0010fd80 	call	10fd8 <_free_r>
   11538:	00800304 	movi	r2,12
   1153c:	e0800015 	stw	r2,0(fp)
   11540:	9080030b 	ldhu	r2,12(r18)
   11544:	013fffc4 	movi	r4,-1
   11548:	10801014 	ori	r2,r2,64
   1154c:	9080030d 	sth	r2,12(r18)
   11550:	003f9306 	br	113a0 <__sfvwrite_r+0xb4>
   11554:	0027883a 	mov	r19,zero
   11558:	002f883a 	mov	r23,zero
   1155c:	d8000015 	stw	zero,0(sp)
   11560:	0029883a 	mov	r20,zero
   11564:	98001e26 	beq	r19,zero,115e0 <__sfvwrite_r+0x2f4>
   11568:	d8c00017 	ldw	r3,0(sp)
   1156c:	1804c03a 	cmpne	r2,r3,zero
   11570:	10005e26 	beq	r2,zero,116ec <__sfvwrite_r+0x400>
   11574:	9821883a 	mov	r16,r19
   11578:	a4c0012e 	bgeu	r20,r19,11580 <__sfvwrite_r+0x294>
   1157c:	a021883a 	mov	r16,r20
   11580:	91000017 	ldw	r4,0(r18)
   11584:	90800417 	ldw	r2,16(r18)
   11588:	91800217 	ldw	r6,8(r18)
   1158c:	91c00517 	ldw	r7,20(r18)
   11590:	1100022e 	bgeu	r2,r4,1159c <__sfvwrite_r+0x2b0>
   11594:	31e3883a 	add	r17,r6,r7
   11598:	8c001616 	blt	r17,r16,115f4 <__sfvwrite_r+0x308>
   1159c:	81c03816 	blt	r16,r7,11680 <__sfvwrite_r+0x394>
   115a0:	90c00917 	ldw	r3,36(r18)
   115a4:	91400717 	ldw	r5,28(r18)
   115a8:	e009883a 	mov	r4,fp
   115ac:	b80d883a 	mov	r6,r23
   115b0:	183ee83a 	callr	r3
   115b4:	1023883a 	mov	r17,r2
   115b8:	00bfe10e 	bge	zero,r2,11540 <__sfvwrite_r+0x254>
   115bc:	a469c83a 	sub	r20,r20,r17
   115c0:	a0001826 	beq	r20,zero,11624 <__sfvwrite_r+0x338>
   115c4:	b0800217 	ldw	r2,8(r22)
   115c8:	1445c83a 	sub	r2,r2,r17
   115cc:	b0800215 	stw	r2,8(r22)
   115d0:	103f7226 	beq	r2,zero,1139c <__sfvwrite_r+0xb0>
   115d4:	9c67c83a 	sub	r19,r19,r17
   115d8:	bc6f883a 	add	r23,r23,r17
   115dc:	983fe21e 	bne	r19,zero,11568 <__sfvwrite_r+0x27c>
   115e0:	adc00017 	ldw	r23,0(r21)
   115e4:	acc00117 	ldw	r19,4(r21)
   115e8:	ad400204 	addi	r21,r21,8
   115ec:	d8000015 	stw	zero,0(sp)
   115f0:	003fdc06 	br	11564 <__sfvwrite_r+0x278>
   115f4:	b80b883a 	mov	r5,r23
   115f8:	880d883a 	mov	r6,r17
   115fc:	001190c0 	call	1190c <memmove>
   11600:	90c00017 	ldw	r3,0(r18)
   11604:	e009883a 	mov	r4,fp
   11608:	900b883a 	mov	r5,r18
   1160c:	1c47883a 	add	r3,r3,r17
   11610:	90c00015 	stw	r3,0(r18)
   11614:	001211c0 	call	1211c <_fflush_r>
   11618:	103fc91e 	bne	r2,zero,11540 <__sfvwrite_r+0x254>
   1161c:	a469c83a 	sub	r20,r20,r17
   11620:	a03fe81e 	bne	r20,zero,115c4 <__sfvwrite_r+0x2d8>
   11624:	e009883a 	mov	r4,fp
   11628:	900b883a 	mov	r5,r18
   1162c:	001211c0 	call	1211c <_fflush_r>
   11630:	103fc31e 	bne	r2,zero,11540 <__sfvwrite_r+0x254>
   11634:	d8000015 	stw	zero,0(sp)
   11638:	003fe206 	br	115c4 <__sfvwrite_r+0x2d8>
   1163c:	91000017 	ldw	r4,0(r18)
   11640:	90800417 	ldw	r2,16(r18)
   11644:	1100022e 	bgeu	r2,r4,11650 <__sfvwrite_r+0x364>
   11648:	8023883a 	mov	r17,r16
   1164c:	85003136 	bltu	r16,r20,11714 <__sfvwrite_r+0x428>
   11650:	91c00517 	ldw	r7,20(r18)
   11654:	a1c01836 	bltu	r20,r7,116b8 <__sfvwrite_r+0x3cc>
   11658:	90c00917 	ldw	r3,36(r18)
   1165c:	91400717 	ldw	r5,28(r18)
   11660:	e009883a 	mov	r4,fp
   11664:	b80d883a 	mov	r6,r23
   11668:	183ee83a 	callr	r3
   1166c:	1021883a 	mov	r16,r2
   11670:	00bfb30e 	bge	zero,r2,11540 <__sfvwrite_r+0x254>
   11674:	1023883a 	mov	r17,r2
   11678:	1027883a 	mov	r19,r2
   1167c:	003f9b06 	br	114ec <__sfvwrite_r+0x200>
   11680:	b80b883a 	mov	r5,r23
   11684:	800d883a 	mov	r6,r16
   11688:	001190c0 	call	1190c <memmove>
   1168c:	90c00217 	ldw	r3,8(r18)
   11690:	90800017 	ldw	r2,0(r18)
   11694:	8023883a 	mov	r17,r16
   11698:	1c07c83a 	sub	r3,r3,r16
   1169c:	1405883a 	add	r2,r2,r16
   116a0:	90c00215 	stw	r3,8(r18)
   116a4:	90800015 	stw	r2,0(r18)
   116a8:	003fc406 	br	115bc <__sfvwrite_r+0x2d0>
   116ac:	a00d883a 	mov	r6,r20
   116b0:	a021883a 	mov	r16,r20
   116b4:	003f8106 	br	114bc <__sfvwrite_r+0x1d0>
   116b8:	b80b883a 	mov	r5,r23
   116bc:	a00d883a 	mov	r6,r20
   116c0:	001190c0 	call	1190c <memmove>
   116c4:	90c00217 	ldw	r3,8(r18)
   116c8:	90800017 	ldw	r2,0(r18)
   116cc:	a021883a 	mov	r16,r20
   116d0:	1d07c83a 	sub	r3,r3,r20
   116d4:	1505883a 	add	r2,r2,r20
   116d8:	a023883a 	mov	r17,r20
   116dc:	a027883a 	mov	r19,r20
   116e0:	90c00215 	stw	r3,8(r18)
   116e4:	90800015 	stw	r2,0(r18)
   116e8:	003f8006 	br	114ec <__sfvwrite_r+0x200>
   116ec:	b809883a 	mov	r4,r23
   116f0:	01400284 	movi	r5,10
   116f4:	980d883a 	mov	r6,r19
   116f8:	00117880 	call	11788 <memchr>
   116fc:	10001726 	beq	r2,zero,1175c <__sfvwrite_r+0x470>
   11700:	15c5c83a 	sub	r2,r2,r23
   11704:	15000044 	addi	r20,r2,1
   11708:	00800044 	movi	r2,1
   1170c:	d8800015 	stw	r2,0(sp)
   11710:	003f9806 	br	11574 <__sfvwrite_r+0x288>
   11714:	b80b883a 	mov	r5,r23
   11718:	800d883a 	mov	r6,r16
   1171c:	001190c0 	call	1190c <memmove>
   11720:	90c00017 	ldw	r3,0(r18)
   11724:	e009883a 	mov	r4,fp
   11728:	900b883a 	mov	r5,r18
   1172c:	1c07883a 	add	r3,r3,r16
   11730:	90c00015 	stw	r3,0(r18)
   11734:	8027883a 	mov	r19,r16
   11738:	001211c0 	call	1211c <_fflush_r>
   1173c:	103f6b26 	beq	r2,zero,114ec <__sfvwrite_r+0x200>
   11740:	003f7f06 	br	11540 <__sfvwrite_r+0x254>
   11744:	400b883a 	mov	r5,r8
   11748:	e009883a 	mov	r4,fp
   1174c:	00119ec0 	call	119ec <_realloc_r>
   11750:	103f7626 	beq	r2,zero,1152c <__sfvwrite_r+0x240>
   11754:	1023883a 	mov	r17,r2
   11758:	003f5006 	br	1149c <__sfvwrite_r+0x1b0>
   1175c:	00c00044 	movi	r3,1
   11760:	9d000044 	addi	r20,r19,1
   11764:	d8c00015 	stw	r3,0(sp)
   11768:	003f8206 	br	11574 <__sfvwrite_r+0x288>
   1176c:	9080030b 	ldhu	r2,12(r18)
   11770:	00c00244 	movi	r3,9
   11774:	013fffc4 	movi	r4,-1
   11778:	10801014 	ori	r2,r2,64
   1177c:	9080030d 	sth	r2,12(r18)
   11780:	e0c00015 	stw	r3,0(fp)
   11784:	003f0606 	br	113a0 <__sfvwrite_r+0xb4>

00011788 <memchr>:
   11788:	008000c4 	movi	r2,3
   1178c:	29403fcc 	andi	r5,r5,255
   11790:	2007883a 	mov	r3,r4
   11794:	1180022e 	bgeu	r2,r6,117a0 <memchr+0x18>
   11798:	2084703a 	and	r2,r4,r2
   1179c:	10000b26 	beq	r2,zero,117cc <memchr+0x44>
   117a0:	313fffc4 	addi	r4,r6,-1
   117a4:	3000051e 	bne	r6,zero,117bc <memchr+0x34>
   117a8:	00002c06 	br	1185c <memchr+0xd4>
   117ac:	213fffc4 	addi	r4,r4,-1
   117b0:	00bfffc4 	movi	r2,-1
   117b4:	18c00044 	addi	r3,r3,1
   117b8:	20802826 	beq	r4,r2,1185c <memchr+0xd4>
   117bc:	18800003 	ldbu	r2,0(r3)
   117c0:	28bffa1e 	bne	r5,r2,117ac <memchr+0x24>
   117c4:	1805883a 	mov	r2,r3
   117c8:	f800283a 	ret
   117cc:	0011883a 	mov	r8,zero
   117d0:	0007883a 	mov	r3,zero
   117d4:	01c00104 	movi	r7,4
   117d8:	4004923a 	slli	r2,r8,8
   117dc:	18c00044 	addi	r3,r3,1
   117e0:	1151883a 	add	r8,r2,r5
   117e4:	19fffc1e 	bne	r3,r7,117d8 <memchr+0x50>
   117e8:	02bfbff4 	movhi	r10,65279
   117ec:	52bfbfc4 	addi	r10,r10,-257
   117f0:	02602074 	movhi	r9,32897
   117f4:	4a602004 	addi	r9,r9,-32640
   117f8:	02c000c4 	movi	r11,3
   117fc:	20800017 	ldw	r2,0(r4)
   11800:	31bfff04 	addi	r6,r6,-4
   11804:	200f883a 	mov	r7,r4
   11808:	1204f03a 	xor	r2,r2,r8
   1180c:	1287883a 	add	r3,r2,r10
   11810:	1a46703a 	and	r3,r3,r9
   11814:	0084303a 	nor	r2,zero,r2
   11818:	10c4703a 	and	r2,r2,r3
   1181c:	10000b26 	beq	r2,zero,1184c <memchr+0xc4>
   11820:	20800003 	ldbu	r2,0(r4)
   11824:	28800f26 	beq	r5,r2,11864 <memchr+0xdc>
   11828:	20800043 	ldbu	r2,1(r4)
   1182c:	21c00044 	addi	r7,r4,1
   11830:	28800c26 	beq	r5,r2,11864 <memchr+0xdc>
   11834:	20800083 	ldbu	r2,2(r4)
   11838:	21c00084 	addi	r7,r4,2
   1183c:	28800926 	beq	r5,r2,11864 <memchr+0xdc>
   11840:	208000c3 	ldbu	r2,3(r4)
   11844:	21c000c4 	addi	r7,r4,3
   11848:	28800626 	beq	r5,r2,11864 <memchr+0xdc>
   1184c:	21000104 	addi	r4,r4,4
   11850:	59bfea36 	bltu	r11,r6,117fc <memchr+0x74>
   11854:	2007883a 	mov	r3,r4
   11858:	003fd106 	br	117a0 <memchr+0x18>
   1185c:	0005883a 	mov	r2,zero
   11860:	f800283a 	ret
   11864:	3805883a 	mov	r2,r7
   11868:	f800283a 	ret

0001186c <memcpy>:
   1186c:	01c003c4 	movi	r7,15
   11870:	2007883a 	mov	r3,r4
   11874:	3980032e 	bgeu	r7,r6,11884 <memcpy+0x18>
   11878:	2904b03a 	or	r2,r5,r4
   1187c:	108000cc 	andi	r2,r2,3
   11880:	10000926 	beq	r2,zero,118a8 <memcpy+0x3c>
   11884:	30000626 	beq	r6,zero,118a0 <memcpy+0x34>
   11888:	30cd883a 	add	r6,r6,r3
   1188c:	28800003 	ldbu	r2,0(r5)
   11890:	29400044 	addi	r5,r5,1
   11894:	18800005 	stb	r2,0(r3)
   11898:	18c00044 	addi	r3,r3,1
   1189c:	30fffb1e 	bne	r6,r3,1188c <memcpy+0x20>
   118a0:	2005883a 	mov	r2,r4
   118a4:	f800283a 	ret
   118a8:	3811883a 	mov	r8,r7
   118ac:	200f883a 	mov	r7,r4
   118b0:	28c00017 	ldw	r3,0(r5)
   118b4:	31bffc04 	addi	r6,r6,-16
   118b8:	38c00015 	stw	r3,0(r7)
   118bc:	28800117 	ldw	r2,4(r5)
   118c0:	38800115 	stw	r2,4(r7)
   118c4:	28c00217 	ldw	r3,8(r5)
   118c8:	38c00215 	stw	r3,8(r7)
   118cc:	28800317 	ldw	r2,12(r5)
   118d0:	29400404 	addi	r5,r5,16
   118d4:	38800315 	stw	r2,12(r7)
   118d8:	39c00404 	addi	r7,r7,16
   118dc:	41bff436 	bltu	r8,r6,118b0 <memcpy+0x44>
   118e0:	008000c4 	movi	r2,3
   118e4:	1180072e 	bgeu	r2,r6,11904 <memcpy+0x98>
   118e8:	1007883a 	mov	r3,r2
   118ec:	28800017 	ldw	r2,0(r5)
   118f0:	31bfff04 	addi	r6,r6,-4
   118f4:	29400104 	addi	r5,r5,4
   118f8:	38800015 	stw	r2,0(r7)
   118fc:	39c00104 	addi	r7,r7,4
   11900:	19bffa36 	bltu	r3,r6,118ec <memcpy+0x80>
   11904:	3807883a 	mov	r3,r7
   11908:	003fde06 	br	11884 <memcpy+0x18>

0001190c <memmove>:
   1190c:	2807883a 	mov	r3,r5
   11910:	2011883a 	mov	r8,r4
   11914:	29000c2e 	bgeu	r5,r4,11948 <memmove+0x3c>
   11918:	298f883a 	add	r7,r5,r6
   1191c:	21c00a2e 	bgeu	r4,r7,11948 <memmove+0x3c>
   11920:	30000726 	beq	r6,zero,11940 <memmove+0x34>
   11924:	2187883a 	add	r3,r4,r6
   11928:	198dc83a 	sub	r6,r3,r6
   1192c:	39ffffc4 	addi	r7,r7,-1
   11930:	38800003 	ldbu	r2,0(r7)
   11934:	18ffffc4 	addi	r3,r3,-1
   11938:	18800005 	stb	r2,0(r3)
   1193c:	19bffb1e 	bne	r3,r6,1192c <memmove+0x20>
   11940:	2005883a 	mov	r2,r4
   11944:	f800283a 	ret
   11948:	01c003c4 	movi	r7,15
   1194c:	39800a36 	bltu	r7,r6,11978 <memmove+0x6c>
   11950:	303ffb26 	beq	r6,zero,11940 <memmove+0x34>
   11954:	400f883a 	mov	r7,r8
   11958:	320d883a 	add	r6,r6,r8
   1195c:	28800003 	ldbu	r2,0(r5)
   11960:	29400044 	addi	r5,r5,1
   11964:	38800005 	stb	r2,0(r7)
   11968:	39c00044 	addi	r7,r7,1
   1196c:	39bffb1e 	bne	r7,r6,1195c <memmove+0x50>
   11970:	2005883a 	mov	r2,r4
   11974:	f800283a 	ret
   11978:	1904b03a 	or	r2,r3,r4
   1197c:	108000cc 	andi	r2,r2,3
   11980:	103ff31e 	bne	r2,zero,11950 <memmove+0x44>
   11984:	3811883a 	mov	r8,r7
   11988:	180b883a 	mov	r5,r3
   1198c:	200f883a 	mov	r7,r4
   11990:	28c00017 	ldw	r3,0(r5)
   11994:	31bffc04 	addi	r6,r6,-16
   11998:	38c00015 	stw	r3,0(r7)
   1199c:	28800117 	ldw	r2,4(r5)
   119a0:	38800115 	stw	r2,4(r7)
   119a4:	28c00217 	ldw	r3,8(r5)
   119a8:	38c00215 	stw	r3,8(r7)
   119ac:	28800317 	ldw	r2,12(r5)
   119b0:	29400404 	addi	r5,r5,16
   119b4:	38800315 	stw	r2,12(r7)
   119b8:	39c00404 	addi	r7,r7,16
   119bc:	41bff436 	bltu	r8,r6,11990 <memmove+0x84>
   119c0:	008000c4 	movi	r2,3
   119c4:	1180072e 	bgeu	r2,r6,119e4 <memmove+0xd8>
   119c8:	1007883a 	mov	r3,r2
   119cc:	28800017 	ldw	r2,0(r5)
   119d0:	31bfff04 	addi	r6,r6,-4
   119d4:	29400104 	addi	r5,r5,4
   119d8:	38800015 	stw	r2,0(r7)
   119dc:	39c00104 	addi	r7,r7,4
   119e0:	19bffa36 	bltu	r3,r6,119cc <memmove+0xc0>
   119e4:	3811883a 	mov	r8,r7
   119e8:	003fd906 	br	11950 <memmove+0x44>

000119ec <_realloc_r>:
   119ec:	defff404 	addi	sp,sp,-48
   119f0:	dd800815 	stw	r22,32(sp)
   119f4:	dc800415 	stw	r18,16(sp)
   119f8:	dc400315 	stw	r17,12(sp)
   119fc:	dfc00b15 	stw	ra,44(sp)
   11a00:	df000a15 	stw	fp,40(sp)
   11a04:	ddc00915 	stw	r23,36(sp)
   11a08:	dd400715 	stw	r21,28(sp)
   11a0c:	dd000615 	stw	r20,24(sp)
   11a10:	dcc00515 	stw	r19,20(sp)
   11a14:	dc000215 	stw	r16,8(sp)
   11a18:	2825883a 	mov	r18,r5
   11a1c:	3023883a 	mov	r17,r6
   11a20:	202d883a 	mov	r22,r4
   11a24:	2800c926 	beq	r5,zero,11d4c <_realloc_r+0x360>
   11a28:	00135e40 	call	135e4 <__malloc_lock>
   11a2c:	943ffe04 	addi	r16,r18,-8
   11a30:	88c002c4 	addi	r3,r17,11
   11a34:	00800584 	movi	r2,22
   11a38:	82000117 	ldw	r8,4(r16)
   11a3c:	10c01b2e 	bgeu	r2,r3,11aac <_realloc_r+0xc0>
   11a40:	00bffe04 	movi	r2,-8
   11a44:	188e703a 	and	r7,r3,r2
   11a48:	3839883a 	mov	fp,r7
   11a4c:	38001a16 	blt	r7,zero,11ab8 <_realloc_r+0xcc>
   11a50:	e4401936 	bltu	fp,r17,11ab8 <_realloc_r+0xcc>
   11a54:	013fff04 	movi	r4,-4
   11a58:	4126703a 	and	r19,r8,r4
   11a5c:	99c02616 	blt	r19,r7,11af8 <_realloc_r+0x10c>
   11a60:	802b883a 	mov	r21,r16
   11a64:	9829883a 	mov	r20,r19
   11a68:	84000204 	addi	r16,r16,8
   11a6c:	a80f883a 	mov	r7,r21
   11a70:	a70dc83a 	sub	r6,r20,fp
   11a74:	008003c4 	movi	r2,15
   11a78:	1180c136 	bltu	r2,r6,11d80 <_realloc_r+0x394>
   11a7c:	38800117 	ldw	r2,4(r7)
   11a80:	a549883a 	add	r4,r20,r21
   11a84:	1080004c 	andi	r2,r2,1
   11a88:	a084b03a 	or	r2,r20,r2
   11a8c:	38800115 	stw	r2,4(r7)
   11a90:	20c00117 	ldw	r3,4(r4)
   11a94:	18c00054 	ori	r3,r3,1
   11a98:	20c00115 	stw	r3,4(r4)
   11a9c:	b009883a 	mov	r4,r22
   11aa0:	00136040 	call	13604 <__malloc_unlock>
   11aa4:	8023883a 	mov	r17,r16
   11aa8:	00000606 	br	11ac4 <_realloc_r+0xd8>
   11aac:	01c00404 	movi	r7,16
   11ab0:	3839883a 	mov	fp,r7
   11ab4:	e47fe72e 	bgeu	fp,r17,11a54 <_realloc_r+0x68>
   11ab8:	00800304 	movi	r2,12
   11abc:	0023883a 	mov	r17,zero
   11ac0:	b0800015 	stw	r2,0(r22)
   11ac4:	8805883a 	mov	r2,r17
   11ac8:	dfc00b17 	ldw	ra,44(sp)
   11acc:	df000a17 	ldw	fp,40(sp)
   11ad0:	ddc00917 	ldw	r23,36(sp)
   11ad4:	dd800817 	ldw	r22,32(sp)
   11ad8:	dd400717 	ldw	r21,28(sp)
   11adc:	dd000617 	ldw	r20,24(sp)
   11ae0:	dcc00517 	ldw	r19,20(sp)
   11ae4:	dc800417 	ldw	r18,16(sp)
   11ae8:	dc400317 	ldw	r17,12(sp)
   11aec:	dc000217 	ldw	r16,8(sp)
   11af0:	dec00c04 	addi	sp,sp,48
   11af4:	f800283a 	ret
   11af8:	00800074 	movhi	r2,1
   11afc:	10966504 	addi	r2,r2,22932
   11b00:	12400217 	ldw	r9,8(r2)
   11b04:	84cd883a 	add	r6,r16,r19
   11b08:	802b883a 	mov	r21,r16
   11b0c:	3240b926 	beq	r6,r9,11df4 <_realloc_r+0x408>
   11b10:	31400117 	ldw	r5,4(r6)
   11b14:	00bfff84 	movi	r2,-2
   11b18:	2884703a 	and	r2,r5,r2
   11b1c:	1185883a 	add	r2,r2,r6
   11b20:	10c00117 	ldw	r3,4(r2)
   11b24:	18c0004c 	andi	r3,r3,1
   11b28:	1807003a 	cmpeq	r3,r3,zero
   11b2c:	1800a326 	beq	r3,zero,11dbc <_realloc_r+0x3d0>
   11b30:	2908703a 	and	r4,r5,r4
   11b34:	9929883a 	add	r20,r19,r4
   11b38:	a1c0a30e 	bge	r20,r7,11dc8 <_realloc_r+0x3dc>
   11b3c:	4080004c 	andi	r2,r8,1
   11b40:	1000551e 	bne	r2,zero,11c98 <_realloc_r+0x2ac>
   11b44:	80800017 	ldw	r2,0(r16)
   11b48:	80afc83a 	sub	r23,r16,r2
   11b4c:	b8c00117 	ldw	r3,4(r23)
   11b50:	00bfff04 	movi	r2,-4
   11b54:	1884703a 	and	r2,r3,r2
   11b58:	30002e26 	beq	r6,zero,11c14 <_realloc_r+0x228>
   11b5c:	3240b926 	beq	r6,r9,11e44 <_realloc_r+0x458>
   11b60:	98a9883a 	add	r20,r19,r2
   11b64:	2509883a 	add	r4,r4,r20
   11b68:	d9000015 	stw	r4,0(sp)
   11b6c:	21c02a16 	blt	r4,r7,11c18 <_realloc_r+0x22c>
   11b70:	30800317 	ldw	r2,12(r6)
   11b74:	30c00217 	ldw	r3,8(r6)
   11b78:	01400904 	movi	r5,36
   11b7c:	99bfff04 	addi	r6,r19,-4
   11b80:	18800315 	stw	r2,12(r3)
   11b84:	10c00215 	stw	r3,8(r2)
   11b88:	b9000317 	ldw	r4,12(r23)
   11b8c:	b8800217 	ldw	r2,8(r23)
   11b90:	b82b883a 	mov	r21,r23
   11b94:	bc000204 	addi	r16,r23,8
   11b98:	20800215 	stw	r2,8(r4)
   11b9c:	11000315 	stw	r4,12(r2)
   11ba0:	2980e436 	bltu	r5,r6,11f34 <_realloc_r+0x548>
   11ba4:	008004c4 	movi	r2,19
   11ba8:	9009883a 	mov	r4,r18
   11bac:	8011883a 	mov	r8,r16
   11bb0:	11800f2e 	bgeu	r2,r6,11bf0 <_realloc_r+0x204>
   11bb4:	90800017 	ldw	r2,0(r18)
   11bb8:	ba000404 	addi	r8,r23,16
   11bbc:	91000204 	addi	r4,r18,8
   11bc0:	b8800215 	stw	r2,8(r23)
   11bc4:	90c00117 	ldw	r3,4(r18)
   11bc8:	008006c4 	movi	r2,27
   11bcc:	b8c00315 	stw	r3,12(r23)
   11bd0:	1180072e 	bgeu	r2,r6,11bf0 <_realloc_r+0x204>
   11bd4:	90c00217 	ldw	r3,8(r18)
   11bd8:	ba000604 	addi	r8,r23,24
   11bdc:	91000404 	addi	r4,r18,16
   11be0:	b8c00415 	stw	r3,16(r23)
   11be4:	90800317 	ldw	r2,12(r18)
   11be8:	b8800515 	stw	r2,20(r23)
   11bec:	3140e726 	beq	r6,r5,11f8c <_realloc_r+0x5a0>
   11bf0:	20800017 	ldw	r2,0(r4)
   11bf4:	dd000017 	ldw	r20,0(sp)
   11bf8:	b80f883a 	mov	r7,r23
   11bfc:	40800015 	stw	r2,0(r8)
   11c00:	20c00117 	ldw	r3,4(r4)
   11c04:	40c00115 	stw	r3,4(r8)
   11c08:	20800217 	ldw	r2,8(r4)
   11c0c:	40800215 	stw	r2,8(r8)
   11c10:	003f9706 	br	11a70 <_realloc_r+0x84>
   11c14:	98a9883a 	add	r20,r19,r2
   11c18:	a1c01f16 	blt	r20,r7,11c98 <_realloc_r+0x2ac>
   11c1c:	b8c00317 	ldw	r3,12(r23)
   11c20:	b8800217 	ldw	r2,8(r23)
   11c24:	99bfff04 	addi	r6,r19,-4
   11c28:	01400904 	movi	r5,36
   11c2c:	b82b883a 	mov	r21,r23
   11c30:	18800215 	stw	r2,8(r3)
   11c34:	10c00315 	stw	r3,12(r2)
   11c38:	bc000204 	addi	r16,r23,8
   11c3c:	2980c336 	bltu	r5,r6,11f4c <_realloc_r+0x560>
   11c40:	008004c4 	movi	r2,19
   11c44:	9009883a 	mov	r4,r18
   11c48:	8011883a 	mov	r8,r16
   11c4c:	11800f2e 	bgeu	r2,r6,11c8c <_realloc_r+0x2a0>
   11c50:	90800017 	ldw	r2,0(r18)
   11c54:	ba000404 	addi	r8,r23,16
   11c58:	91000204 	addi	r4,r18,8
   11c5c:	b8800215 	stw	r2,8(r23)
   11c60:	90c00117 	ldw	r3,4(r18)
   11c64:	008006c4 	movi	r2,27
   11c68:	b8c00315 	stw	r3,12(r23)
   11c6c:	1180072e 	bgeu	r2,r6,11c8c <_realloc_r+0x2a0>
   11c70:	90c00217 	ldw	r3,8(r18)
   11c74:	ba000604 	addi	r8,r23,24
   11c78:	91000404 	addi	r4,r18,16
   11c7c:	b8c00415 	stw	r3,16(r23)
   11c80:	90800317 	ldw	r2,12(r18)
   11c84:	b8800515 	stw	r2,20(r23)
   11c88:	3140c726 	beq	r6,r5,11fa8 <_realloc_r+0x5bc>
   11c8c:	20800017 	ldw	r2,0(r4)
   11c90:	b80f883a 	mov	r7,r23
   11c94:	003fd906 	br	11bfc <_realloc_r+0x210>
   11c98:	880b883a 	mov	r5,r17
   11c9c:	b009883a 	mov	r4,r22
   11ca0:	00105d40 	call	105d4 <_malloc_r>
   11ca4:	1023883a 	mov	r17,r2
   11ca8:	10002526 	beq	r2,zero,11d40 <_realloc_r+0x354>
   11cac:	80800117 	ldw	r2,4(r16)
   11cb0:	00ffff84 	movi	r3,-2
   11cb4:	893ffe04 	addi	r4,r17,-8
   11cb8:	10c4703a 	and	r2,r2,r3
   11cbc:	8085883a 	add	r2,r16,r2
   11cc0:	20809526 	beq	r4,r2,11f18 <_realloc_r+0x52c>
   11cc4:	99bfff04 	addi	r6,r19,-4
   11cc8:	01c00904 	movi	r7,36
   11ccc:	39804536 	bltu	r7,r6,11de4 <_realloc_r+0x3f8>
   11cd0:	008004c4 	movi	r2,19
   11cd4:	9009883a 	mov	r4,r18
   11cd8:	880b883a 	mov	r5,r17
   11cdc:	11800f2e 	bgeu	r2,r6,11d1c <_realloc_r+0x330>
   11ce0:	90800017 	ldw	r2,0(r18)
   11ce4:	89400204 	addi	r5,r17,8
   11ce8:	91000204 	addi	r4,r18,8
   11cec:	88800015 	stw	r2,0(r17)
   11cf0:	90c00117 	ldw	r3,4(r18)
   11cf4:	008006c4 	movi	r2,27
   11cf8:	88c00115 	stw	r3,4(r17)
   11cfc:	1180072e 	bgeu	r2,r6,11d1c <_realloc_r+0x330>
   11d00:	90c00217 	ldw	r3,8(r18)
   11d04:	89400404 	addi	r5,r17,16
   11d08:	91000404 	addi	r4,r18,16
   11d0c:	88c00215 	stw	r3,8(r17)
   11d10:	90800317 	ldw	r2,12(r18)
   11d14:	88800315 	stw	r2,12(r17)
   11d18:	31c09126 	beq	r6,r7,11f60 <_realloc_r+0x574>
   11d1c:	20800017 	ldw	r2,0(r4)
   11d20:	28800015 	stw	r2,0(r5)
   11d24:	20c00117 	ldw	r3,4(r4)
   11d28:	28c00115 	stw	r3,4(r5)
   11d2c:	20800217 	ldw	r2,8(r4)
   11d30:	28800215 	stw	r2,8(r5)
   11d34:	900b883a 	mov	r5,r18
   11d38:	b009883a 	mov	r4,r22
   11d3c:	0010fd80 	call	10fd8 <_free_r>
   11d40:	b009883a 	mov	r4,r22
   11d44:	00136040 	call	13604 <__malloc_unlock>
   11d48:	003f5e06 	br	11ac4 <_realloc_r+0xd8>
   11d4c:	300b883a 	mov	r5,r6
   11d50:	dfc00b17 	ldw	ra,44(sp)
   11d54:	df000a17 	ldw	fp,40(sp)
   11d58:	ddc00917 	ldw	r23,36(sp)
   11d5c:	dd800817 	ldw	r22,32(sp)
   11d60:	dd400717 	ldw	r21,28(sp)
   11d64:	dd000617 	ldw	r20,24(sp)
   11d68:	dcc00517 	ldw	r19,20(sp)
   11d6c:	dc800417 	ldw	r18,16(sp)
   11d70:	dc400317 	ldw	r17,12(sp)
   11d74:	dc000217 	ldw	r16,8(sp)
   11d78:	dec00c04 	addi	sp,sp,48
   11d7c:	00105d41 	jmpi	105d4 <_malloc_r>
   11d80:	38800117 	ldw	r2,4(r7)
   11d84:	e54b883a 	add	r5,fp,r21
   11d88:	31000054 	ori	r4,r6,1
   11d8c:	1080004c 	andi	r2,r2,1
   11d90:	1704b03a 	or	r2,r2,fp
   11d94:	38800115 	stw	r2,4(r7)
   11d98:	29000115 	stw	r4,4(r5)
   11d9c:	2987883a 	add	r3,r5,r6
   11da0:	18800117 	ldw	r2,4(r3)
   11da4:	29400204 	addi	r5,r5,8
   11da8:	b009883a 	mov	r4,r22
   11dac:	10800054 	ori	r2,r2,1
   11db0:	18800115 	stw	r2,4(r3)
   11db4:	0010fd80 	call	10fd8 <_free_r>
   11db8:	003f3806 	br	11a9c <_realloc_r+0xb0>
   11dbc:	000d883a 	mov	r6,zero
   11dc0:	0009883a 	mov	r4,zero
   11dc4:	003f5d06 	br	11b3c <_realloc_r+0x150>
   11dc8:	30c00217 	ldw	r3,8(r6)
   11dcc:	30800317 	ldw	r2,12(r6)
   11dd0:	800f883a 	mov	r7,r16
   11dd4:	84000204 	addi	r16,r16,8
   11dd8:	10c00215 	stw	r3,8(r2)
   11ddc:	18800315 	stw	r2,12(r3)
   11de0:	003f2306 	br	11a70 <_realloc_r+0x84>
   11de4:	8809883a 	mov	r4,r17
   11de8:	900b883a 	mov	r5,r18
   11dec:	001190c0 	call	1190c <memmove>
   11df0:	003fd006 	br	11d34 <_realloc_r+0x348>
   11df4:	30800117 	ldw	r2,4(r6)
   11df8:	e0c00404 	addi	r3,fp,16
   11dfc:	1108703a 	and	r4,r2,r4
   11e00:	9905883a 	add	r2,r19,r4
   11e04:	10ff4d16 	blt	r2,r3,11b3c <_realloc_r+0x150>
   11e08:	1705c83a 	sub	r2,r2,fp
   11e0c:	870b883a 	add	r5,r16,fp
   11e10:	10800054 	ori	r2,r2,1
   11e14:	28800115 	stw	r2,4(r5)
   11e18:	80c00117 	ldw	r3,4(r16)
   11e1c:	00800074 	movhi	r2,1
   11e20:	10966504 	addi	r2,r2,22932
   11e24:	b009883a 	mov	r4,r22
   11e28:	18c0004c 	andi	r3,r3,1
   11e2c:	e0c6b03a 	or	r3,fp,r3
   11e30:	11400215 	stw	r5,8(r2)
   11e34:	80c00115 	stw	r3,4(r16)
   11e38:	00136040 	call	13604 <__malloc_unlock>
   11e3c:	84400204 	addi	r17,r16,8
   11e40:	003f2006 	br	11ac4 <_realloc_r+0xd8>
   11e44:	98a9883a 	add	r20,r19,r2
   11e48:	2509883a 	add	r4,r4,r20
   11e4c:	e0800404 	addi	r2,fp,16
   11e50:	d9000115 	stw	r4,4(sp)
   11e54:	20bf7016 	blt	r4,r2,11c18 <_realloc_r+0x22c>
   11e58:	b8c00317 	ldw	r3,12(r23)
   11e5c:	b8800217 	ldw	r2,8(r23)
   11e60:	99bfff04 	addi	r6,r19,-4
   11e64:	01400904 	movi	r5,36
   11e68:	18800215 	stw	r2,8(r3)
   11e6c:	10c00315 	stw	r3,12(r2)
   11e70:	bc400204 	addi	r17,r23,8
   11e74:	29804136 	bltu	r5,r6,11f7c <_realloc_r+0x590>
   11e78:	008004c4 	movi	r2,19
   11e7c:	9009883a 	mov	r4,r18
   11e80:	880f883a 	mov	r7,r17
   11e84:	11800f2e 	bgeu	r2,r6,11ec4 <_realloc_r+0x4d8>
   11e88:	90800017 	ldw	r2,0(r18)
   11e8c:	b9c00404 	addi	r7,r23,16
   11e90:	91000204 	addi	r4,r18,8
   11e94:	b8800215 	stw	r2,8(r23)
   11e98:	90c00117 	ldw	r3,4(r18)
   11e9c:	008006c4 	movi	r2,27
   11ea0:	b8c00315 	stw	r3,12(r23)
   11ea4:	1180072e 	bgeu	r2,r6,11ec4 <_realloc_r+0x4d8>
   11ea8:	90c00217 	ldw	r3,8(r18)
   11eac:	b9c00604 	addi	r7,r23,24
   11eb0:	91000404 	addi	r4,r18,16
   11eb4:	b8c00415 	stw	r3,16(r23)
   11eb8:	90800317 	ldw	r2,12(r18)
   11ebc:	b8800515 	stw	r2,20(r23)
   11ec0:	31404026 	beq	r6,r5,11fc4 <_realloc_r+0x5d8>
   11ec4:	20800017 	ldw	r2,0(r4)
   11ec8:	38800015 	stw	r2,0(r7)
   11ecc:	20c00117 	ldw	r3,4(r4)
   11ed0:	38c00115 	stw	r3,4(r7)
   11ed4:	20800217 	ldw	r2,8(r4)
   11ed8:	38800215 	stw	r2,8(r7)
   11edc:	d8c00117 	ldw	r3,4(sp)
   11ee0:	bf0b883a 	add	r5,r23,fp
   11ee4:	b009883a 	mov	r4,r22
   11ee8:	1f05c83a 	sub	r2,r3,fp
   11eec:	10800054 	ori	r2,r2,1
   11ef0:	28800115 	stw	r2,4(r5)
   11ef4:	b8c00117 	ldw	r3,4(r23)
   11ef8:	00800074 	movhi	r2,1
   11efc:	10966504 	addi	r2,r2,22932
   11f00:	11400215 	stw	r5,8(r2)
   11f04:	18c0004c 	andi	r3,r3,1
   11f08:	e0c6b03a 	or	r3,fp,r3
   11f0c:	b8c00115 	stw	r3,4(r23)
   11f10:	00136040 	call	13604 <__malloc_unlock>
   11f14:	003eeb06 	br	11ac4 <_realloc_r+0xd8>
   11f18:	20800117 	ldw	r2,4(r4)
   11f1c:	00ffff04 	movi	r3,-4
   11f20:	800f883a 	mov	r7,r16
   11f24:	10c4703a 	and	r2,r2,r3
   11f28:	98a9883a 	add	r20,r19,r2
   11f2c:	84000204 	addi	r16,r16,8
   11f30:	003ecf06 	br	11a70 <_realloc_r+0x84>
   11f34:	900b883a 	mov	r5,r18
   11f38:	8009883a 	mov	r4,r16
   11f3c:	001190c0 	call	1190c <memmove>
   11f40:	dd000017 	ldw	r20,0(sp)
   11f44:	b80f883a 	mov	r7,r23
   11f48:	003ec906 	br	11a70 <_realloc_r+0x84>
   11f4c:	900b883a 	mov	r5,r18
   11f50:	8009883a 	mov	r4,r16
   11f54:	001190c0 	call	1190c <memmove>
   11f58:	b80f883a 	mov	r7,r23
   11f5c:	003ec406 	br	11a70 <_realloc_r+0x84>
   11f60:	90c00417 	ldw	r3,16(r18)
   11f64:	89400604 	addi	r5,r17,24
   11f68:	91000604 	addi	r4,r18,24
   11f6c:	88c00415 	stw	r3,16(r17)
   11f70:	90800517 	ldw	r2,20(r18)
   11f74:	88800515 	stw	r2,20(r17)
   11f78:	003f6806 	br	11d1c <_realloc_r+0x330>
   11f7c:	900b883a 	mov	r5,r18
   11f80:	8809883a 	mov	r4,r17
   11f84:	001190c0 	call	1190c <memmove>
   11f88:	003fd406 	br	11edc <_realloc_r+0x4f0>
   11f8c:	90c00417 	ldw	r3,16(r18)
   11f90:	91000604 	addi	r4,r18,24
   11f94:	ba000804 	addi	r8,r23,32
   11f98:	b8c00615 	stw	r3,24(r23)
   11f9c:	90800517 	ldw	r2,20(r18)
   11fa0:	b8800715 	stw	r2,28(r23)
   11fa4:	003f1206 	br	11bf0 <_realloc_r+0x204>
   11fa8:	90c00417 	ldw	r3,16(r18)
   11fac:	91000604 	addi	r4,r18,24
   11fb0:	ba000804 	addi	r8,r23,32
   11fb4:	b8c00615 	stw	r3,24(r23)
   11fb8:	90800517 	ldw	r2,20(r18)
   11fbc:	b8800715 	stw	r2,28(r23)
   11fc0:	003f3206 	br	11c8c <_realloc_r+0x2a0>
   11fc4:	90c00417 	ldw	r3,16(r18)
   11fc8:	91000604 	addi	r4,r18,24
   11fcc:	b9c00804 	addi	r7,r23,32
   11fd0:	b8c00615 	stw	r3,24(r23)
   11fd4:	90800517 	ldw	r2,20(r18)
   11fd8:	b8800715 	stw	r2,28(r23)
   11fdc:	003fb906 	br	11ec4 <_realloc_r+0x4d8>

00011fe0 <__swsetup_r>:
   11fe0:	00800074 	movhi	r2,1
   11fe4:	109ceb04 	addi	r2,r2,29612
   11fe8:	10c00017 	ldw	r3,0(r2)
   11fec:	defffd04 	addi	sp,sp,-12
   11ff0:	dc400115 	stw	r17,4(sp)
   11ff4:	dc000015 	stw	r16,0(sp)
   11ff8:	dfc00215 	stw	ra,8(sp)
   11ffc:	2023883a 	mov	r17,r4
   12000:	2821883a 	mov	r16,r5
   12004:	18000226 	beq	r3,zero,12010 <__swsetup_r+0x30>
   12008:	18800e17 	ldw	r2,56(r3)
   1200c:	10001f26 	beq	r2,zero,1208c <__swsetup_r+0xac>
   12010:	8100030b 	ldhu	r4,12(r16)
   12014:	2080020c 	andi	r2,r4,8
   12018:	10002826 	beq	r2,zero,120bc <__swsetup_r+0xdc>
   1201c:	81400417 	ldw	r5,16(r16)
   12020:	28001d26 	beq	r5,zero,12098 <__swsetup_r+0xb8>
   12024:	2080004c 	andi	r2,r4,1
   12028:	1005003a 	cmpeq	r2,r2,zero
   1202c:	10000b26 	beq	r2,zero,1205c <__swsetup_r+0x7c>
   12030:	2080008c 	andi	r2,r4,2
   12034:	10001226 	beq	r2,zero,12080 <__swsetup_r+0xa0>
   12038:	0005883a 	mov	r2,zero
   1203c:	80800215 	stw	r2,8(r16)
   12040:	28000b26 	beq	r5,zero,12070 <__swsetup_r+0x90>
   12044:	0005883a 	mov	r2,zero
   12048:	dfc00217 	ldw	ra,8(sp)
   1204c:	dc400117 	ldw	r17,4(sp)
   12050:	dc000017 	ldw	r16,0(sp)
   12054:	dec00304 	addi	sp,sp,12
   12058:	f800283a 	ret
   1205c:	80800517 	ldw	r2,20(r16)
   12060:	80000215 	stw	zero,8(r16)
   12064:	0085c83a 	sub	r2,zero,r2
   12068:	80800615 	stw	r2,24(r16)
   1206c:	283ff51e 	bne	r5,zero,12044 <__swsetup_r+0x64>
   12070:	2080200c 	andi	r2,r4,128
   12074:	103ff326 	beq	r2,zero,12044 <__swsetup_r+0x64>
   12078:	00bfffc4 	movi	r2,-1
   1207c:	003ff206 	br	12048 <__swsetup_r+0x68>
   12080:	80800517 	ldw	r2,20(r16)
   12084:	80800215 	stw	r2,8(r16)
   12088:	003fed06 	br	12040 <__swsetup_r+0x60>
   1208c:	1809883a 	mov	r4,r3
   12090:	00123b40 	call	123b4 <__sinit>
   12094:	003fde06 	br	12010 <__swsetup_r+0x30>
   12098:	20c0a00c 	andi	r3,r4,640
   1209c:	00808004 	movi	r2,512
   120a0:	18bfe026 	beq	r3,r2,12024 <__swsetup_r+0x44>
   120a4:	8809883a 	mov	r4,r17
   120a8:	800b883a 	mov	r5,r16
   120ac:	00127c00 	call	127c0 <__smakebuf_r>
   120b0:	8100030b 	ldhu	r4,12(r16)
   120b4:	81400417 	ldw	r5,16(r16)
   120b8:	003fda06 	br	12024 <__swsetup_r+0x44>
   120bc:	2080040c 	andi	r2,r4,16
   120c0:	103fed26 	beq	r2,zero,12078 <__swsetup_r+0x98>
   120c4:	2080010c 	andi	r2,r4,4
   120c8:	10001226 	beq	r2,zero,12114 <__swsetup_r+0x134>
   120cc:	81400c17 	ldw	r5,48(r16)
   120d0:	28000526 	beq	r5,zero,120e8 <__swsetup_r+0x108>
   120d4:	80801004 	addi	r2,r16,64
   120d8:	28800226 	beq	r5,r2,120e4 <__swsetup_r+0x104>
   120dc:	8809883a 	mov	r4,r17
   120e0:	0010fd80 	call	10fd8 <_free_r>
   120e4:	80000c15 	stw	zero,48(r16)
   120e8:	8080030b 	ldhu	r2,12(r16)
   120ec:	81400417 	ldw	r5,16(r16)
   120f0:	80000115 	stw	zero,4(r16)
   120f4:	10bff6cc 	andi	r2,r2,65499
   120f8:	8080030d 	sth	r2,12(r16)
   120fc:	81400015 	stw	r5,0(r16)
   12100:	8080030b 	ldhu	r2,12(r16)
   12104:	10800214 	ori	r2,r2,8
   12108:	113fffcc 	andi	r4,r2,65535
   1210c:	8080030d 	sth	r2,12(r16)
   12110:	003fc306 	br	12020 <__swsetup_r+0x40>
   12114:	81400417 	ldw	r5,16(r16)
   12118:	003ff906 	br	12100 <__swsetup_r+0x120>

0001211c <_fflush_r>:
   1211c:	defffb04 	addi	sp,sp,-20
   12120:	dcc00315 	stw	r19,12(sp)
   12124:	dc800215 	stw	r18,8(sp)
   12128:	dfc00415 	stw	ra,16(sp)
   1212c:	dc400115 	stw	r17,4(sp)
   12130:	dc000015 	stw	r16,0(sp)
   12134:	2027883a 	mov	r19,r4
   12138:	2825883a 	mov	r18,r5
   1213c:	20000226 	beq	r4,zero,12148 <_fflush_r+0x2c>
   12140:	20800e17 	ldw	r2,56(r4)
   12144:	10005626 	beq	r2,zero,122a0 <_fflush_r+0x184>
   12148:	9100030b 	ldhu	r4,12(r18)
   1214c:	20ffffcc 	andi	r3,r4,65535
   12150:	18e0001c 	xori	r3,r3,32768
   12154:	18e00004 	addi	r3,r3,-32768
   12158:	1880020c 	andi	r2,r3,8
   1215c:	1000261e 	bne	r2,zero,121f8 <_fflush_r+0xdc>
   12160:	90c00117 	ldw	r3,4(r18)
   12164:	20820014 	ori	r2,r4,2048
   12168:	9080030d 	sth	r2,12(r18)
   1216c:	1009883a 	mov	r4,r2
   12170:	00c0400e 	bge	zero,r3,12274 <_fflush_r+0x158>
   12174:	92000a17 	ldw	r8,40(r18)
   12178:	40004026 	beq	r8,zero,1227c <_fflush_r+0x160>
   1217c:	2084000c 	andi	r2,r4,4096
   12180:	10005326 	beq	r2,zero,122d0 <_fflush_r+0x1b4>
   12184:	94001417 	ldw	r16,80(r18)
   12188:	9080030b 	ldhu	r2,12(r18)
   1218c:	1080010c 	andi	r2,r2,4
   12190:	1000481e 	bne	r2,zero,122b4 <_fflush_r+0x198>
   12194:	91400717 	ldw	r5,28(r18)
   12198:	9809883a 	mov	r4,r19
   1219c:	800d883a 	mov	r6,r16
   121a0:	000f883a 	mov	r7,zero
   121a4:	403ee83a 	callr	r8
   121a8:	8080261e 	bne	r16,r2,12244 <_fflush_r+0x128>
   121ac:	9080030b 	ldhu	r2,12(r18)
   121b0:	91000417 	ldw	r4,16(r18)
   121b4:	90000115 	stw	zero,4(r18)
   121b8:	10bdffcc 	andi	r2,r2,63487
   121bc:	10ffffcc 	andi	r3,r2,65535
   121c0:	18c4000c 	andi	r3,r3,4096
   121c4:	9080030d 	sth	r2,12(r18)
   121c8:	91000015 	stw	r4,0(r18)
   121cc:	18002b26 	beq	r3,zero,1227c <_fflush_r+0x160>
   121d0:	0007883a 	mov	r3,zero
   121d4:	1805883a 	mov	r2,r3
   121d8:	94001415 	stw	r16,80(r18)
   121dc:	dfc00417 	ldw	ra,16(sp)
   121e0:	dcc00317 	ldw	r19,12(sp)
   121e4:	dc800217 	ldw	r18,8(sp)
   121e8:	dc400117 	ldw	r17,4(sp)
   121ec:	dc000017 	ldw	r16,0(sp)
   121f0:	dec00504 	addi	sp,sp,20
   121f4:	f800283a 	ret
   121f8:	94400417 	ldw	r17,16(r18)
   121fc:	88001f26 	beq	r17,zero,1227c <_fflush_r+0x160>
   12200:	90800017 	ldw	r2,0(r18)
   12204:	18c000cc 	andi	r3,r3,3
   12208:	94400015 	stw	r17,0(r18)
   1220c:	1461c83a 	sub	r16,r2,r17
   12210:	18002526 	beq	r3,zero,122a8 <_fflush_r+0x18c>
   12214:	0005883a 	mov	r2,zero
   12218:	90800215 	stw	r2,8(r18)
   1221c:	0400170e 	bge	zero,r16,1227c <_fflush_r+0x160>
   12220:	90c00917 	ldw	r3,36(r18)
   12224:	91400717 	ldw	r5,28(r18)
   12228:	880d883a 	mov	r6,r17
   1222c:	800f883a 	mov	r7,r16
   12230:	9809883a 	mov	r4,r19
   12234:	183ee83a 	callr	r3
   12238:	88a3883a 	add	r17,r17,r2
   1223c:	80a1c83a 	sub	r16,r16,r2
   12240:	00bff616 	blt	zero,r2,1221c <_fflush_r+0x100>
   12244:	9080030b 	ldhu	r2,12(r18)
   12248:	00ffffc4 	movi	r3,-1
   1224c:	10801014 	ori	r2,r2,64
   12250:	9080030d 	sth	r2,12(r18)
   12254:	1805883a 	mov	r2,r3
   12258:	dfc00417 	ldw	ra,16(sp)
   1225c:	dcc00317 	ldw	r19,12(sp)
   12260:	dc800217 	ldw	r18,8(sp)
   12264:	dc400117 	ldw	r17,4(sp)
   12268:	dc000017 	ldw	r16,0(sp)
   1226c:	dec00504 	addi	sp,sp,20
   12270:	f800283a 	ret
   12274:	90800f17 	ldw	r2,60(r18)
   12278:	00bfbe16 	blt	zero,r2,12174 <_fflush_r+0x58>
   1227c:	0007883a 	mov	r3,zero
   12280:	1805883a 	mov	r2,r3
   12284:	dfc00417 	ldw	ra,16(sp)
   12288:	dcc00317 	ldw	r19,12(sp)
   1228c:	dc800217 	ldw	r18,8(sp)
   12290:	dc400117 	ldw	r17,4(sp)
   12294:	dc000017 	ldw	r16,0(sp)
   12298:	dec00504 	addi	sp,sp,20
   1229c:	f800283a 	ret
   122a0:	00123b40 	call	123b4 <__sinit>
   122a4:	003fa806 	br	12148 <_fflush_r+0x2c>
   122a8:	90800517 	ldw	r2,20(r18)
   122ac:	90800215 	stw	r2,8(r18)
   122b0:	003fda06 	br	1221c <_fflush_r+0x100>
   122b4:	90800117 	ldw	r2,4(r18)
   122b8:	90c00c17 	ldw	r3,48(r18)
   122bc:	80a1c83a 	sub	r16,r16,r2
   122c0:	183fb426 	beq	r3,zero,12194 <_fflush_r+0x78>
   122c4:	90800f17 	ldw	r2,60(r18)
   122c8:	80a1c83a 	sub	r16,r16,r2
   122cc:	003fb106 	br	12194 <_fflush_r+0x78>
   122d0:	91400717 	ldw	r5,28(r18)
   122d4:	9809883a 	mov	r4,r19
   122d8:	000d883a 	mov	r6,zero
   122dc:	01c00044 	movi	r7,1
   122e0:	403ee83a 	callr	r8
   122e4:	1021883a 	mov	r16,r2
   122e8:	00bfffc4 	movi	r2,-1
   122ec:	80800226 	beq	r16,r2,122f8 <_fflush_r+0x1dc>
   122f0:	92000a17 	ldw	r8,40(r18)
   122f4:	003fa406 	br	12188 <_fflush_r+0x6c>
   122f8:	98c00017 	ldw	r3,0(r19)
   122fc:	00800744 	movi	r2,29
   12300:	18bfde26 	beq	r3,r2,1227c <_fflush_r+0x160>
   12304:	9080030b 	ldhu	r2,12(r18)
   12308:	8007883a 	mov	r3,r16
   1230c:	10801014 	ori	r2,r2,64
   12310:	9080030d 	sth	r2,12(r18)
   12314:	003fcf06 	br	12254 <_fflush_r+0x138>

00012318 <fflush>:
   12318:	01400074 	movhi	r5,1
   1231c:	29484704 	addi	r5,r5,8476
   12320:	2007883a 	mov	r3,r4
   12324:	20000526 	beq	r4,zero,1233c <fflush+0x24>
   12328:	00800074 	movhi	r2,1
   1232c:	109ceb04 	addi	r2,r2,29612
   12330:	11000017 	ldw	r4,0(r2)
   12334:	180b883a 	mov	r5,r3
   12338:	001211c1 	jmpi	1211c <_fflush_r>
   1233c:	00800074 	movhi	r2,1
   12340:	109cec04 	addi	r2,r2,29616
   12344:	11000017 	ldw	r4,0(r2)
   12348:	00126401 	jmpi	12640 <_fwalk_reent>

0001234c <std>:
   1234c:	00800074 	movhi	r2,1
   12350:	108a7b04 	addi	r2,r2,10732
   12354:	20800b15 	stw	r2,44(r4)
   12358:	00800074 	movhi	r2,1
   1235c:	108ab604 	addi	r2,r2,10968
   12360:	20800815 	stw	r2,32(r4)
   12364:	00c00074 	movhi	r3,1
   12368:	18ca9704 	addi	r3,r3,10844
   1236c:	00800074 	movhi	r2,1
   12370:	108a7d04 	addi	r2,r2,10740
   12374:	2140030d 	sth	r5,12(r4)
   12378:	2180038d 	sth	r6,14(r4)
   1237c:	20c00915 	stw	r3,36(r4)
   12380:	20800a15 	stw	r2,40(r4)
   12384:	20000015 	stw	zero,0(r4)
   12388:	20000115 	stw	zero,4(r4)
   1238c:	20000215 	stw	zero,8(r4)
   12390:	20000415 	stw	zero,16(r4)
   12394:	20000515 	stw	zero,20(r4)
   12398:	20000615 	stw	zero,24(r4)
   1239c:	21000715 	stw	r4,28(r4)
   123a0:	f800283a 	ret

000123a4 <__sfp_lock_acquire>:
   123a4:	f800283a 	ret

000123a8 <__sfp_lock_release>:
   123a8:	f800283a 	ret

000123ac <__sinit_lock_acquire>:
   123ac:	f800283a 	ret

000123b0 <__sinit_lock_release>:
   123b0:	f800283a 	ret

000123b4 <__sinit>:
   123b4:	20800e17 	ldw	r2,56(r4)
   123b8:	defffd04 	addi	sp,sp,-12
   123bc:	dc400115 	stw	r17,4(sp)
   123c0:	dc000015 	stw	r16,0(sp)
   123c4:	dfc00215 	stw	ra,8(sp)
   123c8:	04400044 	movi	r17,1
   123cc:	01400104 	movi	r5,4
   123d0:	000d883a 	mov	r6,zero
   123d4:	2021883a 	mov	r16,r4
   123d8:	2200bb04 	addi	r8,r4,748
   123dc:	200f883a 	mov	r7,r4
   123e0:	10000526 	beq	r2,zero,123f8 <__sinit+0x44>
   123e4:	dfc00217 	ldw	ra,8(sp)
   123e8:	dc400117 	ldw	r17,4(sp)
   123ec:	dc000017 	ldw	r16,0(sp)
   123f0:	dec00304 	addi	sp,sp,12
   123f4:	f800283a 	ret
   123f8:	21000117 	ldw	r4,4(r4)
   123fc:	00800074 	movhi	r2,1
   12400:	10892604 	addi	r2,r2,9368
   12404:	00c000c4 	movi	r3,3
   12408:	80800f15 	stw	r2,60(r16)
   1240c:	80c0b915 	stw	r3,740(r16)
   12410:	8200ba15 	stw	r8,744(r16)
   12414:	84400e15 	stw	r17,56(r16)
   12418:	8000b815 	stw	zero,736(r16)
   1241c:	001234c0 	call	1234c <std>
   12420:	81000217 	ldw	r4,8(r16)
   12424:	880d883a 	mov	r6,r17
   12428:	800f883a 	mov	r7,r16
   1242c:	01400284 	movi	r5,10
   12430:	001234c0 	call	1234c <std>
   12434:	81000317 	ldw	r4,12(r16)
   12438:	800f883a 	mov	r7,r16
   1243c:	01400484 	movi	r5,18
   12440:	01800084 	movi	r6,2
   12444:	dfc00217 	ldw	ra,8(sp)
   12448:	dc400117 	ldw	r17,4(sp)
   1244c:	dc000017 	ldw	r16,0(sp)
   12450:	dec00304 	addi	sp,sp,12
   12454:	001234c1 	jmpi	1234c <std>

00012458 <__fp_lock>:
   12458:	0005883a 	mov	r2,zero
   1245c:	f800283a 	ret

00012460 <__fp_unlock>:
   12460:	0005883a 	mov	r2,zero
   12464:	f800283a 	ret

00012468 <__fp_unlock_all>:
   12468:	00800074 	movhi	r2,1
   1246c:	109ceb04 	addi	r2,r2,29612
   12470:	11000017 	ldw	r4,0(r2)
   12474:	01400074 	movhi	r5,1
   12478:	29491804 	addi	r5,r5,9312
   1247c:	00127081 	jmpi	12708 <_fwalk>

00012480 <__fp_lock_all>:
   12480:	00800074 	movhi	r2,1
   12484:	109ceb04 	addi	r2,r2,29612
   12488:	11000017 	ldw	r4,0(r2)
   1248c:	01400074 	movhi	r5,1
   12490:	29491604 	addi	r5,r5,9304
   12494:	00127081 	jmpi	12708 <_fwalk>

00012498 <_cleanup_r>:
   12498:	01400074 	movhi	r5,1
   1249c:	294b4c04 	addi	r5,r5,11568
   124a0:	00127081 	jmpi	12708 <_fwalk>

000124a4 <_cleanup>:
   124a4:	00800074 	movhi	r2,1
   124a8:	109cec04 	addi	r2,r2,29616
   124ac:	11000017 	ldw	r4,0(r2)
   124b0:	00124981 	jmpi	12498 <_cleanup_r>

000124b4 <__sfmoreglue>:
   124b4:	defffc04 	addi	sp,sp,-16
   124b8:	dc000015 	stw	r16,0(sp)
   124bc:	2821883a 	mov	r16,r5
   124c0:	dc400115 	stw	r17,4(sp)
   124c4:	01401704 	movi	r5,92
   124c8:	2023883a 	mov	r17,r4
   124cc:	8009883a 	mov	r4,r16
   124d0:	dfc00315 	stw	ra,12(sp)
   124d4:	dcc00215 	stw	r19,8(sp)
   124d8:	0012f180 	call	12f18 <__mulsi3>
   124dc:	11400304 	addi	r5,r2,12
   124e0:	8809883a 	mov	r4,r17
   124e4:	1027883a 	mov	r19,r2
   124e8:	00105d40 	call	105d4 <_malloc_r>
   124ec:	10c00304 	addi	r3,r2,12
   124f0:	1023883a 	mov	r17,r2
   124f4:	1809883a 	mov	r4,r3
   124f8:	980d883a 	mov	r6,r19
   124fc:	000b883a 	mov	r5,zero
   12500:	10000b26 	beq	r2,zero,12530 <__sfmoreglue+0x7c>
   12504:	14000115 	stw	r16,4(r2)
   12508:	10c00215 	stw	r3,8(r2)
   1250c:	10000015 	stw	zero,0(r2)
   12510:	00129540 	call	12954 <memset>
   12514:	8805883a 	mov	r2,r17
   12518:	dfc00317 	ldw	ra,12(sp)
   1251c:	dcc00217 	ldw	r19,8(sp)
   12520:	dc400117 	ldw	r17,4(sp)
   12524:	dc000017 	ldw	r16,0(sp)
   12528:	dec00404 	addi	sp,sp,16
   1252c:	f800283a 	ret
   12530:	0023883a 	mov	r17,zero
   12534:	8805883a 	mov	r2,r17
   12538:	dfc00317 	ldw	ra,12(sp)
   1253c:	dcc00217 	ldw	r19,8(sp)
   12540:	dc400117 	ldw	r17,4(sp)
   12544:	dc000017 	ldw	r16,0(sp)
   12548:	dec00404 	addi	sp,sp,16
   1254c:	f800283a 	ret

00012550 <__sfp>:
   12550:	defffd04 	addi	sp,sp,-12
   12554:	00800074 	movhi	r2,1
   12558:	109cec04 	addi	r2,r2,29616
   1255c:	dc000015 	stw	r16,0(sp)
   12560:	14000017 	ldw	r16,0(r2)
   12564:	dc400115 	stw	r17,4(sp)
   12568:	dfc00215 	stw	ra,8(sp)
   1256c:	80800e17 	ldw	r2,56(r16)
   12570:	2023883a 	mov	r17,r4
   12574:	10002626 	beq	r2,zero,12610 <__sfp+0xc0>
   12578:	8400b804 	addi	r16,r16,736
   1257c:	80800117 	ldw	r2,4(r16)
   12580:	81000217 	ldw	r4,8(r16)
   12584:	10ffffc4 	addi	r3,r2,-1
   12588:	18000916 	blt	r3,zero,125b0 <__sfp+0x60>
   1258c:	2080030f 	ldh	r2,12(r4)
   12590:	10000b26 	beq	r2,zero,125c0 <__sfp+0x70>
   12594:	017fffc4 	movi	r5,-1
   12598:	00000206 	br	125a4 <__sfp+0x54>
   1259c:	2080030f 	ldh	r2,12(r4)
   125a0:	10000726 	beq	r2,zero,125c0 <__sfp+0x70>
   125a4:	18ffffc4 	addi	r3,r3,-1
   125a8:	21001704 	addi	r4,r4,92
   125ac:	197ffb1e 	bne	r3,r5,1259c <__sfp+0x4c>
   125b0:	80800017 	ldw	r2,0(r16)
   125b4:	10001926 	beq	r2,zero,1261c <__sfp+0xcc>
   125b8:	1021883a 	mov	r16,r2
   125bc:	003fef06 	br	1257c <__sfp+0x2c>
   125c0:	00bfffc4 	movi	r2,-1
   125c4:	00c00044 	movi	r3,1
   125c8:	2080038d 	sth	r2,14(r4)
   125cc:	20c0030d 	sth	r3,12(r4)
   125d0:	20000015 	stw	zero,0(r4)
   125d4:	20000215 	stw	zero,8(r4)
   125d8:	20000115 	stw	zero,4(r4)
   125dc:	20000415 	stw	zero,16(r4)
   125e0:	20000515 	stw	zero,20(r4)
   125e4:	20000615 	stw	zero,24(r4)
   125e8:	20000c15 	stw	zero,48(r4)
   125ec:	20000d15 	stw	zero,52(r4)
   125f0:	20001115 	stw	zero,68(r4)
   125f4:	20001215 	stw	zero,72(r4)
   125f8:	2005883a 	mov	r2,r4
   125fc:	dfc00217 	ldw	ra,8(sp)
   12600:	dc400117 	ldw	r17,4(sp)
   12604:	dc000017 	ldw	r16,0(sp)
   12608:	dec00304 	addi	sp,sp,12
   1260c:	f800283a 	ret
   12610:	8009883a 	mov	r4,r16
   12614:	00123b40 	call	123b4 <__sinit>
   12618:	003fd706 	br	12578 <__sfp+0x28>
   1261c:	8809883a 	mov	r4,r17
   12620:	01400104 	movi	r5,4
   12624:	00124b40 	call	124b4 <__sfmoreglue>
   12628:	80800015 	stw	r2,0(r16)
   1262c:	103fe21e 	bne	r2,zero,125b8 <__sfp+0x68>
   12630:	00800304 	movi	r2,12
   12634:	0009883a 	mov	r4,zero
   12638:	88800015 	stw	r2,0(r17)
   1263c:	003fee06 	br	125f8 <__sfp+0xa8>

00012640 <_fwalk_reent>:
   12640:	defff704 	addi	sp,sp,-36
   12644:	dcc00315 	stw	r19,12(sp)
   12648:	24c0b804 	addi	r19,r4,736
   1264c:	dd800615 	stw	r22,24(sp)
   12650:	dd400515 	stw	r21,20(sp)
   12654:	dfc00815 	stw	ra,32(sp)
   12658:	ddc00715 	stw	r23,28(sp)
   1265c:	dd000415 	stw	r20,16(sp)
   12660:	dc800215 	stw	r18,8(sp)
   12664:	dc400115 	stw	r17,4(sp)
   12668:	dc000015 	stw	r16,0(sp)
   1266c:	202b883a 	mov	r21,r4
   12670:	282d883a 	mov	r22,r5
   12674:	00123a40 	call	123a4 <__sfp_lock_acquire>
   12678:	98002126 	beq	r19,zero,12700 <_fwalk_reent+0xc0>
   1267c:	002f883a 	mov	r23,zero
   12680:	9c800117 	ldw	r18,4(r19)
   12684:	9c000217 	ldw	r16,8(r19)
   12688:	90bfffc4 	addi	r2,r18,-1
   1268c:	10000d16 	blt	r2,zero,126c4 <_fwalk_reent+0x84>
   12690:	0023883a 	mov	r17,zero
   12694:	053fffc4 	movi	r20,-1
   12698:	8080030f 	ldh	r2,12(r16)
   1269c:	8c400044 	addi	r17,r17,1
   126a0:	10000626 	beq	r2,zero,126bc <_fwalk_reent+0x7c>
   126a4:	8080038f 	ldh	r2,14(r16)
   126a8:	800b883a 	mov	r5,r16
   126ac:	a809883a 	mov	r4,r21
   126b0:	15000226 	beq	r2,r20,126bc <_fwalk_reent+0x7c>
   126b4:	b03ee83a 	callr	r22
   126b8:	b8aeb03a 	or	r23,r23,r2
   126bc:	84001704 	addi	r16,r16,92
   126c0:	947ff51e 	bne	r18,r17,12698 <_fwalk_reent+0x58>
   126c4:	9cc00017 	ldw	r19,0(r19)
   126c8:	983fed1e 	bne	r19,zero,12680 <_fwalk_reent+0x40>
   126cc:	00123a80 	call	123a8 <__sfp_lock_release>
   126d0:	b805883a 	mov	r2,r23
   126d4:	dfc00817 	ldw	ra,32(sp)
   126d8:	ddc00717 	ldw	r23,28(sp)
   126dc:	dd800617 	ldw	r22,24(sp)
   126e0:	dd400517 	ldw	r21,20(sp)
   126e4:	dd000417 	ldw	r20,16(sp)
   126e8:	dcc00317 	ldw	r19,12(sp)
   126ec:	dc800217 	ldw	r18,8(sp)
   126f0:	dc400117 	ldw	r17,4(sp)
   126f4:	dc000017 	ldw	r16,0(sp)
   126f8:	dec00904 	addi	sp,sp,36
   126fc:	f800283a 	ret
   12700:	002f883a 	mov	r23,zero
   12704:	003ff106 	br	126cc <_fwalk_reent+0x8c>

00012708 <_fwalk>:
   12708:	defff804 	addi	sp,sp,-32
   1270c:	dcc00315 	stw	r19,12(sp)
   12710:	24c0b804 	addi	r19,r4,736
   12714:	dd400515 	stw	r21,20(sp)
   12718:	dfc00715 	stw	ra,28(sp)
   1271c:	dd800615 	stw	r22,24(sp)
   12720:	dd000415 	stw	r20,16(sp)
   12724:	dc800215 	stw	r18,8(sp)
   12728:	dc400115 	stw	r17,4(sp)
   1272c:	dc000015 	stw	r16,0(sp)
   12730:	282b883a 	mov	r21,r5
   12734:	00123a40 	call	123a4 <__sfp_lock_acquire>
   12738:	98001f26 	beq	r19,zero,127b8 <_fwalk+0xb0>
   1273c:	002d883a 	mov	r22,zero
   12740:	9c800117 	ldw	r18,4(r19)
   12744:	9c000217 	ldw	r16,8(r19)
   12748:	90bfffc4 	addi	r2,r18,-1
   1274c:	10000c16 	blt	r2,zero,12780 <_fwalk+0x78>
   12750:	0023883a 	mov	r17,zero
   12754:	053fffc4 	movi	r20,-1
   12758:	8080030f 	ldh	r2,12(r16)
   1275c:	8c400044 	addi	r17,r17,1
   12760:	10000526 	beq	r2,zero,12778 <_fwalk+0x70>
   12764:	8080038f 	ldh	r2,14(r16)
   12768:	8009883a 	mov	r4,r16
   1276c:	15000226 	beq	r2,r20,12778 <_fwalk+0x70>
   12770:	a83ee83a 	callr	r21
   12774:	b0acb03a 	or	r22,r22,r2
   12778:	84001704 	addi	r16,r16,92
   1277c:	947ff61e 	bne	r18,r17,12758 <_fwalk+0x50>
   12780:	9cc00017 	ldw	r19,0(r19)
   12784:	983fee1e 	bne	r19,zero,12740 <_fwalk+0x38>
   12788:	00123a80 	call	123a8 <__sfp_lock_release>
   1278c:	b005883a 	mov	r2,r22
   12790:	dfc00717 	ldw	ra,28(sp)
   12794:	dd800617 	ldw	r22,24(sp)
   12798:	dd400517 	ldw	r21,20(sp)
   1279c:	dd000417 	ldw	r20,16(sp)
   127a0:	dcc00317 	ldw	r19,12(sp)
   127a4:	dc800217 	ldw	r18,8(sp)
   127a8:	dc400117 	ldw	r17,4(sp)
   127ac:	dc000017 	ldw	r16,0(sp)
   127b0:	dec00804 	addi	sp,sp,32
   127b4:	f800283a 	ret
   127b8:	002d883a 	mov	r22,zero
   127bc:	003ff206 	br	12788 <_fwalk+0x80>

000127c0 <__smakebuf_r>:
   127c0:	2880030b 	ldhu	r2,12(r5)
   127c4:	deffed04 	addi	sp,sp,-76
   127c8:	dc401015 	stw	r17,64(sp)
   127cc:	1080008c 	andi	r2,r2,2
   127d0:	dc000f15 	stw	r16,60(sp)
   127d4:	dfc01215 	stw	ra,72(sp)
   127d8:	dc801115 	stw	r18,68(sp)
   127dc:	2821883a 	mov	r16,r5
   127e0:	2023883a 	mov	r17,r4
   127e4:	10000b26 	beq	r2,zero,12814 <__smakebuf_r+0x54>
   127e8:	28c010c4 	addi	r3,r5,67
   127ec:	00800044 	movi	r2,1
   127f0:	28800515 	stw	r2,20(r5)
   127f4:	28c00415 	stw	r3,16(r5)
   127f8:	28c00015 	stw	r3,0(r5)
   127fc:	dfc01217 	ldw	ra,72(sp)
   12800:	dc801117 	ldw	r18,68(sp)
   12804:	dc401017 	ldw	r17,64(sp)
   12808:	dc000f17 	ldw	r16,60(sp)
   1280c:	dec01304 	addi	sp,sp,76
   12810:	f800283a 	ret
   12814:	2940038f 	ldh	r5,14(r5)
   12818:	28002116 	blt	r5,zero,128a0 <__smakebuf_r+0xe0>
   1281c:	d80d883a 	mov	r6,sp
   12820:	0012d440 	call	12d44 <_fstat_r>
   12824:	10001e16 	blt	r2,zero,128a0 <__smakebuf_r+0xe0>
   12828:	d8800117 	ldw	r2,4(sp)
   1282c:	00e00014 	movui	r3,32768
   12830:	113c000c 	andi	r4,r2,61440
   12834:	20c03126 	beq	r4,r3,128fc <__smakebuf_r+0x13c>
   12838:	8080030b 	ldhu	r2,12(r16)
   1283c:	00c80004 	movi	r3,8192
   12840:	10820014 	ori	r2,r2,2048
   12844:	8080030d 	sth	r2,12(r16)
   12848:	20c01e26 	beq	r4,r3,128c4 <__smakebuf_r+0x104>
   1284c:	04810004 	movi	r18,1024
   12850:	8809883a 	mov	r4,r17
   12854:	900b883a 	mov	r5,r18
   12858:	00105d40 	call	105d4 <_malloc_r>
   1285c:	1009883a 	mov	r4,r2
   12860:	10003126 	beq	r2,zero,12928 <__smakebuf_r+0x168>
   12864:	80c0030b 	ldhu	r3,12(r16)
   12868:	00800074 	movhi	r2,1
   1286c:	10892604 	addi	r2,r2,9368
   12870:	88800f15 	stw	r2,60(r17)
   12874:	18c02014 	ori	r3,r3,128
   12878:	84800515 	stw	r18,20(r16)
   1287c:	80c0030d 	sth	r3,12(r16)
   12880:	81000415 	stw	r4,16(r16)
   12884:	81000015 	stw	r4,0(r16)
   12888:	dfc01217 	ldw	ra,72(sp)
   1288c:	dc801117 	ldw	r18,68(sp)
   12890:	dc401017 	ldw	r17,64(sp)
   12894:	dc000f17 	ldw	r16,60(sp)
   12898:	dec01304 	addi	sp,sp,76
   1289c:	f800283a 	ret
   128a0:	80c0030b 	ldhu	r3,12(r16)
   128a4:	1880200c 	andi	r2,r3,128
   128a8:	10000426 	beq	r2,zero,128bc <__smakebuf_r+0xfc>
   128ac:	04801004 	movi	r18,64
   128b0:	18820014 	ori	r2,r3,2048
   128b4:	8080030d 	sth	r2,12(r16)
   128b8:	003fe506 	br	12850 <__smakebuf_r+0x90>
   128bc:	04810004 	movi	r18,1024
   128c0:	003ffb06 	br	128b0 <__smakebuf_r+0xf0>
   128c4:	8140038f 	ldh	r5,14(r16)
   128c8:	8809883a 	mov	r4,r17
   128cc:	0012db80 	call	12db8 <_isatty_r>
   128d0:	103fde26 	beq	r2,zero,1284c <__smakebuf_r+0x8c>
   128d4:	8080030b 	ldhu	r2,12(r16)
   128d8:	80c010c4 	addi	r3,r16,67
   128dc:	04810004 	movi	r18,1024
   128e0:	10800054 	ori	r2,r2,1
   128e4:	8080030d 	sth	r2,12(r16)
   128e8:	00800044 	movi	r2,1
   128ec:	80c00415 	stw	r3,16(r16)
   128f0:	80800515 	stw	r2,20(r16)
   128f4:	80c00015 	stw	r3,0(r16)
   128f8:	003fd506 	br	12850 <__smakebuf_r+0x90>
   128fc:	80c00a17 	ldw	r3,40(r16)
   12900:	00800074 	movhi	r2,1
   12904:	108a7d04 	addi	r2,r2,10740
   12908:	18bfcb1e 	bne	r3,r2,12838 <__smakebuf_r+0x78>
   1290c:	8080030b 	ldhu	r2,12(r16)
   12910:	00c10004 	movi	r3,1024
   12914:	1825883a 	mov	r18,r3
   12918:	10c4b03a 	or	r2,r2,r3
   1291c:	8080030d 	sth	r2,12(r16)
   12920:	80c01315 	stw	r3,76(r16)
   12924:	003fca06 	br	12850 <__smakebuf_r+0x90>
   12928:	8100030b 	ldhu	r4,12(r16)
   1292c:	2080800c 	andi	r2,r4,512
   12930:	103fb21e 	bne	r2,zero,127fc <__smakebuf_r+0x3c>
   12934:	80c010c4 	addi	r3,r16,67
   12938:	21000094 	ori	r4,r4,2
   1293c:	00800044 	movi	r2,1
   12940:	80800515 	stw	r2,20(r16)
   12944:	8100030d 	sth	r4,12(r16)
   12948:	80c00415 	stw	r3,16(r16)
   1294c:	80c00015 	stw	r3,0(r16)
   12950:	003faa06 	br	127fc <__smakebuf_r+0x3c>

00012954 <memset>:
   12954:	008000c4 	movi	r2,3
   12958:	29403fcc 	andi	r5,r5,255
   1295c:	2007883a 	mov	r3,r4
   12960:	1180022e 	bgeu	r2,r6,1296c <memset+0x18>
   12964:	2084703a 	and	r2,r4,r2
   12968:	10000826 	beq	r2,zero,1298c <memset+0x38>
   1296c:	30000526 	beq	r6,zero,12984 <memset+0x30>
   12970:	2805883a 	mov	r2,r5
   12974:	30cd883a 	add	r6,r6,r3
   12978:	18800005 	stb	r2,0(r3)
   1297c:	18c00044 	addi	r3,r3,1
   12980:	19bffd1e 	bne	r3,r6,12978 <memset+0x24>
   12984:	2005883a 	mov	r2,r4
   12988:	f800283a 	ret
   1298c:	2804923a 	slli	r2,r5,8
   12990:	020003c4 	movi	r8,15
   12994:	200f883a 	mov	r7,r4
   12998:	2884b03a 	or	r2,r5,r2
   1299c:	1006943a 	slli	r3,r2,16
   129a0:	10c6b03a 	or	r3,r2,r3
   129a4:	41800a2e 	bgeu	r8,r6,129d0 <memset+0x7c>
   129a8:	4005883a 	mov	r2,r8
   129ac:	31bffc04 	addi	r6,r6,-16
   129b0:	38c00015 	stw	r3,0(r7)
   129b4:	38c00115 	stw	r3,4(r7)
   129b8:	38c00215 	stw	r3,8(r7)
   129bc:	38c00315 	stw	r3,12(r7)
   129c0:	39c00404 	addi	r7,r7,16
   129c4:	11bff936 	bltu	r2,r6,129ac <memset+0x58>
   129c8:	008000c4 	movi	r2,3
   129cc:	1180052e 	bgeu	r2,r6,129e4 <memset+0x90>
   129d0:	31bfff04 	addi	r6,r6,-4
   129d4:	008000c4 	movi	r2,3
   129d8:	38c00015 	stw	r3,0(r7)
   129dc:	39c00104 	addi	r7,r7,4
   129e0:	11bffb36 	bltu	r2,r6,129d0 <memset+0x7c>
   129e4:	3807883a 	mov	r3,r7
   129e8:	003fe006 	br	1296c <memset+0x18>

000129ec <__sclose>:
   129ec:	2940038f 	ldh	r5,14(r5)
   129f0:	0012bb01 	jmpi	12bb0 <_close_r>

000129f4 <__sseek>:
   129f4:	defffe04 	addi	sp,sp,-8
   129f8:	dc000015 	stw	r16,0(sp)
   129fc:	2821883a 	mov	r16,r5
   12a00:	2940038f 	ldh	r5,14(r5)
   12a04:	dfc00115 	stw	ra,4(sp)
   12a08:	0012e280 	call	12e28 <_lseek_r>
   12a0c:	1007883a 	mov	r3,r2
   12a10:	00bfffc4 	movi	r2,-1
   12a14:	18800926 	beq	r3,r2,12a3c <__sseek+0x48>
   12a18:	8080030b 	ldhu	r2,12(r16)
   12a1c:	80c01415 	stw	r3,80(r16)
   12a20:	10840014 	ori	r2,r2,4096
   12a24:	8080030d 	sth	r2,12(r16)
   12a28:	1805883a 	mov	r2,r3
   12a2c:	dfc00117 	ldw	ra,4(sp)
   12a30:	dc000017 	ldw	r16,0(sp)
   12a34:	dec00204 	addi	sp,sp,8
   12a38:	f800283a 	ret
   12a3c:	8080030b 	ldhu	r2,12(r16)
   12a40:	10bbffcc 	andi	r2,r2,61439
   12a44:	8080030d 	sth	r2,12(r16)
   12a48:	1805883a 	mov	r2,r3
   12a4c:	dfc00117 	ldw	ra,4(sp)
   12a50:	dc000017 	ldw	r16,0(sp)
   12a54:	dec00204 	addi	sp,sp,8
   12a58:	f800283a 	ret

00012a5c <__swrite>:
   12a5c:	2880030b 	ldhu	r2,12(r5)
   12a60:	defffb04 	addi	sp,sp,-20
   12a64:	dcc00315 	stw	r19,12(sp)
   12a68:	1080400c 	andi	r2,r2,256
   12a6c:	dc800215 	stw	r18,8(sp)
   12a70:	dc400115 	stw	r17,4(sp)
   12a74:	dc000015 	stw	r16,0(sp)
   12a78:	3027883a 	mov	r19,r6
   12a7c:	3825883a 	mov	r18,r7
   12a80:	dfc00415 	stw	ra,16(sp)
   12a84:	2821883a 	mov	r16,r5
   12a88:	000d883a 	mov	r6,zero
   12a8c:	01c00084 	movi	r7,2
   12a90:	2023883a 	mov	r17,r4
   12a94:	10000226 	beq	r2,zero,12aa0 <__swrite+0x44>
   12a98:	2940038f 	ldh	r5,14(r5)
   12a9c:	0012e280 	call	12e28 <_lseek_r>
   12aa0:	8080030b 	ldhu	r2,12(r16)
   12aa4:	8140038f 	ldh	r5,14(r16)
   12aa8:	8809883a 	mov	r4,r17
   12aac:	10bbffcc 	andi	r2,r2,61439
   12ab0:	980d883a 	mov	r6,r19
   12ab4:	900f883a 	mov	r7,r18
   12ab8:	8080030d 	sth	r2,12(r16)
   12abc:	dfc00417 	ldw	ra,16(sp)
   12ac0:	dcc00317 	ldw	r19,12(sp)
   12ac4:	dc800217 	ldw	r18,8(sp)
   12ac8:	dc400117 	ldw	r17,4(sp)
   12acc:	dc000017 	ldw	r16,0(sp)
   12ad0:	dec00504 	addi	sp,sp,20
   12ad4:	0012b381 	jmpi	12b38 <_write_r>

00012ad8 <__sread>:
   12ad8:	defffe04 	addi	sp,sp,-8
   12adc:	dc000015 	stw	r16,0(sp)
   12ae0:	2821883a 	mov	r16,r5
   12ae4:	2940038f 	ldh	r5,14(r5)
   12ae8:	dfc00115 	stw	ra,4(sp)
   12aec:	0012ea00 	call	12ea0 <_read_r>
   12af0:	1007883a 	mov	r3,r2
   12af4:	10000816 	blt	r2,zero,12b18 <__sread+0x40>
   12af8:	80801417 	ldw	r2,80(r16)
   12afc:	10c5883a 	add	r2,r2,r3
   12b00:	80801415 	stw	r2,80(r16)
   12b04:	1805883a 	mov	r2,r3
   12b08:	dfc00117 	ldw	ra,4(sp)
   12b0c:	dc000017 	ldw	r16,0(sp)
   12b10:	dec00204 	addi	sp,sp,8
   12b14:	f800283a 	ret
   12b18:	8080030b 	ldhu	r2,12(r16)
   12b1c:	10bbffcc 	andi	r2,r2,61439
   12b20:	8080030d 	sth	r2,12(r16)
   12b24:	1805883a 	mov	r2,r3
   12b28:	dfc00117 	ldw	ra,4(sp)
   12b2c:	dc000017 	ldw	r16,0(sp)
   12b30:	dec00204 	addi	sp,sp,8
   12b34:	f800283a 	ret

00012b38 <_write_r>:
   12b38:	defffd04 	addi	sp,sp,-12
   12b3c:	dc000015 	stw	r16,0(sp)
   12b40:	040000b4 	movhi	r16,2
   12b44:	84238c04 	addi	r16,r16,-29136
   12b48:	dc400115 	stw	r17,4(sp)
   12b4c:	80000015 	stw	zero,0(r16)
   12b50:	2023883a 	mov	r17,r4
   12b54:	2809883a 	mov	r4,r5
   12b58:	300b883a 	mov	r5,r6
   12b5c:	380d883a 	mov	r6,r7
   12b60:	dfc00215 	stw	ra,8(sp)
   12b64:	00138dc0 	call	138dc <write>
   12b68:	1007883a 	mov	r3,r2
   12b6c:	00bfffc4 	movi	r2,-1
   12b70:	18800626 	beq	r3,r2,12b8c <_write_r+0x54>
   12b74:	1805883a 	mov	r2,r3
   12b78:	dfc00217 	ldw	ra,8(sp)
   12b7c:	dc400117 	ldw	r17,4(sp)
   12b80:	dc000017 	ldw	r16,0(sp)
   12b84:	dec00304 	addi	sp,sp,12
   12b88:	f800283a 	ret
   12b8c:	80800017 	ldw	r2,0(r16)
   12b90:	103ff826 	beq	r2,zero,12b74 <_write_r+0x3c>
   12b94:	88800015 	stw	r2,0(r17)
   12b98:	1805883a 	mov	r2,r3
   12b9c:	dfc00217 	ldw	ra,8(sp)
   12ba0:	dc400117 	ldw	r17,4(sp)
   12ba4:	dc000017 	ldw	r16,0(sp)
   12ba8:	dec00304 	addi	sp,sp,12
   12bac:	f800283a 	ret

00012bb0 <_close_r>:
   12bb0:	defffd04 	addi	sp,sp,-12
   12bb4:	dc000015 	stw	r16,0(sp)
   12bb8:	040000b4 	movhi	r16,2
   12bbc:	84238c04 	addi	r16,r16,-29136
   12bc0:	dc400115 	stw	r17,4(sp)
   12bc4:	80000015 	stw	zero,0(r16)
   12bc8:	2023883a 	mov	r17,r4
   12bcc:	2809883a 	mov	r4,r5
   12bd0:	dfc00215 	stw	ra,8(sp)
   12bd4:	0012f500 	call	12f50 <close>
   12bd8:	1007883a 	mov	r3,r2
   12bdc:	00bfffc4 	movi	r2,-1
   12be0:	18800626 	beq	r3,r2,12bfc <_close_r+0x4c>
   12be4:	1805883a 	mov	r2,r3
   12be8:	dfc00217 	ldw	ra,8(sp)
   12bec:	dc400117 	ldw	r17,4(sp)
   12bf0:	dc000017 	ldw	r16,0(sp)
   12bf4:	dec00304 	addi	sp,sp,12
   12bf8:	f800283a 	ret
   12bfc:	80800017 	ldw	r2,0(r16)
   12c00:	103ff826 	beq	r2,zero,12be4 <_close_r+0x34>
   12c04:	88800015 	stw	r2,0(r17)
   12c08:	1805883a 	mov	r2,r3
   12c0c:	dfc00217 	ldw	ra,8(sp)
   12c10:	dc400117 	ldw	r17,4(sp)
   12c14:	dc000017 	ldw	r16,0(sp)
   12c18:	dec00304 	addi	sp,sp,12
   12c1c:	f800283a 	ret

00012c20 <_fclose_r>:
   12c20:	defffc04 	addi	sp,sp,-16
   12c24:	dc400115 	stw	r17,4(sp)
   12c28:	dc000015 	stw	r16,0(sp)
   12c2c:	dfc00315 	stw	ra,12(sp)
   12c30:	dc800215 	stw	r18,8(sp)
   12c34:	2821883a 	mov	r16,r5
   12c38:	2023883a 	mov	r17,r4
   12c3c:	28002926 	beq	r5,zero,12ce4 <_fclose_r+0xc4>
   12c40:	00123a40 	call	123a4 <__sfp_lock_acquire>
   12c44:	88000226 	beq	r17,zero,12c50 <_fclose_r+0x30>
   12c48:	88800e17 	ldw	r2,56(r17)
   12c4c:	10002d26 	beq	r2,zero,12d04 <_fclose_r+0xe4>
   12c50:	8080030f 	ldh	r2,12(r16)
   12c54:	10002226 	beq	r2,zero,12ce0 <_fclose_r+0xc0>
   12c58:	8809883a 	mov	r4,r17
   12c5c:	800b883a 	mov	r5,r16
   12c60:	001211c0 	call	1211c <_fflush_r>
   12c64:	1025883a 	mov	r18,r2
   12c68:	80800b17 	ldw	r2,44(r16)
   12c6c:	10000426 	beq	r2,zero,12c80 <_fclose_r+0x60>
   12c70:	81400717 	ldw	r5,28(r16)
   12c74:	8809883a 	mov	r4,r17
   12c78:	103ee83a 	callr	r2
   12c7c:	10002a16 	blt	r2,zero,12d28 <_fclose_r+0x108>
   12c80:	8080030b 	ldhu	r2,12(r16)
   12c84:	1080200c 	andi	r2,r2,128
   12c88:	1000231e 	bne	r2,zero,12d18 <_fclose_r+0xf8>
   12c8c:	81400c17 	ldw	r5,48(r16)
   12c90:	28000526 	beq	r5,zero,12ca8 <_fclose_r+0x88>
   12c94:	80801004 	addi	r2,r16,64
   12c98:	28800226 	beq	r5,r2,12ca4 <_fclose_r+0x84>
   12c9c:	8809883a 	mov	r4,r17
   12ca0:	0010fd80 	call	10fd8 <_free_r>
   12ca4:	80000c15 	stw	zero,48(r16)
   12ca8:	81401117 	ldw	r5,68(r16)
   12cac:	28000326 	beq	r5,zero,12cbc <_fclose_r+0x9c>
   12cb0:	8809883a 	mov	r4,r17
   12cb4:	0010fd80 	call	10fd8 <_free_r>
   12cb8:	80001115 	stw	zero,68(r16)
   12cbc:	8000030d 	sth	zero,12(r16)
   12cc0:	00123a80 	call	123a8 <__sfp_lock_release>
   12cc4:	9005883a 	mov	r2,r18
   12cc8:	dfc00317 	ldw	ra,12(sp)
   12ccc:	dc800217 	ldw	r18,8(sp)
   12cd0:	dc400117 	ldw	r17,4(sp)
   12cd4:	dc000017 	ldw	r16,0(sp)
   12cd8:	dec00404 	addi	sp,sp,16
   12cdc:	f800283a 	ret
   12ce0:	00123a80 	call	123a8 <__sfp_lock_release>
   12ce4:	0025883a 	mov	r18,zero
   12ce8:	9005883a 	mov	r2,r18
   12cec:	dfc00317 	ldw	ra,12(sp)
   12cf0:	dc800217 	ldw	r18,8(sp)
   12cf4:	dc400117 	ldw	r17,4(sp)
   12cf8:	dc000017 	ldw	r16,0(sp)
   12cfc:	dec00404 	addi	sp,sp,16
   12d00:	f800283a 	ret
   12d04:	8809883a 	mov	r4,r17
   12d08:	00123b40 	call	123b4 <__sinit>
   12d0c:	8080030f 	ldh	r2,12(r16)
   12d10:	103fd11e 	bne	r2,zero,12c58 <_fclose_r+0x38>
   12d14:	003ff206 	br	12ce0 <_fclose_r+0xc0>
   12d18:	81400417 	ldw	r5,16(r16)
   12d1c:	8809883a 	mov	r4,r17
   12d20:	0010fd80 	call	10fd8 <_free_r>
   12d24:	003fd906 	br	12c8c <_fclose_r+0x6c>
   12d28:	04bfffc4 	movi	r18,-1
   12d2c:	003fd406 	br	12c80 <_fclose_r+0x60>

00012d30 <fclose>:
   12d30:	00800074 	movhi	r2,1
   12d34:	109ceb04 	addi	r2,r2,29612
   12d38:	200b883a 	mov	r5,r4
   12d3c:	11000017 	ldw	r4,0(r2)
   12d40:	0012c201 	jmpi	12c20 <_fclose_r>

00012d44 <_fstat_r>:
   12d44:	defffd04 	addi	sp,sp,-12
   12d48:	dc000015 	stw	r16,0(sp)
   12d4c:	040000b4 	movhi	r16,2
   12d50:	84238c04 	addi	r16,r16,-29136
   12d54:	dc400115 	stw	r17,4(sp)
   12d58:	80000015 	stw	zero,0(r16)
   12d5c:	2023883a 	mov	r17,r4
   12d60:	2809883a 	mov	r4,r5
   12d64:	300b883a 	mov	r5,r6
   12d68:	dfc00215 	stw	ra,8(sp)
   12d6c:	00130dc0 	call	130dc <fstat>
   12d70:	1007883a 	mov	r3,r2
   12d74:	00bfffc4 	movi	r2,-1
   12d78:	18800626 	beq	r3,r2,12d94 <_fstat_r+0x50>
   12d7c:	1805883a 	mov	r2,r3
   12d80:	dfc00217 	ldw	ra,8(sp)
   12d84:	dc400117 	ldw	r17,4(sp)
   12d88:	dc000017 	ldw	r16,0(sp)
   12d8c:	dec00304 	addi	sp,sp,12
   12d90:	f800283a 	ret
   12d94:	80800017 	ldw	r2,0(r16)
   12d98:	103ff826 	beq	r2,zero,12d7c <_fstat_r+0x38>
   12d9c:	88800015 	stw	r2,0(r17)
   12da0:	1805883a 	mov	r2,r3
   12da4:	dfc00217 	ldw	ra,8(sp)
   12da8:	dc400117 	ldw	r17,4(sp)
   12dac:	dc000017 	ldw	r16,0(sp)
   12db0:	dec00304 	addi	sp,sp,12
   12db4:	f800283a 	ret

00012db8 <_isatty_r>:
   12db8:	defffd04 	addi	sp,sp,-12
   12dbc:	dc000015 	stw	r16,0(sp)
   12dc0:	040000b4 	movhi	r16,2
   12dc4:	84238c04 	addi	r16,r16,-29136
   12dc8:	dc400115 	stw	r17,4(sp)
   12dcc:	80000015 	stw	zero,0(r16)
   12dd0:	2023883a 	mov	r17,r4
   12dd4:	2809883a 	mov	r4,r5
   12dd8:	dfc00215 	stw	ra,8(sp)
   12ddc:	00132140 	call	13214 <isatty>
   12de0:	1007883a 	mov	r3,r2
   12de4:	00bfffc4 	movi	r2,-1
   12de8:	18800626 	beq	r3,r2,12e04 <_isatty_r+0x4c>
   12dec:	1805883a 	mov	r2,r3
   12df0:	dfc00217 	ldw	ra,8(sp)
   12df4:	dc400117 	ldw	r17,4(sp)
   12df8:	dc000017 	ldw	r16,0(sp)
   12dfc:	dec00304 	addi	sp,sp,12
   12e00:	f800283a 	ret
   12e04:	80800017 	ldw	r2,0(r16)
   12e08:	103ff826 	beq	r2,zero,12dec <_isatty_r+0x34>
   12e0c:	88800015 	stw	r2,0(r17)
   12e10:	1805883a 	mov	r2,r3
   12e14:	dfc00217 	ldw	ra,8(sp)
   12e18:	dc400117 	ldw	r17,4(sp)
   12e1c:	dc000017 	ldw	r16,0(sp)
   12e20:	dec00304 	addi	sp,sp,12
   12e24:	f800283a 	ret

00012e28 <_lseek_r>:
   12e28:	defffd04 	addi	sp,sp,-12
   12e2c:	dc000015 	stw	r16,0(sp)
   12e30:	040000b4 	movhi	r16,2
   12e34:	84238c04 	addi	r16,r16,-29136
   12e38:	dc400115 	stw	r17,4(sp)
   12e3c:	80000015 	stw	zero,0(r16)
   12e40:	2023883a 	mov	r17,r4
   12e44:	2809883a 	mov	r4,r5
   12e48:	300b883a 	mov	r5,r6
   12e4c:	380d883a 	mov	r6,r7
   12e50:	dfc00215 	stw	ra,8(sp)
   12e54:	00134240 	call	13424 <lseek>
   12e58:	1007883a 	mov	r3,r2
   12e5c:	00bfffc4 	movi	r2,-1
   12e60:	18800626 	beq	r3,r2,12e7c <_lseek_r+0x54>
   12e64:	1805883a 	mov	r2,r3
   12e68:	dfc00217 	ldw	ra,8(sp)
   12e6c:	dc400117 	ldw	r17,4(sp)
   12e70:	dc000017 	ldw	r16,0(sp)
   12e74:	dec00304 	addi	sp,sp,12
   12e78:	f800283a 	ret
   12e7c:	80800017 	ldw	r2,0(r16)
   12e80:	103ff826 	beq	r2,zero,12e64 <_lseek_r+0x3c>
   12e84:	88800015 	stw	r2,0(r17)
   12e88:	1805883a 	mov	r2,r3
   12e8c:	dfc00217 	ldw	ra,8(sp)
   12e90:	dc400117 	ldw	r17,4(sp)
   12e94:	dc000017 	ldw	r16,0(sp)
   12e98:	dec00304 	addi	sp,sp,12
   12e9c:	f800283a 	ret

00012ea0 <_read_r>:
   12ea0:	defffd04 	addi	sp,sp,-12
   12ea4:	dc000015 	stw	r16,0(sp)
   12ea8:	040000b4 	movhi	r16,2
   12eac:	84238c04 	addi	r16,r16,-29136
   12eb0:	dc400115 	stw	r17,4(sp)
   12eb4:	80000015 	stw	zero,0(r16)
   12eb8:	2023883a 	mov	r17,r4
   12ebc:	2809883a 	mov	r4,r5
   12ec0:	300b883a 	mov	r5,r6
   12ec4:	380d883a 	mov	r6,r7
   12ec8:	dfc00215 	stw	ra,8(sp)
   12ecc:	00136240 	call	13624 <read>
   12ed0:	1007883a 	mov	r3,r2
   12ed4:	00bfffc4 	movi	r2,-1
   12ed8:	18800626 	beq	r3,r2,12ef4 <_read_r+0x54>
   12edc:	1805883a 	mov	r2,r3
   12ee0:	dfc00217 	ldw	ra,8(sp)
   12ee4:	dc400117 	ldw	r17,4(sp)
   12ee8:	dc000017 	ldw	r16,0(sp)
   12eec:	dec00304 	addi	sp,sp,12
   12ef0:	f800283a 	ret
   12ef4:	80800017 	ldw	r2,0(r16)
   12ef8:	103ff826 	beq	r2,zero,12edc <_read_r+0x3c>
   12efc:	88800015 	stw	r2,0(r17)
   12f00:	1805883a 	mov	r2,r3
   12f04:	dfc00217 	ldw	ra,8(sp)
   12f08:	dc400117 	ldw	r17,4(sp)
   12f0c:	dc000017 	ldw	r16,0(sp)
   12f10:	dec00304 	addi	sp,sp,12
   12f14:	f800283a 	ret

00012f18 <__mulsi3>:
   12f18:	20000a26 	beq	r4,zero,12f44 <__mulsi3+0x2c>
   12f1c:	0007883a 	mov	r3,zero
   12f20:	2080004c 	andi	r2,r4,1
   12f24:	1005003a 	cmpeq	r2,r2,zero
   12f28:	2008d07a 	srli	r4,r4,1
   12f2c:	1000011e 	bne	r2,zero,12f34 <__mulsi3+0x1c>
   12f30:	1947883a 	add	r3,r3,r5
   12f34:	294b883a 	add	r5,r5,r5
   12f38:	203ff91e 	bne	r4,zero,12f20 <__mulsi3+0x8>
   12f3c:	1805883a 	mov	r2,r3
   12f40:	f800283a 	ret
   12f44:	0007883a 	mov	r3,zero
   12f48:	1805883a 	mov	r2,r3
   12f4c:	f800283a 	ret

00012f50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12f50:	defff804 	addi	sp,sp,-32
   12f54:	dfc00715 	stw	ra,28(sp)
   12f58:	df000615 	stw	fp,24(sp)
   12f5c:	df000604 	addi	fp,sp,24
   12f60:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12f64:	e0bffc17 	ldw	r2,-16(fp)
   12f68:	1004803a 	cmplt	r2,r2,zero
   12f6c:	1000091e 	bne	r2,zero,12f94 <close+0x44>
   12f70:	e13ffc17 	ldw	r4,-16(fp)
   12f74:	01400304 	movi	r5,12
   12f78:	0012f180 	call	12f18 <__mulsi3>
   12f7c:	1007883a 	mov	r3,r2
   12f80:	00800074 	movhi	r2,1
   12f84:	10987104 	addi	r2,r2,25028
   12f88:	1887883a 	add	r3,r3,r2
   12f8c:	e0ffff15 	stw	r3,-4(fp)
   12f90:	00000106 	br	12f98 <close+0x48>
   12f94:	e03fff15 	stw	zero,-4(fp)
   12f98:	e0bfff17 	ldw	r2,-4(fp)
   12f9c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   12fa0:	e0bffb17 	ldw	r2,-20(fp)
   12fa4:	1005003a 	cmpeq	r2,r2,zero
   12fa8:	10001d1e 	bne	r2,zero,13020 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12fac:	e0bffb17 	ldw	r2,-20(fp)
   12fb0:	10800017 	ldw	r2,0(r2)
   12fb4:	10800417 	ldw	r2,16(r2)
   12fb8:	1005003a 	cmpeq	r2,r2,zero
   12fbc:	1000071e 	bne	r2,zero,12fdc <close+0x8c>
   12fc0:	e0bffb17 	ldw	r2,-20(fp)
   12fc4:	10800017 	ldw	r2,0(r2)
   12fc8:	10800417 	ldw	r2,16(r2)
   12fcc:	e13ffb17 	ldw	r4,-20(fp)
   12fd0:	103ee83a 	callr	r2
   12fd4:	e0bffe15 	stw	r2,-8(fp)
   12fd8:	00000106 	br	12fe0 <close+0x90>
   12fdc:	e03ffe15 	stw	zero,-8(fp)
   12fe0:	e0bffe17 	ldw	r2,-8(fp)
   12fe4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12fe8:	e13ffc17 	ldw	r4,-16(fp)
   12fec:	00137a80 	call	137a8 <alt_release_fd>
    if (rval < 0)
   12ff0:	e0bffa17 	ldw	r2,-24(fp)
   12ff4:	1004403a 	cmpge	r2,r2,zero
   12ff8:	1000071e 	bne	r2,zero,13018 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   12ffc:	00130500 	call	13050 <alt_get_errno>
   13000:	e0fffa17 	ldw	r3,-24(fp)
   13004:	00c7c83a 	sub	r3,zero,r3
   13008:	10c00015 	stw	r3,0(r2)
      return -1;
   1300c:	00bfffc4 	movi	r2,-1
   13010:	e0bffd15 	stw	r2,-12(fp)
   13014:	00000806 	br	13038 <close+0xe8>
    }
    return 0;
   13018:	e03ffd15 	stw	zero,-12(fp)
   1301c:	00000606 	br	13038 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13020:	00130500 	call	13050 <alt_get_errno>
   13024:	1007883a 	mov	r3,r2
   13028:	00801444 	movi	r2,81
   1302c:	18800015 	stw	r2,0(r3)
    return -1;
   13030:	00bfffc4 	movi	r2,-1
   13034:	e0bffd15 	stw	r2,-12(fp)
   13038:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   1303c:	e037883a 	mov	sp,fp
   13040:	dfc00117 	ldw	ra,4(sp)
   13044:	df000017 	ldw	fp,0(sp)
   13048:	dec00204 	addi	sp,sp,8
   1304c:	f800283a 	ret

00013050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13050:	defffd04 	addi	sp,sp,-12
   13054:	dfc00215 	stw	ra,8(sp)
   13058:	df000115 	stw	fp,4(sp)
   1305c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13060:	00800074 	movhi	r2,1
   13064:	109cf204 	addi	r2,r2,29640
   13068:	10800017 	ldw	r2,0(r2)
   1306c:	1005003a 	cmpeq	r2,r2,zero
   13070:	1000061e 	bne	r2,zero,1308c <alt_get_errno+0x3c>
   13074:	00800074 	movhi	r2,1
   13078:	109cf204 	addi	r2,r2,29640
   1307c:	10800017 	ldw	r2,0(r2)
   13080:	103ee83a 	callr	r2
   13084:	e0bfff15 	stw	r2,-4(fp)
   13088:	00000306 	br	13098 <alt_get_errno+0x48>
   1308c:	008000b4 	movhi	r2,2
   13090:	10a38c04 	addi	r2,r2,-29136
   13094:	e0bfff15 	stw	r2,-4(fp)
   13098:	e0bfff17 	ldw	r2,-4(fp)
}
   1309c:	e037883a 	mov	sp,fp
   130a0:	dfc00117 	ldw	ra,4(sp)
   130a4:	df000017 	ldw	fp,0(sp)
   130a8:	dec00204 	addi	sp,sp,8
   130ac:	f800283a 	ret

000130b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   130b0:	defffc04 	addi	sp,sp,-16
   130b4:	df000315 	stw	fp,12(sp)
   130b8:	df000304 	addi	fp,sp,12
   130bc:	e13ffd15 	stw	r4,-12(fp)
   130c0:	e17ffe15 	stw	r5,-8(fp)
   130c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   130c8:	e0bfff17 	ldw	r2,-4(fp)
}
   130cc:	e037883a 	mov	sp,fp
   130d0:	df000017 	ldw	fp,0(sp)
   130d4:	dec00104 	addi	sp,sp,4
   130d8:	f800283a 	ret

000130dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   130dc:	defff904 	addi	sp,sp,-28
   130e0:	dfc00615 	stw	ra,24(sp)
   130e4:	df000515 	stw	fp,20(sp)
   130e8:	df000504 	addi	fp,sp,20
   130ec:	e13ffc15 	stw	r4,-16(fp)
   130f0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   130f4:	e0bffc17 	ldw	r2,-16(fp)
   130f8:	1004803a 	cmplt	r2,r2,zero
   130fc:	1000091e 	bne	r2,zero,13124 <fstat+0x48>
   13100:	e13ffc17 	ldw	r4,-16(fp)
   13104:	01400304 	movi	r5,12
   13108:	0012f180 	call	12f18 <__mulsi3>
   1310c:	1007883a 	mov	r3,r2
   13110:	00800074 	movhi	r2,1
   13114:	10987104 	addi	r2,r2,25028
   13118:	1887883a 	add	r3,r3,r2
   1311c:	e0ffff15 	stw	r3,-4(fp)
   13120:	00000106 	br	13128 <fstat+0x4c>
   13124:	e03fff15 	stw	zero,-4(fp)
   13128:	e0bfff17 	ldw	r2,-4(fp)
   1312c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13130:	e0bffb17 	ldw	r2,-20(fp)
   13134:	1005003a 	cmpeq	r2,r2,zero
   13138:	1000121e 	bne	r2,zero,13184 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1313c:	e0bffb17 	ldw	r2,-20(fp)
   13140:	10800017 	ldw	r2,0(r2)
   13144:	10800817 	ldw	r2,32(r2)
   13148:	1005003a 	cmpeq	r2,r2,zero
   1314c:	1000081e 	bne	r2,zero,13170 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   13150:	e0bffb17 	ldw	r2,-20(fp)
   13154:	10800017 	ldw	r2,0(r2)
   13158:	10800817 	ldw	r2,32(r2)
   1315c:	e13ffb17 	ldw	r4,-20(fp)
   13160:	e17ffd17 	ldw	r5,-12(fp)
   13164:	103ee83a 	callr	r2
   13168:	e0bffe15 	stw	r2,-8(fp)
   1316c:	00000b06 	br	1319c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13170:	e0fffd17 	ldw	r3,-12(fp)
   13174:	00880004 	movi	r2,8192
   13178:	18800115 	stw	r2,4(r3)
      return 0;
   1317c:	e03ffe15 	stw	zero,-8(fp)
   13180:	00000606 	br	1319c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13184:	00131b40 	call	131b4 <alt_get_errno>
   13188:	1007883a 	mov	r3,r2
   1318c:	00801444 	movi	r2,81
   13190:	18800015 	stw	r2,0(r3)
    return -1;
   13194:	00bfffc4 	movi	r2,-1
   13198:	e0bffe15 	stw	r2,-8(fp)
   1319c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   131a0:	e037883a 	mov	sp,fp
   131a4:	dfc00117 	ldw	ra,4(sp)
   131a8:	df000017 	ldw	fp,0(sp)
   131ac:	dec00204 	addi	sp,sp,8
   131b0:	f800283a 	ret

000131b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131b4:	defffd04 	addi	sp,sp,-12
   131b8:	dfc00215 	stw	ra,8(sp)
   131bc:	df000115 	stw	fp,4(sp)
   131c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   131c4:	00800074 	movhi	r2,1
   131c8:	109cf204 	addi	r2,r2,29640
   131cc:	10800017 	ldw	r2,0(r2)
   131d0:	1005003a 	cmpeq	r2,r2,zero
   131d4:	1000061e 	bne	r2,zero,131f0 <alt_get_errno+0x3c>
   131d8:	00800074 	movhi	r2,1
   131dc:	109cf204 	addi	r2,r2,29640
   131e0:	10800017 	ldw	r2,0(r2)
   131e4:	103ee83a 	callr	r2
   131e8:	e0bfff15 	stw	r2,-4(fp)
   131ec:	00000306 	br	131fc <alt_get_errno+0x48>
   131f0:	008000b4 	movhi	r2,2
   131f4:	10a38c04 	addi	r2,r2,-29136
   131f8:	e0bfff15 	stw	r2,-4(fp)
   131fc:	e0bfff17 	ldw	r2,-4(fp)
}
   13200:	e037883a 	mov	sp,fp
   13204:	dfc00117 	ldw	ra,4(sp)
   13208:	df000017 	ldw	fp,0(sp)
   1320c:	dec00204 	addi	sp,sp,8
   13210:	f800283a 	ret

00013214 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13214:	deffeb04 	addi	sp,sp,-84
   13218:	dfc01415 	stw	ra,80(sp)
   1321c:	df001315 	stw	fp,76(sp)
   13220:	df001304 	addi	fp,sp,76
   13224:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13228:	e0bffd17 	ldw	r2,-12(fp)
   1322c:	1004803a 	cmplt	r2,r2,zero
   13230:	1000091e 	bne	r2,zero,13258 <isatty+0x44>
   13234:	e13ffd17 	ldw	r4,-12(fp)
   13238:	01400304 	movi	r5,12
   1323c:	0012f180 	call	12f18 <__mulsi3>
   13240:	1007883a 	mov	r3,r2
   13244:	00800074 	movhi	r2,1
   13248:	10987104 	addi	r2,r2,25028
   1324c:	1887883a 	add	r3,r3,r2
   13250:	e0ffff15 	stw	r3,-4(fp)
   13254:	00000106 	br	1325c <isatty+0x48>
   13258:	e03fff15 	stw	zero,-4(fp)
   1325c:	e0bfff17 	ldw	r2,-4(fp)
   13260:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   13264:	e0bfed17 	ldw	r2,-76(fp)
   13268:	1005003a 	cmpeq	r2,r2,zero
   1326c:	10000f1e 	bne	r2,zero,132ac <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13270:	e0bfed17 	ldw	r2,-76(fp)
   13274:	10800017 	ldw	r2,0(r2)
   13278:	10800817 	ldw	r2,32(r2)
   1327c:	1004c03a 	cmpne	r2,r2,zero
   13280:	1000031e 	bne	r2,zero,13290 <isatty+0x7c>
    {
      return 1;
   13284:	00800044 	movi	r2,1
   13288:	e0bffe15 	stw	r2,-8(fp)
   1328c:	00000c06 	br	132c0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13290:	e17fee04 	addi	r5,fp,-72
   13294:	e13ffd17 	ldw	r4,-12(fp)
   13298:	00130dc0 	call	130dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1329c:	e0bfef17 	ldw	r2,-68(fp)
   132a0:	10880020 	cmpeqi	r2,r2,8192
   132a4:	e0bffe15 	stw	r2,-8(fp)
   132a8:	00000506 	br	132c0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   132ac:	00132d80 	call	132d8 <alt_get_errno>
   132b0:	1007883a 	mov	r3,r2
   132b4:	00801444 	movi	r2,81
   132b8:	18800015 	stw	r2,0(r3)
    return 0;
   132bc:	e03ffe15 	stw	zero,-8(fp)
   132c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   132c4:	e037883a 	mov	sp,fp
   132c8:	dfc00117 	ldw	ra,4(sp)
   132cc:	df000017 	ldw	fp,0(sp)
   132d0:	dec00204 	addi	sp,sp,8
   132d4:	f800283a 	ret

000132d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132d8:	defffd04 	addi	sp,sp,-12
   132dc:	dfc00215 	stw	ra,8(sp)
   132e0:	df000115 	stw	fp,4(sp)
   132e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   132e8:	00800074 	movhi	r2,1
   132ec:	109cf204 	addi	r2,r2,29640
   132f0:	10800017 	ldw	r2,0(r2)
   132f4:	1005003a 	cmpeq	r2,r2,zero
   132f8:	1000061e 	bne	r2,zero,13314 <alt_get_errno+0x3c>
   132fc:	00800074 	movhi	r2,1
   13300:	109cf204 	addi	r2,r2,29640
   13304:	10800017 	ldw	r2,0(r2)
   13308:	103ee83a 	callr	r2
   1330c:	e0bfff15 	stw	r2,-4(fp)
   13310:	00000306 	br	13320 <alt_get_errno+0x48>
   13314:	008000b4 	movhi	r2,2
   13318:	10a38c04 	addi	r2,r2,-29136
   1331c:	e0bfff15 	stw	r2,-4(fp)
   13320:	e0bfff17 	ldw	r2,-4(fp)
}
   13324:	e037883a 	mov	sp,fp
   13328:	dfc00117 	ldw	ra,4(sp)
   1332c:	df000017 	ldw	fp,0(sp)
   13330:	dec00204 	addi	sp,sp,8
   13334:	f800283a 	ret

00013338 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13338:	defffe04 	addi	sp,sp,-8
   1333c:	dfc00115 	stw	ra,4(sp)
   13340:	df000015 	stw	fp,0(sp)
   13344:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13348:	01000074 	movhi	r4,1
   1334c:	211cf704 	addi	r4,r4,29660
   13350:	01400074 	movhi	r5,1
   13354:	29566504 	addi	r5,r5,22932
   13358:	01800074 	movhi	r6,1
   1335c:	319cf704 	addi	r6,r6,29660
   13360:	00133b80 	call	133b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13364:	01000074 	movhi	r4,1
   13368:	21000804 	addi	r4,r4,32
   1336c:	01400074 	movhi	r5,1
   13370:	29400804 	addi	r5,r5,32
   13374:	01800074 	movhi	r6,1
   13378:	31806d04 	addi	r6,r6,436
   1337c:	00133b80 	call	133b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13380:	01000074 	movhi	r4,1
   13384:	21161e04 	addi	r4,r4,22648
   13388:	01400074 	movhi	r5,1
   1338c:	29561e04 	addi	r5,r5,22648
   13390:	01800074 	movhi	r6,1
   13394:	31966504 	addi	r6,r6,22932
   13398:	00133b80 	call	133b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1339c:	00147100 	call	14710 <alt_dcache_flush_all>
  alt_icache_flush_all();
   133a0:	00149080 	call	14908 <alt_icache_flush_all>
}
   133a4:	e037883a 	mov	sp,fp
   133a8:	dfc00117 	ldw	ra,4(sp)
   133ac:	df000017 	ldw	fp,0(sp)
   133b0:	dec00204 	addi	sp,sp,8
   133b4:	f800283a 	ret

000133b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   133b8:	defffc04 	addi	sp,sp,-16
   133bc:	df000315 	stw	fp,12(sp)
   133c0:	df000304 	addi	fp,sp,12
   133c4:	e13ffd15 	stw	r4,-12(fp)
   133c8:	e17ffe15 	stw	r5,-8(fp)
   133cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   133d0:	e0fffe17 	ldw	r3,-8(fp)
   133d4:	e0bffd17 	ldw	r2,-12(fp)
   133d8:	18800e26 	beq	r3,r2,13414 <alt_load_section+0x5c>
  {
    while( to != end )
   133dc:	00000a06 	br	13408 <alt_load_section+0x50>
    {
      *to++ = *from++;
   133e0:	e0bffd17 	ldw	r2,-12(fp)
   133e4:	10c00017 	ldw	r3,0(r2)
   133e8:	e0bffe17 	ldw	r2,-8(fp)
   133ec:	10c00015 	stw	r3,0(r2)
   133f0:	e0bffe17 	ldw	r2,-8(fp)
   133f4:	10800104 	addi	r2,r2,4
   133f8:	e0bffe15 	stw	r2,-8(fp)
   133fc:	e0bffd17 	ldw	r2,-12(fp)
   13400:	10800104 	addi	r2,r2,4
   13404:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13408:	e0fffe17 	ldw	r3,-8(fp)
   1340c:	e0bfff17 	ldw	r2,-4(fp)
   13410:	18bff31e 	bne	r3,r2,133e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13414:	e037883a 	mov	sp,fp
   13418:	df000017 	ldw	fp,0(sp)
   1341c:	dec00104 	addi	sp,sp,4
   13420:	f800283a 	ret

00013424 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13424:	defff804 	addi	sp,sp,-32
   13428:	dfc00715 	stw	ra,28(sp)
   1342c:	df000615 	stw	fp,24(sp)
   13430:	df000604 	addi	fp,sp,24
   13434:	e13ffc15 	stw	r4,-16(fp)
   13438:	e17ffd15 	stw	r5,-12(fp)
   1343c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13440:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13444:	e0bffc17 	ldw	r2,-16(fp)
   13448:	1004803a 	cmplt	r2,r2,zero
   1344c:	1000091e 	bne	r2,zero,13474 <lseek+0x50>
   13450:	e13ffc17 	ldw	r4,-16(fp)
   13454:	01400304 	movi	r5,12
   13458:	0012f180 	call	12f18 <__mulsi3>
   1345c:	1007883a 	mov	r3,r2
   13460:	00800074 	movhi	r2,1
   13464:	10987104 	addi	r2,r2,25028
   13468:	1887883a 	add	r3,r3,r2
   1346c:	e0ffff15 	stw	r3,-4(fp)
   13470:	00000106 	br	13478 <lseek+0x54>
   13474:	e03fff15 	stw	zero,-4(fp)
   13478:	e0bfff17 	ldw	r2,-4(fp)
   1347c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   13480:	e0bffb17 	ldw	r2,-20(fp)
   13484:	1005003a 	cmpeq	r2,r2,zero
   13488:	1000111e 	bne	r2,zero,134d0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1348c:	e0bffb17 	ldw	r2,-20(fp)
   13490:	10800017 	ldw	r2,0(r2)
   13494:	10800717 	ldw	r2,28(r2)
   13498:	1005003a 	cmpeq	r2,r2,zero
   1349c:	1000091e 	bne	r2,zero,134c4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   134a0:	e0bffb17 	ldw	r2,-20(fp)
   134a4:	10800017 	ldw	r2,0(r2)
   134a8:	10800717 	ldw	r2,28(r2)
   134ac:	e13ffb17 	ldw	r4,-20(fp)
   134b0:	e17ffd17 	ldw	r5,-12(fp)
   134b4:	e1bffe17 	ldw	r6,-8(fp)
   134b8:	103ee83a 	callr	r2
   134bc:	e0bffa15 	stw	r2,-24(fp)
   134c0:	00000506 	br	134d8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   134c4:	00bfde84 	movi	r2,-134
   134c8:	e0bffa15 	stw	r2,-24(fp)
   134cc:	00000206 	br	134d8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   134d0:	00bfebc4 	movi	r2,-81
   134d4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   134d8:	e0bffa17 	ldw	r2,-24(fp)
   134dc:	1004403a 	cmpge	r2,r2,zero
   134e0:	1000071e 	bne	r2,zero,13500 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   134e4:	00135180 	call	13518 <alt_get_errno>
   134e8:	1007883a 	mov	r3,r2
   134ec:	e0bffa17 	ldw	r2,-24(fp)
   134f0:	0085c83a 	sub	r2,zero,r2
   134f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   134f8:	00bfffc4 	movi	r2,-1
   134fc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   13500:	e0bffa17 	ldw	r2,-24(fp)
}
   13504:	e037883a 	mov	sp,fp
   13508:	dfc00117 	ldw	ra,4(sp)
   1350c:	df000017 	ldw	fp,0(sp)
   13510:	dec00204 	addi	sp,sp,8
   13514:	f800283a 	ret

00013518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13518:	defffd04 	addi	sp,sp,-12
   1351c:	dfc00215 	stw	ra,8(sp)
   13520:	df000115 	stw	fp,4(sp)
   13524:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13528:	00800074 	movhi	r2,1
   1352c:	109cf204 	addi	r2,r2,29640
   13530:	10800017 	ldw	r2,0(r2)
   13534:	1005003a 	cmpeq	r2,r2,zero
   13538:	1000061e 	bne	r2,zero,13554 <alt_get_errno+0x3c>
   1353c:	00800074 	movhi	r2,1
   13540:	109cf204 	addi	r2,r2,29640
   13544:	10800017 	ldw	r2,0(r2)
   13548:	103ee83a 	callr	r2
   1354c:	e0bfff15 	stw	r2,-4(fp)
   13550:	00000306 	br	13560 <alt_get_errno+0x48>
   13554:	008000b4 	movhi	r2,2
   13558:	10a38c04 	addi	r2,r2,-29136
   1355c:	e0bfff15 	stw	r2,-4(fp)
   13560:	e0bfff17 	ldw	r2,-4(fp)
}
   13564:	e037883a 	mov	sp,fp
   13568:	dfc00117 	ldw	ra,4(sp)
   1356c:	df000017 	ldw	fp,0(sp)
   13570:	dec00204 	addi	sp,sp,8
   13574:	f800283a 	ret

00013578 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13578:	defffd04 	addi	sp,sp,-12
   1357c:	dfc00215 	stw	ra,8(sp)
   13580:	df000115 	stw	fp,4(sp)
   13584:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13588:	0009883a 	mov	r4,zero
   1358c:	0013a600 	call	13a60 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13590:	0013a940 	call	13a94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13594:	01000074 	movhi	r4,1
   13598:	21165b04 	addi	r4,r4,22892
   1359c:	01400074 	movhi	r5,1
   135a0:	29565b04 	addi	r5,r5,22892
   135a4:	01800074 	movhi	r6,1
   135a8:	31965b04 	addi	r6,r6,22892
   135ac:	0014cc80 	call	14cc8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   135b0:	00148400 	call	14840 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   135b4:	01000074 	movhi	r4,1
   135b8:	21122904 	addi	r4,r4,18596
   135bc:	001546c0 	call	1546c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   135c0:	d126a417 	ldw	r4,-25968(gp)
   135c4:	d166a517 	ldw	r5,-25964(gp)
   135c8:	d1a6a617 	ldw	r6,-25960(gp)
   135cc:	00104a80 	call	104a8 <main>
   135d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   135d4:	01000044 	movi	r4,1
   135d8:	0012f500 	call	12f50 <close>
  exit (result);
   135dc:	e13fff17 	ldw	r4,-4(fp)
   135e0:	00154800 	call	15480 <exit>

000135e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   135e4:	defffe04 	addi	sp,sp,-8
   135e8:	df000115 	stw	fp,4(sp)
   135ec:	df000104 	addi	fp,sp,4
   135f0:	e13fff15 	stw	r4,-4(fp)
}
   135f4:	e037883a 	mov	sp,fp
   135f8:	df000017 	ldw	fp,0(sp)
   135fc:	dec00104 	addi	sp,sp,4
   13600:	f800283a 	ret

00013604 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13604:	defffe04 	addi	sp,sp,-8
   13608:	df000115 	stw	fp,4(sp)
   1360c:	df000104 	addi	fp,sp,4
   13610:	e13fff15 	stw	r4,-4(fp)
}
   13614:	e037883a 	mov	sp,fp
   13618:	df000017 	ldw	fp,0(sp)
   1361c:	dec00104 	addi	sp,sp,4
   13620:	f800283a 	ret

00013624 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13624:	defff704 	addi	sp,sp,-36
   13628:	dfc00815 	stw	ra,32(sp)
   1362c:	df000715 	stw	fp,28(sp)
   13630:	df000704 	addi	fp,sp,28
   13634:	e13ffb15 	stw	r4,-20(fp)
   13638:	e17ffc15 	stw	r5,-16(fp)
   1363c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13640:	e0bffb17 	ldw	r2,-20(fp)
   13644:	1004803a 	cmplt	r2,r2,zero
   13648:	1000091e 	bne	r2,zero,13670 <read+0x4c>
   1364c:	e13ffb17 	ldw	r4,-20(fp)
   13650:	01400304 	movi	r5,12
   13654:	0012f180 	call	12f18 <__mulsi3>
   13658:	1007883a 	mov	r3,r2
   1365c:	00800074 	movhi	r2,1
   13660:	10987104 	addi	r2,r2,25028
   13664:	1887883a 	add	r3,r3,r2
   13668:	e0ffff15 	stw	r3,-4(fp)
   1366c:	00000106 	br	13674 <read+0x50>
   13670:	e03fff15 	stw	zero,-4(fp)
   13674:	e0bfff17 	ldw	r2,-4(fp)
   13678:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1367c:	e0bffa17 	ldw	r2,-24(fp)
   13680:	1005003a 	cmpeq	r2,r2,zero
   13684:	1000241e 	bne	r2,zero,13718 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13688:	e0bffa17 	ldw	r2,-24(fp)
   1368c:	10800217 	ldw	r2,8(r2)
   13690:	108000cc 	andi	r2,r2,3
   13694:	10800060 	cmpeqi	r2,r2,1
   13698:	10001a1e 	bne	r2,zero,13704 <read+0xe0>
   1369c:	e0bffa17 	ldw	r2,-24(fp)
   136a0:	10800017 	ldw	r2,0(r2)
   136a4:	10800517 	ldw	r2,20(r2)
   136a8:	1005003a 	cmpeq	r2,r2,zero
   136ac:	1000151e 	bne	r2,zero,13704 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   136b0:	e0bffa17 	ldw	r2,-24(fp)
   136b4:	10800017 	ldw	r2,0(r2)
   136b8:	10800517 	ldw	r2,20(r2)
   136bc:	e17ffc17 	ldw	r5,-16(fp)
   136c0:	e1bffd17 	ldw	r6,-12(fp)
   136c4:	e13ffa17 	ldw	r4,-24(fp)
   136c8:	103ee83a 	callr	r2
   136cc:	e0bff915 	stw	r2,-28(fp)
   136d0:	e0bff917 	ldw	r2,-28(fp)
   136d4:	1004403a 	cmpge	r2,r2,zero
   136d8:	1000071e 	bne	r2,zero,136f8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   136dc:	00137480 	call	13748 <alt_get_errno>
   136e0:	e0fff917 	ldw	r3,-28(fp)
   136e4:	00c7c83a 	sub	r3,zero,r3
   136e8:	10c00015 	stw	r3,0(r2)
          return -1;
   136ec:	00bfffc4 	movi	r2,-1
   136f0:	e0bffe15 	stw	r2,-8(fp)
   136f4:	00000e06 	br	13730 <read+0x10c>
        }
        return rval;
   136f8:	e0bff917 	ldw	r2,-28(fp)
   136fc:	e0bffe15 	stw	r2,-8(fp)
   13700:	00000b06 	br	13730 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13704:	00137480 	call	13748 <alt_get_errno>
   13708:	1007883a 	mov	r3,r2
   1370c:	00800344 	movi	r2,13
   13710:	18800015 	stw	r2,0(r3)
   13714:	00000406 	br	13728 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13718:	00137480 	call	13748 <alt_get_errno>
   1371c:	1007883a 	mov	r3,r2
   13720:	00801444 	movi	r2,81
   13724:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13728:	00bfffc4 	movi	r2,-1
   1372c:	e0bffe15 	stw	r2,-8(fp)
   13730:	e0bffe17 	ldw	r2,-8(fp)
}
   13734:	e037883a 	mov	sp,fp
   13738:	dfc00117 	ldw	ra,4(sp)
   1373c:	df000017 	ldw	fp,0(sp)
   13740:	dec00204 	addi	sp,sp,8
   13744:	f800283a 	ret

00013748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13748:	defffd04 	addi	sp,sp,-12
   1374c:	dfc00215 	stw	ra,8(sp)
   13750:	df000115 	stw	fp,4(sp)
   13754:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13758:	00800074 	movhi	r2,1
   1375c:	109cf204 	addi	r2,r2,29640
   13760:	10800017 	ldw	r2,0(r2)
   13764:	1005003a 	cmpeq	r2,r2,zero
   13768:	1000061e 	bne	r2,zero,13784 <alt_get_errno+0x3c>
   1376c:	00800074 	movhi	r2,1
   13770:	109cf204 	addi	r2,r2,29640
   13774:	10800017 	ldw	r2,0(r2)
   13778:	103ee83a 	callr	r2
   1377c:	e0bfff15 	stw	r2,-4(fp)
   13780:	00000306 	br	13790 <alt_get_errno+0x48>
   13784:	008000b4 	movhi	r2,2
   13788:	10a38c04 	addi	r2,r2,-29136
   1378c:	e0bfff15 	stw	r2,-4(fp)
   13790:	e0bfff17 	ldw	r2,-4(fp)
}
   13794:	e037883a 	mov	sp,fp
   13798:	dfc00117 	ldw	ra,4(sp)
   1379c:	df000017 	ldw	fp,0(sp)
   137a0:	dec00204 	addi	sp,sp,8
   137a4:	f800283a 	ret

000137a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   137a8:	defffc04 	addi	sp,sp,-16
   137ac:	dfc00315 	stw	ra,12(sp)
   137b0:	df000215 	stw	fp,8(sp)
   137b4:	dc000115 	stw	r16,4(sp)
   137b8:	df000104 	addi	fp,sp,4
   137bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   137c0:	e0bfff17 	ldw	r2,-4(fp)
   137c4:	108000d0 	cmplti	r2,r2,3
   137c8:	10000f1e 	bne	r2,zero,13808 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   137cc:	e13fff17 	ldw	r4,-4(fp)
   137d0:	04000074 	movhi	r16,1
   137d4:	84187104 	addi	r16,r16,25028
   137d8:	01400304 	movi	r5,12
   137dc:	0012f180 	call	12f18 <__mulsi3>
   137e0:	1405883a 	add	r2,r2,r16
   137e4:	10800204 	addi	r2,r2,8
   137e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   137ec:	e13fff17 	ldw	r4,-4(fp)
   137f0:	04000074 	movhi	r16,1
   137f4:	84187104 	addi	r16,r16,25028
   137f8:	01400304 	movi	r5,12
   137fc:	0012f180 	call	12f18 <__mulsi3>
   13800:	1405883a 	add	r2,r2,r16
   13804:	10000015 	stw	zero,0(r2)
  }
}
   13808:	e037883a 	mov	sp,fp
   1380c:	dfc00217 	ldw	ra,8(sp)
   13810:	df000117 	ldw	fp,4(sp)
   13814:	dc000017 	ldw	r16,0(sp)
   13818:	dec00304 	addi	sp,sp,12
   1381c:	f800283a 	ret

00013820 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13820:	defff804 	addi	sp,sp,-32
   13824:	df000715 	stw	fp,28(sp)
   13828:	df000704 	addi	fp,sp,28
   1382c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13830:	0005303a 	rdctl	r2,status
   13834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13838:	e0fffb17 	ldw	r3,-20(fp)
   1383c:	00bfff84 	movi	r2,-2
   13840:	1884703a 	and	r2,r3,r2
   13844:	1001703a 	wrctl	status,r2
  
  return context;
   13848:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1384c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13850:	d0a00a17 	ldw	r2,-32728(gp)
   13854:	10c000c4 	addi	r3,r2,3
   13858:	00bfff04 	movi	r2,-4
   1385c:	1884703a 	and	r2,r3,r2
   13860:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13864:	d0e00a17 	ldw	r3,-32728(gp)
   13868:	e0bffe17 	ldw	r2,-8(fp)
   1386c:	1887883a 	add	r3,r3,r2
   13870:	008000b4 	movhi	r2,2
   13874:	10b0d404 	addi	r2,r2,-15536
   13878:	10c0072e 	bgeu	r2,r3,13898 <sbrk+0x78>
   1387c:	e0bffd17 	ldw	r2,-12(fp)
   13880:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13884:	e0bffa17 	ldw	r2,-24(fp)
   13888:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1388c:	00bfffc4 	movi	r2,-1
   13890:	e0bfff15 	stw	r2,-4(fp)
   13894:	00000c06 	br	138c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13898:	d0a00a17 	ldw	r2,-32728(gp)
   1389c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   138a0:	d0e00a17 	ldw	r3,-32728(gp)
   138a4:	e0bffe17 	ldw	r2,-8(fp)
   138a8:	1885883a 	add	r2,r3,r2
   138ac:	d0a00a15 	stw	r2,-32728(gp)
   138b0:	e0bffd17 	ldw	r2,-12(fp)
   138b4:	e0bff915 	stw	r2,-28(fp)
   138b8:	e0bff917 	ldw	r2,-28(fp)
   138bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   138c0:	e0bffc17 	ldw	r2,-16(fp)
   138c4:	e0bfff15 	stw	r2,-4(fp)
   138c8:	e0bfff17 	ldw	r2,-4(fp)
} 
   138cc:	e037883a 	mov	sp,fp
   138d0:	df000017 	ldw	fp,0(sp)
   138d4:	dec00104 	addi	sp,sp,4
   138d8:	f800283a 	ret

000138dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   138dc:	defff704 	addi	sp,sp,-36
   138e0:	dfc00815 	stw	ra,32(sp)
   138e4:	df000715 	stw	fp,28(sp)
   138e8:	df000704 	addi	fp,sp,28
   138ec:	e13ffb15 	stw	r4,-20(fp)
   138f0:	e17ffc15 	stw	r5,-16(fp)
   138f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   138f8:	e0bffb17 	ldw	r2,-20(fp)
   138fc:	1004803a 	cmplt	r2,r2,zero
   13900:	1000091e 	bne	r2,zero,13928 <write+0x4c>
   13904:	e13ffb17 	ldw	r4,-20(fp)
   13908:	01400304 	movi	r5,12
   1390c:	0012f180 	call	12f18 <__mulsi3>
   13910:	1007883a 	mov	r3,r2
   13914:	00800074 	movhi	r2,1
   13918:	10987104 	addi	r2,r2,25028
   1391c:	1887883a 	add	r3,r3,r2
   13920:	e0ffff15 	stw	r3,-4(fp)
   13924:	00000106 	br	1392c <write+0x50>
   13928:	e03fff15 	stw	zero,-4(fp)
   1392c:	e0bfff17 	ldw	r2,-4(fp)
   13930:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   13934:	e0bffa17 	ldw	r2,-24(fp)
   13938:	1005003a 	cmpeq	r2,r2,zero
   1393c:	1000241e 	bne	r2,zero,139d0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13940:	e0bffa17 	ldw	r2,-24(fp)
   13944:	10800217 	ldw	r2,8(r2)
   13948:	108000cc 	andi	r2,r2,3
   1394c:	1005003a 	cmpeq	r2,r2,zero
   13950:	10001a1e 	bne	r2,zero,139bc <write+0xe0>
   13954:	e0bffa17 	ldw	r2,-24(fp)
   13958:	10800017 	ldw	r2,0(r2)
   1395c:	10800617 	ldw	r2,24(r2)
   13960:	1005003a 	cmpeq	r2,r2,zero
   13964:	1000151e 	bne	r2,zero,139bc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13968:	e0bffa17 	ldw	r2,-24(fp)
   1396c:	10800017 	ldw	r2,0(r2)
   13970:	10800617 	ldw	r2,24(r2)
   13974:	e17ffc17 	ldw	r5,-16(fp)
   13978:	e1bffd17 	ldw	r6,-12(fp)
   1397c:	e13ffa17 	ldw	r4,-24(fp)
   13980:	103ee83a 	callr	r2
   13984:	e0bff915 	stw	r2,-28(fp)
   13988:	e0bff917 	ldw	r2,-28(fp)
   1398c:	1004403a 	cmpge	r2,r2,zero
   13990:	1000071e 	bne	r2,zero,139b0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   13994:	0013a000 	call	13a00 <alt_get_errno>
   13998:	e0fff917 	ldw	r3,-28(fp)
   1399c:	00c7c83a 	sub	r3,zero,r3
   139a0:	10c00015 	stw	r3,0(r2)
        return -1;
   139a4:	00bfffc4 	movi	r2,-1
   139a8:	e0bffe15 	stw	r2,-8(fp)
   139ac:	00000e06 	br	139e8 <write+0x10c>
      }
      return rval;
   139b0:	e0bff917 	ldw	r2,-28(fp)
   139b4:	e0bffe15 	stw	r2,-8(fp)
   139b8:	00000b06 	br	139e8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   139bc:	0013a000 	call	13a00 <alt_get_errno>
   139c0:	1007883a 	mov	r3,r2
   139c4:	00800344 	movi	r2,13
   139c8:	18800015 	stw	r2,0(r3)
   139cc:	00000406 	br	139e0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   139d0:	0013a000 	call	13a00 <alt_get_errno>
   139d4:	1007883a 	mov	r3,r2
   139d8:	00801444 	movi	r2,81
   139dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   139e0:	00bfffc4 	movi	r2,-1
   139e4:	e0bffe15 	stw	r2,-8(fp)
   139e8:	e0bffe17 	ldw	r2,-8(fp)
}
   139ec:	e037883a 	mov	sp,fp
   139f0:	dfc00117 	ldw	ra,4(sp)
   139f4:	df000017 	ldw	fp,0(sp)
   139f8:	dec00204 	addi	sp,sp,8
   139fc:	f800283a 	ret

00013a00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a00:	defffd04 	addi	sp,sp,-12
   13a04:	dfc00215 	stw	ra,8(sp)
   13a08:	df000115 	stw	fp,4(sp)
   13a0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13a10:	00800074 	movhi	r2,1
   13a14:	109cf204 	addi	r2,r2,29640
   13a18:	10800017 	ldw	r2,0(r2)
   13a1c:	1005003a 	cmpeq	r2,r2,zero
   13a20:	1000061e 	bne	r2,zero,13a3c <alt_get_errno+0x3c>
   13a24:	00800074 	movhi	r2,1
   13a28:	109cf204 	addi	r2,r2,29640
   13a2c:	10800017 	ldw	r2,0(r2)
   13a30:	103ee83a 	callr	r2
   13a34:	e0bfff15 	stw	r2,-4(fp)
   13a38:	00000306 	br	13a48 <alt_get_errno+0x48>
   13a3c:	008000b4 	movhi	r2,2
   13a40:	10a38c04 	addi	r2,r2,-29136
   13a44:	e0bfff15 	stw	r2,-4(fp)
   13a48:	e0bfff17 	ldw	r2,-4(fp)
}
   13a4c:	e037883a 	mov	sp,fp
   13a50:	dfc00117 	ldw	ra,4(sp)
   13a54:	df000017 	ldw	fp,0(sp)
   13a58:	dec00204 	addi	sp,sp,8
   13a5c:	f800283a 	ret

00013a60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13a60:	defffd04 	addi	sp,sp,-12
   13a64:	dfc00215 	stw	ra,8(sp)
   13a68:	df000115 	stw	fp,4(sp)
   13a6c:	df000104 	addi	fp,sp,4
   13a70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   13a74:	00151c80 	call	151c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13a78:	00800044 	movi	r2,1
   13a7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13a80:	e037883a 	mov	sp,fp
   13a84:	dfc00117 	ldw	ra,4(sp)
   13a88:	df000017 	ldw	fp,0(sp)
   13a8c:	dec00204 	addi	sp,sp,8
   13a90:	f800283a 	ret

00013a94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13a94:	defffe04 	addi	sp,sp,-8
   13a98:	dfc00115 	stw	ra,4(sp)
   13a9c:	df000015 	stw	fp,0(sp)
   13aa0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13aa4:	01000074 	movhi	r4,1
   13aa8:	2118db04 	addi	r4,r4,25452
   13aac:	000b883a 	mov	r5,zero
   13ab0:	01800144 	movi	r6,5
   13ab4:	0013c580 	call	13c58 <altera_avalon_jtag_uart_init>
   13ab8:	01000074 	movhi	r4,1
   13abc:	2118d104 	addi	r4,r4,25412
   13ac0:	0013ad80 	call	13ad8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   13ac4:	e037883a 	mov	sp,fp
   13ac8:	dfc00117 	ldw	ra,4(sp)
   13acc:	df000017 	ldw	fp,0(sp)
   13ad0:	dec00204 	addi	sp,sp,8
   13ad4:	f800283a 	ret

00013ad8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13ad8:	defffd04 	addi	sp,sp,-12
   13adc:	dfc00215 	stw	ra,8(sp)
   13ae0:	df000115 	stw	fp,4(sp)
   13ae4:	df000104 	addi	fp,sp,4
   13ae8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13aec:	e13fff17 	ldw	r4,-4(fp)
   13af0:	01400074 	movhi	r5,1
   13af4:	295cef04 	addi	r5,r5,29628
   13af8:	001472c0 	call	1472c <alt_dev_llist_insert>
}
   13afc:	e037883a 	mov	sp,fp
   13b00:	dfc00117 	ldw	ra,4(sp)
   13b04:	df000017 	ldw	fp,0(sp)
   13b08:	dec00204 	addi	sp,sp,8
   13b0c:	f800283a 	ret

00013b10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13b10:	defffa04 	addi	sp,sp,-24
   13b14:	dfc00515 	stw	ra,20(sp)
   13b18:	df000415 	stw	fp,16(sp)
   13b1c:	df000404 	addi	fp,sp,16
   13b20:	e13ffd15 	stw	r4,-12(fp)
   13b24:	e17ffe15 	stw	r5,-8(fp)
   13b28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b2c:	e0bffd17 	ldw	r2,-12(fp)
   13b30:	10800017 	ldw	r2,0(r2)
   13b34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13b38:	e0bffc17 	ldw	r2,-16(fp)
   13b3c:	11000a04 	addi	r4,r2,40
   13b40:	e0bffd17 	ldw	r2,-12(fp)
   13b44:	11c00217 	ldw	r7,8(r2)
   13b48:	e17ffe17 	ldw	r5,-8(fp)
   13b4c:	e1bfff17 	ldw	r6,-4(fp)
   13b50:	00141580 	call	14158 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13b54:	e037883a 	mov	sp,fp
   13b58:	dfc00117 	ldw	ra,4(sp)
   13b5c:	df000017 	ldw	fp,0(sp)
   13b60:	dec00204 	addi	sp,sp,8
   13b64:	f800283a 	ret

00013b68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13b68:	defffa04 	addi	sp,sp,-24
   13b6c:	dfc00515 	stw	ra,20(sp)
   13b70:	df000415 	stw	fp,16(sp)
   13b74:	df000404 	addi	fp,sp,16
   13b78:	e13ffd15 	stw	r4,-12(fp)
   13b7c:	e17ffe15 	stw	r5,-8(fp)
   13b80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13b84:	e0bffd17 	ldw	r2,-12(fp)
   13b88:	10800017 	ldw	r2,0(r2)
   13b8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13b90:	e0bffc17 	ldw	r2,-16(fp)
   13b94:	11000a04 	addi	r4,r2,40
   13b98:	e0bffd17 	ldw	r2,-12(fp)
   13b9c:	11c00217 	ldw	r7,8(r2)
   13ba0:	e17ffe17 	ldw	r5,-8(fp)
   13ba4:	e1bfff17 	ldw	r6,-4(fp)
   13ba8:	001437c0 	call	1437c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13bac:	e037883a 	mov	sp,fp
   13bb0:	dfc00117 	ldw	ra,4(sp)
   13bb4:	df000017 	ldw	fp,0(sp)
   13bb8:	dec00204 	addi	sp,sp,8
   13bbc:	f800283a 	ret

00013bc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13bc0:	defffc04 	addi	sp,sp,-16
   13bc4:	dfc00315 	stw	ra,12(sp)
   13bc8:	df000215 	stw	fp,8(sp)
   13bcc:	df000204 	addi	fp,sp,8
   13bd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13bd4:	e0bfff17 	ldw	r2,-4(fp)
   13bd8:	10800017 	ldw	r2,0(r2)
   13bdc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13be0:	e0bffe17 	ldw	r2,-8(fp)
   13be4:	11000a04 	addi	r4,r2,40
   13be8:	e0bfff17 	ldw	r2,-4(fp)
   13bec:	11400217 	ldw	r5,8(r2)
   13bf0:	0013ff00 	call	13ff0 <altera_avalon_jtag_uart_close>
}
   13bf4:	e037883a 	mov	sp,fp
   13bf8:	dfc00117 	ldw	ra,4(sp)
   13bfc:	df000017 	ldw	fp,0(sp)
   13c00:	dec00204 	addi	sp,sp,8
   13c04:	f800283a 	ret

00013c08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13c08:	defffa04 	addi	sp,sp,-24
   13c0c:	dfc00515 	stw	ra,20(sp)
   13c10:	df000415 	stw	fp,16(sp)
   13c14:	df000404 	addi	fp,sp,16
   13c18:	e13ffd15 	stw	r4,-12(fp)
   13c1c:	e17ffe15 	stw	r5,-8(fp)
   13c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13c24:	e0bffd17 	ldw	r2,-12(fp)
   13c28:	10800017 	ldw	r2,0(r2)
   13c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13c30:	e0bffc17 	ldw	r2,-16(fp)
   13c34:	11000a04 	addi	r4,r2,40
   13c38:	e17ffe17 	ldw	r5,-8(fp)
   13c3c:	e1bfff17 	ldw	r6,-4(fp)
   13c40:	00140640 	call	14064 <altera_avalon_jtag_uart_ioctl>
}
   13c44:	e037883a 	mov	sp,fp
   13c48:	dfc00117 	ldw	ra,4(sp)
   13c4c:	df000017 	ldw	fp,0(sp)
   13c50:	dec00204 	addi	sp,sp,8
   13c54:	f800283a 	ret

00013c58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13c58:	defffa04 	addi	sp,sp,-24
   13c5c:	dfc00515 	stw	ra,20(sp)
   13c60:	df000415 	stw	fp,16(sp)
   13c64:	df000404 	addi	fp,sp,16
   13c68:	e13ffd15 	stw	r4,-12(fp)
   13c6c:	e17ffe15 	stw	r5,-8(fp)
   13c70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13c74:	e0fffd17 	ldw	r3,-12(fp)
   13c78:	00800044 	movi	r2,1
   13c7c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	10800017 	ldw	r2,0(r2)
   13c88:	11000104 	addi	r4,r2,4
   13c8c:	e0bffd17 	ldw	r2,-12(fp)
   13c90:	10800817 	ldw	r2,32(r2)
   13c94:	1007883a 	mov	r3,r2
   13c98:	2005883a 	mov	r2,r4
   13c9c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13ca0:	e13ffe17 	ldw	r4,-8(fp)
   13ca4:	e17fff17 	ldw	r5,-4(fp)
   13ca8:	d8000015 	stw	zero,0(sp)
   13cac:	01800074 	movhi	r6,1
   13cb0:	318f4604 	addi	r6,r6,15640
   13cb4:	e1fffd17 	ldw	r7,-12(fp)
   13cb8:	00149240 	call	14924 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13cbc:	e0bffd17 	ldw	r2,-12(fp)
   13cc0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13ccc:	008000b4 	movhi	r2,2
   13cd0:	10a39104 	addi	r2,r2,-29116
   13cd4:	10800017 	ldw	r2,0(r2)
   13cd8:	100b883a 	mov	r5,r2
   13cdc:	01800074 	movhi	r6,1
   13ce0:	318fd004 	addi	r6,r6,16192
   13ce4:	e1fffd17 	ldw	r7,-12(fp)
   13ce8:	00145bc0 	call	145bc <alt_alarm_start>
   13cec:	1004403a 	cmpge	r2,r2,zero
   13cf0:	1000041e 	bne	r2,zero,13d04 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13cf4:	e0fffd17 	ldw	r3,-12(fp)
   13cf8:	00a00034 	movhi	r2,32768
   13cfc:	10bfffc4 	addi	r2,r2,-1
   13d00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13d04:	e037883a 	mov	sp,fp
   13d08:	dfc00117 	ldw	ra,4(sp)
   13d0c:	df000017 	ldw	fp,0(sp)
   13d10:	dec00204 	addi	sp,sp,8
   13d14:	f800283a 	ret

00013d18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13d18:	defff804 	addi	sp,sp,-32
   13d1c:	df000715 	stw	fp,28(sp)
   13d20:	df000704 	addi	fp,sp,28
   13d24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13d28:	e0bfff17 	ldw	r2,-4(fp)
   13d2c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   13d30:	e0bffe17 	ldw	r2,-8(fp)
   13d34:	10800017 	ldw	r2,0(r2)
   13d38:	e0bffd15 	stw	r2,-12(fp)
   13d3c:	00000006 	br	13d40 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13d40:	e0bffd17 	ldw	r2,-12(fp)
   13d44:	10800104 	addi	r2,r2,4
   13d48:	10800037 	ldwio	r2,0(r2)
   13d4c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13d50:	e0bffc17 	ldw	r2,-16(fp)
   13d54:	1080c00c 	andi	r2,r2,768
   13d58:	1005003a 	cmpeq	r2,r2,zero
   13d5c:	1000741e 	bne	r2,zero,13f30 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13d60:	e0bffc17 	ldw	r2,-16(fp)
   13d64:	1080400c 	andi	r2,r2,256
   13d68:	1005003a 	cmpeq	r2,r2,zero
   13d6c:	1000351e 	bne	r2,zero,13e44 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13d70:	00800074 	movhi	r2,1
   13d74:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13d78:	e0bffe17 	ldw	r2,-8(fp)
   13d7c:	10800a17 	ldw	r2,40(r2)
   13d80:	10800044 	addi	r2,r2,1
   13d84:	1081ffcc 	andi	r2,r2,2047
   13d88:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   13d8c:	e0bffe17 	ldw	r2,-8(fp)
   13d90:	10c00b17 	ldw	r3,44(r2)
   13d94:	e0bffa17 	ldw	r2,-24(fp)
   13d98:	18801626 	beq	r3,r2,13df4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13d9c:	e0bffd17 	ldw	r2,-12(fp)
   13da0:	10800037 	ldwio	r2,0(r2)
   13da4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13da8:	e0bffb17 	ldw	r2,-20(fp)
   13dac:	10a0000c 	andi	r2,r2,32768
   13db0:	1005003a 	cmpeq	r2,r2,zero
   13db4:	10000f1e 	bne	r2,zero,13df4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13db8:	e0bffe17 	ldw	r2,-8(fp)
   13dbc:	10c00a17 	ldw	r3,40(r2)
   13dc0:	e0bffb17 	ldw	r2,-20(fp)
   13dc4:	1009883a 	mov	r4,r2
   13dc8:	e0bffe17 	ldw	r2,-8(fp)
   13dcc:	1885883a 	add	r2,r3,r2
   13dd0:	10800e04 	addi	r2,r2,56
   13dd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13dd8:	e0bffe17 	ldw	r2,-8(fp)
   13ddc:	10800a17 	ldw	r2,40(r2)
   13de0:	10800044 	addi	r2,r2,1
   13de4:	10c1ffcc 	andi	r3,r2,2047
   13de8:	e0bffe17 	ldw	r2,-8(fp)
   13dec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13df0:	003fe106 	br	13d78 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13df4:	e0bffb17 	ldw	r2,-20(fp)
   13df8:	10bfffec 	andhi	r2,r2,65535
   13dfc:	1005003a 	cmpeq	r2,r2,zero
   13e00:	1000101e 	bne	r2,zero,13e44 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13e04:	e0bffe17 	ldw	r2,-8(fp)
   13e08:	10c00817 	ldw	r3,32(r2)
   13e0c:	00bfff84 	movi	r2,-2
   13e10:	1886703a 	and	r3,r3,r2
   13e14:	e0bffe17 	ldw	r2,-8(fp)
   13e18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13e1c:	e0bffd17 	ldw	r2,-12(fp)
   13e20:	11000104 	addi	r4,r2,4
   13e24:	e0bffe17 	ldw	r2,-8(fp)
   13e28:	10800817 	ldw	r2,32(r2)
   13e2c:	1007883a 	mov	r3,r2
   13e30:	2005883a 	mov	r2,r4
   13e34:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13e38:	e0bffd17 	ldw	r2,-12(fp)
   13e3c:	10800104 	addi	r2,r2,4
   13e40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13e44:	e0bffc17 	ldw	r2,-16(fp)
   13e48:	1080800c 	andi	r2,r2,512
   13e4c:	1005003a 	cmpeq	r2,r2,zero
   13e50:	103fbb1e 	bne	r2,zero,13d40 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13e54:	e0bffc17 	ldw	r2,-16(fp)
   13e58:	10bfffec 	andhi	r2,r2,65535
   13e5c:	1004d43a 	srli	r2,r2,16
   13e60:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13e64:	00001506 	br	13ebc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13e68:	e13ffd17 	ldw	r4,-12(fp)
   13e6c:	e0bffe17 	ldw	r2,-8(fp)
   13e70:	10c00d17 	ldw	r3,52(r2)
   13e74:	e0bffe17 	ldw	r2,-8(fp)
   13e78:	1885883a 	add	r2,r3,r2
   13e7c:	10820e04 	addi	r2,r2,2104
   13e80:	10800003 	ldbu	r2,0(r2)
   13e84:	10c03fcc 	andi	r3,r2,255
   13e88:	18c0201c 	xori	r3,r3,128
   13e8c:	18ffe004 	addi	r3,r3,-128
   13e90:	2005883a 	mov	r2,r4
   13e94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13e98:	e0bffe17 	ldw	r2,-8(fp)
   13e9c:	10800d17 	ldw	r2,52(r2)
   13ea0:	10800044 	addi	r2,r2,1
   13ea4:	10c1ffcc 	andi	r3,r2,2047
   13ea8:	e0bffe17 	ldw	r2,-8(fp)
   13eac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13eb0:	e0bff917 	ldw	r2,-28(fp)
   13eb4:	10bfffc4 	addi	r2,r2,-1
   13eb8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13ebc:	e0bff917 	ldw	r2,-28(fp)
   13ec0:	1005003a 	cmpeq	r2,r2,zero
   13ec4:	1000051e 	bne	r2,zero,13edc <altera_avalon_jtag_uart_irq+0x1c4>
   13ec8:	e0bffe17 	ldw	r2,-8(fp)
   13ecc:	10c00d17 	ldw	r3,52(r2)
   13ed0:	e0bffe17 	ldw	r2,-8(fp)
   13ed4:	10800c17 	ldw	r2,48(r2)
   13ed8:	18bfe31e 	bne	r3,r2,13e68 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13edc:	e0bff917 	ldw	r2,-28(fp)
   13ee0:	1005003a 	cmpeq	r2,r2,zero
   13ee4:	103f961e 	bne	r2,zero,13d40 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13ee8:	e0bffe17 	ldw	r2,-8(fp)
   13eec:	10c00817 	ldw	r3,32(r2)
   13ef0:	00bfff44 	movi	r2,-3
   13ef4:	1886703a 	and	r3,r3,r2
   13ef8:	e0bffe17 	ldw	r2,-8(fp)
   13efc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13f00:	e0bffe17 	ldw	r2,-8(fp)
   13f04:	10800017 	ldw	r2,0(r2)
   13f08:	11000104 	addi	r4,r2,4
   13f0c:	e0bffe17 	ldw	r2,-8(fp)
   13f10:	10800817 	ldw	r2,32(r2)
   13f14:	1007883a 	mov	r3,r2
   13f18:	2005883a 	mov	r2,r4
   13f1c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13f20:	e0bffd17 	ldw	r2,-12(fp)
   13f24:	10800104 	addi	r2,r2,4
   13f28:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13f2c:	003f8406 	br	13d40 <altera_avalon_jtag_uart_irq+0x28>
}
   13f30:	e037883a 	mov	sp,fp
   13f34:	df000017 	ldw	fp,0(sp)
   13f38:	dec00104 	addi	sp,sp,4
   13f3c:	f800283a 	ret

00013f40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13f40:	defffc04 	addi	sp,sp,-16
   13f44:	df000315 	stw	fp,12(sp)
   13f48:	df000304 	addi	fp,sp,12
   13f4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13f50:	e0bfff17 	ldw	r2,-4(fp)
   13f54:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13f58:	e0bffe17 	ldw	r2,-8(fp)
   13f5c:	10800017 	ldw	r2,0(r2)
   13f60:	10800104 	addi	r2,r2,4
   13f64:	10800037 	ldwio	r2,0(r2)
   13f68:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13f6c:	e0bffd17 	ldw	r2,-12(fp)
   13f70:	1081000c 	andi	r2,r2,1024
   13f74:	1005003a 	cmpeq	r2,r2,zero
   13f78:	10000c1e 	bne	r2,zero,13fac <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13f7c:	e0bffe17 	ldw	r2,-8(fp)
   13f80:	10800017 	ldw	r2,0(r2)
   13f84:	11000104 	addi	r4,r2,4
   13f88:	e0bffe17 	ldw	r2,-8(fp)
   13f8c:	10800817 	ldw	r2,32(r2)
   13f90:	10810014 	ori	r2,r2,1024
   13f94:	1007883a 	mov	r3,r2
   13f98:	2005883a 	mov	r2,r4
   13f9c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   13fa0:	e0bffe17 	ldw	r2,-8(fp)
   13fa4:	10000915 	stw	zero,36(r2)
   13fa8:	00000a06 	br	13fd4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13fac:	e0bffe17 	ldw	r2,-8(fp)
   13fb0:	10c00917 	ldw	r3,36(r2)
   13fb4:	00a00034 	movhi	r2,32768
   13fb8:	10bfff04 	addi	r2,r2,-4
   13fbc:	10c00536 	bltu	r2,r3,13fd4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   13fc0:	e0bffe17 	ldw	r2,-8(fp)
   13fc4:	10800917 	ldw	r2,36(r2)
   13fc8:	10c00044 	addi	r3,r2,1
   13fcc:	e0bffe17 	ldw	r2,-8(fp)
   13fd0:	10c00915 	stw	r3,36(r2)
   13fd4:	008000b4 	movhi	r2,2
   13fd8:	10a39104 	addi	r2,r2,-29116
   13fdc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13fe0:	e037883a 	mov	sp,fp
   13fe4:	df000017 	ldw	fp,0(sp)
   13fe8:	dec00104 	addi	sp,sp,4
   13fec:	f800283a 	ret

00013ff0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13ff0:	defffc04 	addi	sp,sp,-16
   13ff4:	df000315 	stw	fp,12(sp)
   13ff8:	df000304 	addi	fp,sp,12
   13ffc:	e13ffd15 	stw	r4,-12(fp)
   14000:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14004:	00000706 	br	14024 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   14008:	e0bffe17 	ldw	r2,-8(fp)
   1400c:	1090000c 	andi	r2,r2,16384
   14010:	1005003a 	cmpeq	r2,r2,zero
   14014:	1000031e 	bne	r2,zero,14024 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   14018:	00bffd44 	movi	r2,-11
   1401c:	e0bfff15 	stw	r2,-4(fp)
   14020:	00000b06 	br	14050 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14024:	e0bffd17 	ldw	r2,-12(fp)
   14028:	10c00d17 	ldw	r3,52(r2)
   1402c:	e0bffd17 	ldw	r2,-12(fp)
   14030:	10800c17 	ldw	r2,48(r2)
   14034:	18800526 	beq	r3,r2,1404c <altera_avalon_jtag_uart_close+0x5c>
   14038:	e0bffd17 	ldw	r2,-12(fp)
   1403c:	10c00917 	ldw	r3,36(r2)
   14040:	e0bffd17 	ldw	r2,-12(fp)
   14044:	10800117 	ldw	r2,4(r2)
   14048:	18bfef36 	bltu	r3,r2,14008 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1404c:	e03fff15 	stw	zero,-4(fp)
   14050:	e0bfff17 	ldw	r2,-4(fp)
}
   14054:	e037883a 	mov	sp,fp
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00104 	addi	sp,sp,4
   14060:	f800283a 	ret

00014064 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14064:	defff804 	addi	sp,sp,-32
   14068:	df000715 	stw	fp,28(sp)
   1406c:	df000704 	addi	fp,sp,28
   14070:	e13ffb15 	stw	r4,-20(fp)
   14074:	e17ffc15 	stw	r5,-16(fp)
   14078:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1407c:	00bff9c4 	movi	r2,-25
   14080:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   14084:	e0bffc17 	ldw	r2,-16(fp)
   14088:	e0bfff15 	stw	r2,-4(fp)
   1408c:	e0ffff17 	ldw	r3,-4(fp)
   14090:	189a8060 	cmpeqi	r2,r3,27137
   14094:	1000041e 	bne	r2,zero,140a8 <altera_avalon_jtag_uart_ioctl+0x44>
   14098:	e0ffff17 	ldw	r3,-4(fp)
   1409c:	189a80a0 	cmpeqi	r2,r3,27138
   140a0:	10001b1e 	bne	r2,zero,14110 <altera_avalon_jtag_uart_ioctl+0xac>
   140a4:	00002706 	br	14144 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   140a8:	e0bffb17 	ldw	r2,-20(fp)
   140ac:	10c00117 	ldw	r3,4(r2)
   140b0:	00a00034 	movhi	r2,32768
   140b4:	10bfffc4 	addi	r2,r2,-1
   140b8:	18802226 	beq	r3,r2,14144 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   140bc:	e0bffd17 	ldw	r2,-12(fp)
   140c0:	10800017 	ldw	r2,0(r2)
   140c4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   140c8:	e0bff917 	ldw	r2,-28(fp)
   140cc:	10800090 	cmplti	r2,r2,2
   140d0:	1000071e 	bne	r2,zero,140f0 <altera_avalon_jtag_uart_ioctl+0x8c>
   140d4:	e0fff917 	ldw	r3,-28(fp)
   140d8:	00a00034 	movhi	r2,32768
   140dc:	10bfffc4 	addi	r2,r2,-1
   140e0:	18800326 	beq	r3,r2,140f0 <altera_avalon_jtag_uart_ioctl+0x8c>
   140e4:	e0bff917 	ldw	r2,-28(fp)
   140e8:	e0bffe15 	stw	r2,-8(fp)
   140ec:	00000306 	br	140fc <altera_avalon_jtag_uart_ioctl+0x98>
   140f0:	00e00034 	movhi	r3,32768
   140f4:	18ffff84 	addi	r3,r3,-2
   140f8:	e0fffe15 	stw	r3,-8(fp)
   140fc:	e0bffb17 	ldw	r2,-20(fp)
   14100:	e0fffe17 	ldw	r3,-8(fp)
   14104:	10c00115 	stw	r3,4(r2)
      rc = 0;
   14108:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1410c:	00000d06 	br	14144 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14110:	e0bffb17 	ldw	r2,-20(fp)
   14114:	10c00117 	ldw	r3,4(r2)
   14118:	00a00034 	movhi	r2,32768
   1411c:	10bfffc4 	addi	r2,r2,-1
   14120:	18800826 	beq	r3,r2,14144 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14124:	e13ffd17 	ldw	r4,-12(fp)
   14128:	e0bffb17 	ldw	r2,-20(fp)
   1412c:	10c00917 	ldw	r3,36(r2)
   14130:	e0bffb17 	ldw	r2,-20(fp)
   14134:	10800117 	ldw	r2,4(r2)
   14138:	1885803a 	cmpltu	r2,r3,r2
   1413c:	20800015 	stw	r2,0(r4)
      rc = 0;
   14140:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   14144:	e0bffa17 	ldw	r2,-24(fp)
}
   14148:	e037883a 	mov	sp,fp
   1414c:	df000017 	ldw	fp,0(sp)
   14150:	dec00104 	addi	sp,sp,4
   14154:	f800283a 	ret

00014158 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14158:	defff204 	addi	sp,sp,-56
   1415c:	dfc00d15 	stw	ra,52(sp)
   14160:	df000c15 	stw	fp,48(sp)
   14164:	df000c04 	addi	fp,sp,48
   14168:	e13ffb15 	stw	r4,-20(fp)
   1416c:	e17ffc15 	stw	r5,-16(fp)
   14170:	e1bffd15 	stw	r6,-12(fp)
   14174:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   14178:	e0bffc17 	ldw	r2,-16(fp)
   1417c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14180:	00004806 	br	142a4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14184:	e0bffb17 	ldw	r2,-20(fp)
   14188:	10800a17 	ldw	r2,40(r2)
   1418c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14190:	e0bffb17 	ldw	r2,-20(fp)
   14194:	10800b17 	ldw	r2,44(r2)
   14198:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1419c:	e0fff717 	ldw	r3,-36(fp)
   141a0:	e0bff617 	ldw	r2,-40(fp)
   141a4:	18800536 	bltu	r3,r2,141bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   141a8:	e0bff717 	ldw	r2,-36(fp)
   141ac:	e0fff617 	ldw	r3,-40(fp)
   141b0:	10c5c83a 	sub	r2,r2,r3
   141b4:	e0bff815 	stw	r2,-32(fp)
   141b8:	00000406 	br	141cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   141bc:	00820004 	movi	r2,2048
   141c0:	e0fff617 	ldw	r3,-40(fp)
   141c4:	10c5c83a 	sub	r2,r2,r3
   141c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   141cc:	e0bff817 	ldw	r2,-32(fp)
   141d0:	1005003a 	cmpeq	r2,r2,zero
   141d4:	10001f1e 	bne	r2,zero,14254 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   141d8:	e0fffd17 	ldw	r3,-12(fp)
   141dc:	e0bff817 	ldw	r2,-32(fp)
   141e0:	1880022e 	bgeu	r3,r2,141ec <altera_avalon_jtag_uart_read+0x94>
        n = space;
   141e4:	e0bffd17 	ldw	r2,-12(fp)
   141e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   141ec:	e0bffb17 	ldw	r2,-20(fp)
   141f0:	10c00e04 	addi	r3,r2,56
   141f4:	e0bff617 	ldw	r2,-40(fp)
   141f8:	1887883a 	add	r3,r3,r2
   141fc:	e0bffa17 	ldw	r2,-24(fp)
   14200:	1009883a 	mov	r4,r2
   14204:	180b883a 	mov	r5,r3
   14208:	e1bff817 	ldw	r6,-32(fp)
   1420c:	001186c0 	call	1186c <memcpy>
      ptr   += n;
   14210:	e0fff817 	ldw	r3,-32(fp)
   14214:	e0bffa17 	ldw	r2,-24(fp)
   14218:	10c5883a 	add	r2,r2,r3
   1421c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   14220:	e0fffd17 	ldw	r3,-12(fp)
   14224:	e0bff817 	ldw	r2,-32(fp)
   14228:	1885c83a 	sub	r2,r3,r2
   1422c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14230:	e0fff617 	ldw	r3,-40(fp)
   14234:	e0bff817 	ldw	r2,-32(fp)
   14238:	1885883a 	add	r2,r3,r2
   1423c:	10c1ffcc 	andi	r3,r2,2047
   14240:	e0bffb17 	ldw	r2,-20(fp)
   14244:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14248:	e0bffd17 	ldw	r2,-12(fp)
   1424c:	10800048 	cmpgei	r2,r2,1
   14250:	103fcc1e 	bne	r2,zero,14184 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   14254:	e0fffa17 	ldw	r3,-24(fp)
   14258:	e0bffc17 	ldw	r2,-16(fp)
   1425c:	1880141e 	bne	r3,r2,142b0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14260:	e0bffe17 	ldw	r2,-8(fp)
   14264:	1090000c 	andi	r2,r2,16384
   14268:	1004c03a 	cmpne	r2,r2,zero
   1426c:	1000101e 	bne	r2,zero,142b0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14270:	e0bffb17 	ldw	r2,-20(fp)
   14274:	10c00a17 	ldw	r3,40(r2)
   14278:	e0bff717 	ldw	r2,-36(fp)
   1427c:	1880051e 	bne	r3,r2,14294 <altera_avalon_jtag_uart_read+0x13c>
   14280:	e0bffb17 	ldw	r2,-20(fp)
   14284:	10c00917 	ldw	r3,36(r2)
   14288:	e0bffb17 	ldw	r2,-20(fp)
   1428c:	10800117 	ldw	r2,4(r2)
   14290:	18bff736 	bltu	r3,r2,14270 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14294:	e0bffb17 	ldw	r2,-20(fp)
   14298:	10c00a17 	ldw	r3,40(r2)
   1429c:	e0bff717 	ldw	r2,-36(fp)
   142a0:	18800326 	beq	r3,r2,142b0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   142a4:	e0bffd17 	ldw	r2,-12(fp)
   142a8:	10800048 	cmpgei	r2,r2,1
   142ac:	103fb51e 	bne	r2,zero,14184 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   142b0:	e0fffa17 	ldw	r3,-24(fp)
   142b4:	e0bffc17 	ldw	r2,-16(fp)
   142b8:	18801926 	beq	r3,r2,14320 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142bc:	0005303a 	rdctl	r2,status
   142c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142c4:	e0fff517 	ldw	r3,-44(fp)
   142c8:	00bfff84 	movi	r2,-2
   142cc:	1884703a 	and	r2,r3,r2
   142d0:	1001703a 	wrctl	status,r2
  
  return context;
   142d4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   142d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   142dc:	e0bffb17 	ldw	r2,-20(fp)
   142e0:	10800817 	ldw	r2,32(r2)
   142e4:	10c00054 	ori	r3,r2,1
   142e8:	e0bffb17 	ldw	r2,-20(fp)
   142ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   142f0:	e0bffb17 	ldw	r2,-20(fp)
   142f4:	10800017 	ldw	r2,0(r2)
   142f8:	11000104 	addi	r4,r2,4
   142fc:	e0bffb17 	ldw	r2,-20(fp)
   14300:	10800817 	ldw	r2,32(r2)
   14304:	1007883a 	mov	r3,r2
   14308:	2005883a 	mov	r2,r4
   1430c:	10c00035 	stwio	r3,0(r2)
   14310:	e0bff917 	ldw	r2,-28(fp)
   14314:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14318:	e0bff417 	ldw	r2,-48(fp)
   1431c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14320:	e0fffa17 	ldw	r3,-24(fp)
   14324:	e0bffc17 	ldw	r2,-16(fp)
   14328:	18800526 	beq	r3,r2,14340 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1432c:	e0fffa17 	ldw	r3,-24(fp)
   14330:	e0bffc17 	ldw	r2,-16(fp)
   14334:	1887c83a 	sub	r3,r3,r2
   14338:	e0ffff15 	stw	r3,-4(fp)
   1433c:	00000906 	br	14364 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   14340:	e0bffe17 	ldw	r2,-8(fp)
   14344:	1090000c 	andi	r2,r2,16384
   14348:	1005003a 	cmpeq	r2,r2,zero
   1434c:	1000031e 	bne	r2,zero,1435c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14350:	00bffd44 	movi	r2,-11
   14354:	e0bfff15 	stw	r2,-4(fp)
   14358:	00000206 	br	14364 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1435c:	00bffec4 	movi	r2,-5
   14360:	e0bfff15 	stw	r2,-4(fp)
   14364:	e0bfff17 	ldw	r2,-4(fp)
}
   14368:	e037883a 	mov	sp,fp
   1436c:	dfc00117 	ldw	ra,4(sp)
   14370:	df000017 	ldw	fp,0(sp)
   14374:	dec00204 	addi	sp,sp,8
   14378:	f800283a 	ret

0001437c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1437c:	defff204 	addi	sp,sp,-56
   14380:	dfc00d15 	stw	ra,52(sp)
   14384:	df000c15 	stw	fp,48(sp)
   14388:	df000c04 	addi	fp,sp,48
   1438c:	e13ffb15 	stw	r4,-20(fp)
   14390:	e17ffc15 	stw	r5,-16(fp)
   14394:	e1bffd15 	stw	r6,-12(fp)
   14398:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1439c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   143a0:	e0bffc17 	ldw	r2,-16(fp)
   143a4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   143a8:	00003a06 	br	14494 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   143ac:	e0bffb17 	ldw	r2,-20(fp)
   143b0:	10800c17 	ldw	r2,48(r2)
   143b4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   143b8:	e0bffb17 	ldw	r2,-20(fp)
   143bc:	10800d17 	ldw	r2,52(r2)
   143c0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   143c4:	e0fffa17 	ldw	r3,-24(fp)
   143c8:	e0bff917 	ldw	r2,-28(fp)
   143cc:	1880062e 	bgeu	r3,r2,143e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   143d0:	e0fff917 	ldw	r3,-28(fp)
   143d4:	e0bffa17 	ldw	r2,-24(fp)
   143d8:	1885c83a 	sub	r2,r3,r2
   143dc:	10bfffc4 	addi	r2,r2,-1
   143e0:	e0bff815 	stw	r2,-32(fp)
   143e4:	00000c06 	br	14418 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   143e8:	e0bff917 	ldw	r2,-28(fp)
   143ec:	1005003a 	cmpeq	r2,r2,zero
   143f0:	1000051e 	bne	r2,zero,14408 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   143f4:	00820004 	movi	r2,2048
   143f8:	e0fffa17 	ldw	r3,-24(fp)
   143fc:	10c5c83a 	sub	r2,r2,r3
   14400:	e0bff815 	stw	r2,-32(fp)
   14404:	00000406 	br	14418 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14408:	0081ffc4 	movi	r2,2047
   1440c:	e0fffa17 	ldw	r3,-24(fp)
   14410:	10c5c83a 	sub	r2,r2,r3
   14414:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   14418:	e0bff817 	ldw	r2,-32(fp)
   1441c:	1005003a 	cmpeq	r2,r2,zero
   14420:	10001f1e 	bne	r2,zero,144a0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   14424:	e0fffd17 	ldw	r3,-12(fp)
   14428:	e0bff817 	ldw	r2,-32(fp)
   1442c:	1880022e 	bgeu	r3,r2,14438 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   14430:	e0bffd17 	ldw	r2,-12(fp)
   14434:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14438:	e0bffb17 	ldw	r2,-20(fp)
   1443c:	10c20e04 	addi	r3,r2,2104
   14440:	e0bffa17 	ldw	r2,-24(fp)
   14444:	1885883a 	add	r2,r3,r2
   14448:	e0fffc17 	ldw	r3,-16(fp)
   1444c:	1009883a 	mov	r4,r2
   14450:	180b883a 	mov	r5,r3
   14454:	e1bff817 	ldw	r6,-32(fp)
   14458:	001186c0 	call	1186c <memcpy>
      ptr   += n;
   1445c:	e0fff817 	ldw	r3,-32(fp)
   14460:	e0bffc17 	ldw	r2,-16(fp)
   14464:	10c5883a 	add	r2,r2,r3
   14468:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1446c:	e0fffd17 	ldw	r3,-12(fp)
   14470:	e0bff817 	ldw	r2,-32(fp)
   14474:	1885c83a 	sub	r2,r3,r2
   14478:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1447c:	e0fffa17 	ldw	r3,-24(fp)
   14480:	e0bff817 	ldw	r2,-32(fp)
   14484:	1885883a 	add	r2,r3,r2
   14488:	10c1ffcc 	andi	r3,r2,2047
   1448c:	e0bffb17 	ldw	r2,-20(fp)
   14490:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14494:	e0bffd17 	ldw	r2,-12(fp)
   14498:	10800048 	cmpgei	r2,r2,1
   1449c:	103fc31e 	bne	r2,zero,143ac <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144a0:	0005303a 	rdctl	r2,status
   144a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144a8:	e0fff517 	ldw	r3,-44(fp)
   144ac:	00bfff84 	movi	r2,-2
   144b0:	1884703a 	and	r2,r3,r2
   144b4:	1001703a 	wrctl	status,r2
  
  return context;
   144b8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   144bc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   144c0:	e0bffb17 	ldw	r2,-20(fp)
   144c4:	10800817 	ldw	r2,32(r2)
   144c8:	10c00094 	ori	r3,r2,2
   144cc:	e0bffb17 	ldw	r2,-20(fp)
   144d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   144d4:	e0bffb17 	ldw	r2,-20(fp)
   144d8:	10800017 	ldw	r2,0(r2)
   144dc:	11000104 	addi	r4,r2,4
   144e0:	e0bffb17 	ldw	r2,-20(fp)
   144e4:	10800817 	ldw	r2,32(r2)
   144e8:	1007883a 	mov	r3,r2
   144ec:	2005883a 	mov	r2,r4
   144f0:	10c00035 	stwio	r3,0(r2)
   144f4:	e0bff717 	ldw	r2,-36(fp)
   144f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144fc:	e0bff417 	ldw	r2,-48(fp)
   14500:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14504:	e0bffd17 	ldw	r2,-12(fp)
   14508:	10800050 	cmplti	r2,r2,1
   1450c:	1000111e 	bne	r2,zero,14554 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   14510:	e0bffe17 	ldw	r2,-8(fp)
   14514:	1090000c 	andi	r2,r2,16384
   14518:	1004c03a 	cmpne	r2,r2,zero
   1451c:	1000101e 	bne	r2,zero,14560 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14520:	e0bffb17 	ldw	r2,-20(fp)
   14524:	10c00d17 	ldw	r3,52(r2)
   14528:	e0bff917 	ldw	r2,-28(fp)
   1452c:	1880051e 	bne	r3,r2,14544 <altera_avalon_jtag_uart_write+0x1c8>
   14530:	e0bffb17 	ldw	r2,-20(fp)
   14534:	10c00917 	ldw	r3,36(r2)
   14538:	e0bffb17 	ldw	r2,-20(fp)
   1453c:	10800117 	ldw	r2,4(r2)
   14540:	18bff736 	bltu	r3,r2,14520 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14544:	e0bffb17 	ldw	r2,-20(fp)
   14548:	10c00d17 	ldw	r3,52(r2)
   1454c:	e0bff917 	ldw	r2,-28(fp)
   14550:	18800326 	beq	r3,r2,14560 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   14554:	e0bffd17 	ldw	r2,-12(fp)
   14558:	10800048 	cmpgei	r2,r2,1
   1455c:	103fcd1e 	bne	r2,zero,14494 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14560:	e0fffc17 	ldw	r3,-16(fp)
   14564:	e0bff617 	ldw	r2,-40(fp)
   14568:	18800526 	beq	r3,r2,14580 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1456c:	e0fffc17 	ldw	r3,-16(fp)
   14570:	e0bff617 	ldw	r2,-40(fp)
   14574:	1887c83a 	sub	r3,r3,r2
   14578:	e0ffff15 	stw	r3,-4(fp)
   1457c:	00000906 	br	145a4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   14580:	e0bffe17 	ldw	r2,-8(fp)
   14584:	1090000c 	andi	r2,r2,16384
   14588:	1005003a 	cmpeq	r2,r2,zero
   1458c:	1000031e 	bne	r2,zero,1459c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   14590:	00bffd44 	movi	r2,-11
   14594:	e0bfff15 	stw	r2,-4(fp)
   14598:	00000206 	br	145a4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1459c:	00bffec4 	movi	r2,-5
   145a0:	e0bfff15 	stw	r2,-4(fp)
   145a4:	e0bfff17 	ldw	r2,-4(fp)
}
   145a8:	e037883a 	mov	sp,fp
   145ac:	dfc00117 	ldw	ra,4(sp)
   145b0:	df000017 	ldw	fp,0(sp)
   145b4:	dec00204 	addi	sp,sp,8
   145b8:	f800283a 	ret

000145bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   145bc:	defff404 	addi	sp,sp,-48
   145c0:	df000b15 	stw	fp,44(sp)
   145c4:	df000b04 	addi	fp,sp,44
   145c8:	e13ffb15 	stw	r4,-20(fp)
   145cc:	e17ffc15 	stw	r5,-16(fp)
   145d0:	e1bffd15 	stw	r6,-12(fp)
   145d4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   145d8:	e03ff915 	stw	zero,-28(fp)
   145dc:	008000b4 	movhi	r2,2
   145e0:	10a39104 	addi	r2,r2,-29116
   145e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   145e8:	1005003a 	cmpeq	r2,r2,zero
   145ec:	1000411e 	bne	r2,zero,146f4 <alt_alarm_start+0x138>
  {
    if (alarm)
   145f0:	e0bffb17 	ldw	r2,-20(fp)
   145f4:	1005003a 	cmpeq	r2,r2,zero
   145f8:	10003b1e 	bne	r2,zero,146e8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   145fc:	e0fffb17 	ldw	r3,-20(fp)
   14600:	e0bffd17 	ldw	r2,-12(fp)
   14604:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   14608:	e0fffb17 	ldw	r3,-20(fp)
   1460c:	e0bffe17 	ldw	r2,-8(fp)
   14610:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14614:	0005303a 	rdctl	r2,status
   14618:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1461c:	e0fff817 	ldw	r3,-32(fp)
   14620:	00bfff84 	movi	r2,-2
   14624:	1884703a 	and	r2,r3,r2
   14628:	1001703a 	wrctl	status,r2
  
  return context;
   1462c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   14630:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14634:	008000b4 	movhi	r2,2
   14638:	10a39204 	addi	r2,r2,-29112
   1463c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14640:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14644:	e0fffc17 	ldw	r3,-16(fp)
   14648:	e0bff917 	ldw	r2,-28(fp)
   1464c:	1885883a 	add	r2,r3,r2
   14650:	10c00044 	addi	r3,r2,1
   14654:	e0bffb17 	ldw	r2,-20(fp)
   14658:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1465c:	e0bffb17 	ldw	r2,-20(fp)
   14660:	10c00217 	ldw	r3,8(r2)
   14664:	e0bff917 	ldw	r2,-28(fp)
   14668:	1880042e 	bgeu	r3,r2,1467c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1466c:	e0fffb17 	ldw	r3,-20(fp)
   14670:	00800044 	movi	r2,1
   14674:	18800405 	stb	r2,16(r3)
   14678:	00000206 	br	14684 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1467c:	e0bffb17 	ldw	r2,-20(fp)
   14680:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14684:	e0fffb17 	ldw	r3,-20(fp)
   14688:	00800074 	movhi	r2,1
   1468c:	109cf504 	addi	r2,r2,29652
   14690:	e0bff615 	stw	r2,-40(fp)
   14694:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14698:	e0fff717 	ldw	r3,-36(fp)
   1469c:	e0bff617 	ldw	r2,-40(fp)
   146a0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   146a4:	e0bff617 	ldw	r2,-40(fp)
   146a8:	10c00017 	ldw	r3,0(r2)
   146ac:	e0bff717 	ldw	r2,-36(fp)
   146b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   146b4:	e0bff617 	ldw	r2,-40(fp)
   146b8:	10c00017 	ldw	r3,0(r2)
   146bc:	e0bff717 	ldw	r2,-36(fp)
   146c0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   146c4:	e0fff617 	ldw	r3,-40(fp)
   146c8:	e0bff717 	ldw	r2,-36(fp)
   146cc:	18800015 	stw	r2,0(r3)
   146d0:	e0bffa17 	ldw	r2,-24(fp)
   146d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146d8:	e0bff517 	ldw	r2,-44(fp)
   146dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   146e0:	e03fff15 	stw	zero,-4(fp)
   146e4:	00000506 	br	146fc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   146e8:	00bffa84 	movi	r2,-22
   146ec:	e0bfff15 	stw	r2,-4(fp)
   146f0:	00000206 	br	146fc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   146f4:	00bfde84 	movi	r2,-134
   146f8:	e0bfff15 	stw	r2,-4(fp)
   146fc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   14700:	e037883a 	mov	sp,fp
   14704:	df000017 	ldw	fp,0(sp)
   14708:	dec00104 	addi	sp,sp,4
   1470c:	f800283a 	ret

00014710 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14710:	deffff04 	addi	sp,sp,-4
   14714:	df000015 	stw	fp,0(sp)
   14718:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1471c:	e037883a 	mov	sp,fp
   14720:	df000017 	ldw	fp,0(sp)
   14724:	dec00104 	addi	sp,sp,4
   14728:	f800283a 	ret

0001472c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1472c:	defff904 	addi	sp,sp,-28
   14730:	dfc00615 	stw	ra,24(sp)
   14734:	df000515 	stw	fp,20(sp)
   14738:	df000504 	addi	fp,sp,20
   1473c:	e13ffd15 	stw	r4,-12(fp)
   14740:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14744:	e0bffd17 	ldw	r2,-12(fp)
   14748:	1005003a 	cmpeq	r2,r2,zero
   1474c:	1000041e 	bne	r2,zero,14760 <alt_dev_llist_insert+0x34>
   14750:	e0bffd17 	ldw	r2,-12(fp)
   14754:	10800217 	ldw	r2,8(r2)
   14758:	1004c03a 	cmpne	r2,r2,zero
   1475c:	1000071e 	bne	r2,zero,1477c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   14760:	00147e00 	call	147e0 <alt_get_errno>
   14764:	1007883a 	mov	r3,r2
   14768:	00800584 	movi	r2,22
   1476c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14770:	00bffa84 	movi	r2,-22
   14774:	e0bfff15 	stw	r2,-4(fp)
   14778:	00001306 	br	147c8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1477c:	e0fffd17 	ldw	r3,-12(fp)
   14780:	e0bffe17 	ldw	r2,-8(fp)
   14784:	e0bffb15 	stw	r2,-20(fp)
   14788:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1478c:	e0fffc17 	ldw	r3,-16(fp)
   14790:	e0bffb17 	ldw	r2,-20(fp)
   14794:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14798:	e0bffb17 	ldw	r2,-20(fp)
   1479c:	10c00017 	ldw	r3,0(r2)
   147a0:	e0bffc17 	ldw	r2,-16(fp)
   147a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   147a8:	e0bffb17 	ldw	r2,-20(fp)
   147ac:	10c00017 	ldw	r3,0(r2)
   147b0:	e0bffc17 	ldw	r2,-16(fp)
   147b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   147b8:	e0fffb17 	ldw	r3,-20(fp)
   147bc:	e0bffc17 	ldw	r2,-16(fp)
   147c0:	18800015 	stw	r2,0(r3)

  return 0;  
   147c4:	e03fff15 	stw	zero,-4(fp)
   147c8:	e0bfff17 	ldw	r2,-4(fp)
}
   147cc:	e037883a 	mov	sp,fp
   147d0:	dfc00117 	ldw	ra,4(sp)
   147d4:	df000017 	ldw	fp,0(sp)
   147d8:	dec00204 	addi	sp,sp,8
   147dc:	f800283a 	ret

000147e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   147e0:	defffd04 	addi	sp,sp,-12
   147e4:	dfc00215 	stw	ra,8(sp)
   147e8:	df000115 	stw	fp,4(sp)
   147ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   147f0:	00800074 	movhi	r2,1
   147f4:	109cf204 	addi	r2,r2,29640
   147f8:	10800017 	ldw	r2,0(r2)
   147fc:	1005003a 	cmpeq	r2,r2,zero
   14800:	1000061e 	bne	r2,zero,1481c <alt_get_errno+0x3c>
   14804:	00800074 	movhi	r2,1
   14808:	109cf204 	addi	r2,r2,29640
   1480c:	10800017 	ldw	r2,0(r2)
   14810:	103ee83a 	callr	r2
   14814:	e0bfff15 	stw	r2,-4(fp)
   14818:	00000306 	br	14828 <alt_get_errno+0x48>
   1481c:	008000b4 	movhi	r2,2
   14820:	10a38c04 	addi	r2,r2,-29136
   14824:	e0bfff15 	stw	r2,-4(fp)
   14828:	e0bfff17 	ldw	r2,-4(fp)
}
   1482c:	e037883a 	mov	sp,fp
   14830:	dfc00117 	ldw	ra,4(sp)
   14834:	df000017 	ldw	fp,0(sp)
   14838:	dec00204 	addi	sp,sp,8
   1483c:	f800283a 	ret

00014840 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14840:	defffd04 	addi	sp,sp,-12
   14844:	dfc00215 	stw	ra,8(sp)
   14848:	df000115 	stw	fp,4(sp)
   1484c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14850:	00bfff04 	movi	r2,-4
   14854:	00c00074 	movhi	r3,1
   14858:	18d61e04 	addi	r3,r3,22648
   1485c:	1885883a 	add	r2,r3,r2
   14860:	e0bfff15 	stw	r2,-4(fp)
   14864:	00000606 	br	14880 <_do_ctors+0x40>
        (*ctor) (); 
   14868:	e0bfff17 	ldw	r2,-4(fp)
   1486c:	10800017 	ldw	r2,0(r2)
   14870:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14874:	e0bfff17 	ldw	r2,-4(fp)
   14878:	10bfff04 	addi	r2,r2,-4
   1487c:	e0bfff15 	stw	r2,-4(fp)
   14880:	e0ffff17 	ldw	r3,-4(fp)
   14884:	00800074 	movhi	r2,1
   14888:	10961d04 	addi	r2,r2,22644
   1488c:	18bff62e 	bgeu	r3,r2,14868 <_do_ctors+0x28>
        (*ctor) (); 
}
   14890:	e037883a 	mov	sp,fp
   14894:	dfc00117 	ldw	ra,4(sp)
   14898:	df000017 	ldw	fp,0(sp)
   1489c:	dec00204 	addi	sp,sp,8
   148a0:	f800283a 	ret

000148a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   148a4:	defffd04 	addi	sp,sp,-12
   148a8:	dfc00215 	stw	ra,8(sp)
   148ac:	df000115 	stw	fp,4(sp)
   148b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   148b4:	00bfff04 	movi	r2,-4
   148b8:	00c00074 	movhi	r3,1
   148bc:	18d61e04 	addi	r3,r3,22648
   148c0:	1885883a 	add	r2,r3,r2
   148c4:	e0bfff15 	stw	r2,-4(fp)
   148c8:	00000606 	br	148e4 <_do_dtors+0x40>
        (*dtor) (); 
   148cc:	e0bfff17 	ldw	r2,-4(fp)
   148d0:	10800017 	ldw	r2,0(r2)
   148d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   148d8:	e0bfff17 	ldw	r2,-4(fp)
   148dc:	10bfff04 	addi	r2,r2,-4
   148e0:	e0bfff15 	stw	r2,-4(fp)
   148e4:	e0ffff17 	ldw	r3,-4(fp)
   148e8:	00800074 	movhi	r2,1
   148ec:	10961e04 	addi	r2,r2,22648
   148f0:	18bff62e 	bgeu	r3,r2,148cc <_do_dtors+0x28>
        (*dtor) (); 
}
   148f4:	e037883a 	mov	sp,fp
   148f8:	dfc00117 	ldw	ra,4(sp)
   148fc:	df000017 	ldw	fp,0(sp)
   14900:	dec00204 	addi	sp,sp,8
   14904:	f800283a 	ret

00014908 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14908:	deffff04 	addi	sp,sp,-4
   1490c:	df000015 	stw	fp,0(sp)
   14910:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14914:	e037883a 	mov	sp,fp
   14918:	df000017 	ldw	fp,0(sp)
   1491c:	dec00104 	addi	sp,sp,4
   14920:	f800283a 	ret

00014924 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14924:	defff904 	addi	sp,sp,-28
   14928:	dfc00615 	stw	ra,24(sp)
   1492c:	df000515 	stw	fp,20(sp)
   14930:	df000504 	addi	fp,sp,20
   14934:	e13ffc15 	stw	r4,-16(fp)
   14938:	e17ffd15 	stw	r5,-12(fp)
   1493c:	e1bffe15 	stw	r6,-8(fp)
   14940:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14944:	e0800217 	ldw	r2,8(fp)
   14948:	d8800015 	stw	r2,0(sp)
   1494c:	e13ffc17 	ldw	r4,-16(fp)
   14950:	e17ffd17 	ldw	r5,-12(fp)
   14954:	e1bffe17 	ldw	r6,-8(fp)
   14958:	e1ffff17 	ldw	r7,-4(fp)
   1495c:	0014af80 	call	14af8 <alt_iic_isr_register>
}  
   14960:	e037883a 	mov	sp,fp
   14964:	dfc00117 	ldw	ra,4(sp)
   14968:	df000017 	ldw	fp,0(sp)
   1496c:	dec00204 	addi	sp,sp,8
   14970:	f800283a 	ret

00014974 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14974:	defff904 	addi	sp,sp,-28
   14978:	df000615 	stw	fp,24(sp)
   1497c:	df000604 	addi	fp,sp,24
   14980:	e13ffe15 	stw	r4,-8(fp)
   14984:	e17fff15 	stw	r5,-4(fp)
   14988:	e0bfff17 	ldw	r2,-4(fp)
   1498c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14990:	0005303a 	rdctl	r2,status
   14994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14998:	e0fffb17 	ldw	r3,-20(fp)
   1499c:	00bfff84 	movi	r2,-2
   149a0:	1884703a 	and	r2,r3,r2
   149a4:	1001703a 	wrctl	status,r2
  
  return context;
   149a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   149ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   149b0:	e0fffc17 	ldw	r3,-16(fp)
   149b4:	00800044 	movi	r2,1
   149b8:	10c4983a 	sll	r2,r2,r3
   149bc:	1007883a 	mov	r3,r2
   149c0:	008000b4 	movhi	r2,2
   149c4:	10a39004 	addi	r2,r2,-29120
   149c8:	10800017 	ldw	r2,0(r2)
   149cc:	1886b03a 	or	r3,r3,r2
   149d0:	008000b4 	movhi	r2,2
   149d4:	10a39004 	addi	r2,r2,-29120
   149d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   149dc:	008000b4 	movhi	r2,2
   149e0:	10a39004 	addi	r2,r2,-29120
   149e4:	10800017 	ldw	r2,0(r2)
   149e8:	100170fa 	wrctl	ienable,r2
   149ec:	e0bffd17 	ldw	r2,-12(fp)
   149f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149f4:	e0bffa17 	ldw	r2,-24(fp)
   149f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   149fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14a00:	e037883a 	mov	sp,fp
   14a04:	df000017 	ldw	fp,0(sp)
   14a08:	dec00104 	addi	sp,sp,4
   14a0c:	f800283a 	ret

00014a10 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14a10:	defff904 	addi	sp,sp,-28
   14a14:	df000615 	stw	fp,24(sp)
   14a18:	df000604 	addi	fp,sp,24
   14a1c:	e13ffe15 	stw	r4,-8(fp)
   14a20:	e17fff15 	stw	r5,-4(fp)
   14a24:	e0bfff17 	ldw	r2,-4(fp)
   14a28:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a2c:	0005303a 	rdctl	r2,status
   14a30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a34:	e0fffb17 	ldw	r3,-20(fp)
   14a38:	00bfff84 	movi	r2,-2
   14a3c:	1884703a 	and	r2,r3,r2
   14a40:	1001703a 	wrctl	status,r2
  
  return context;
   14a44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14a48:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   14a4c:	e0fffc17 	ldw	r3,-16(fp)
   14a50:	00800044 	movi	r2,1
   14a54:	10c4983a 	sll	r2,r2,r3
   14a58:	0084303a 	nor	r2,zero,r2
   14a5c:	1007883a 	mov	r3,r2
   14a60:	008000b4 	movhi	r2,2
   14a64:	10a39004 	addi	r2,r2,-29120
   14a68:	10800017 	ldw	r2,0(r2)
   14a6c:	1886703a 	and	r3,r3,r2
   14a70:	008000b4 	movhi	r2,2
   14a74:	10a39004 	addi	r2,r2,-29120
   14a78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14a7c:	008000b4 	movhi	r2,2
   14a80:	10a39004 	addi	r2,r2,-29120
   14a84:	10800017 	ldw	r2,0(r2)
   14a88:	100170fa 	wrctl	ienable,r2
   14a8c:	e0bffd17 	ldw	r2,-12(fp)
   14a90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a94:	e0bffa17 	ldw	r2,-24(fp)
   14a98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14a9c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14aa0:	e037883a 	mov	sp,fp
   14aa4:	df000017 	ldw	fp,0(sp)
   14aa8:	dec00104 	addi	sp,sp,4
   14aac:	f800283a 	ret

00014ab0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14ab0:	defffc04 	addi	sp,sp,-16
   14ab4:	df000315 	stw	fp,12(sp)
   14ab8:	df000304 	addi	fp,sp,12
   14abc:	e13ffe15 	stw	r4,-8(fp)
   14ac0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14ac4:	000530fa 	rdctl	r2,ienable
   14ac8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14acc:	e0ffff17 	ldw	r3,-4(fp)
   14ad0:	00800044 	movi	r2,1
   14ad4:	10c4983a 	sll	r2,r2,r3
   14ad8:	1007883a 	mov	r3,r2
   14adc:	e0bffd17 	ldw	r2,-12(fp)
   14ae0:	1884703a 	and	r2,r3,r2
   14ae4:	1004c03a 	cmpne	r2,r2,zero
}
   14ae8:	e037883a 	mov	sp,fp
   14aec:	df000017 	ldw	fp,0(sp)
   14af0:	dec00104 	addi	sp,sp,4
   14af4:	f800283a 	ret

00014af8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14af8:	defff404 	addi	sp,sp,-48
   14afc:	dfc00b15 	stw	ra,44(sp)
   14b00:	df000a15 	stw	fp,40(sp)
   14b04:	df000a04 	addi	fp,sp,40
   14b08:	e13ffb15 	stw	r4,-20(fp)
   14b0c:	e17ffc15 	stw	r5,-16(fp)
   14b10:	e1bffd15 	stw	r6,-12(fp)
   14b14:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   14b18:	00bffa84 	movi	r2,-22
   14b1c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14b20:	e0bffc17 	ldw	r2,-16(fp)
   14b24:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14b28:	e0bff917 	ldw	r2,-28(fp)
   14b2c:	10800808 	cmpgei	r2,r2,32
   14b30:	1000291e 	bne	r2,zero,14bd8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b34:	0005303a 	rdctl	r2,status
   14b38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b3c:	e0fff717 	ldw	r3,-36(fp)
   14b40:	00bfff84 	movi	r2,-2
   14b44:	1884703a 	and	r2,r3,r2
   14b48:	1001703a 	wrctl	status,r2
  
  return context;
   14b4c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14b50:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   14b54:	e0bff917 	ldw	r2,-28(fp)
   14b58:	00c000b4 	movhi	r3,2
   14b5c:	18e39d04 	addi	r3,r3,-29068
   14b60:	100490fa 	slli	r2,r2,3
   14b64:	10c7883a 	add	r3,r2,r3
   14b68:	e0bffd17 	ldw	r2,-12(fp)
   14b6c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   14b70:	e0bff917 	ldw	r2,-28(fp)
   14b74:	00c000b4 	movhi	r3,2
   14b78:	18e39d04 	addi	r3,r3,-29068
   14b7c:	100490fa 	slli	r2,r2,3
   14b80:	10c5883a 	add	r2,r2,r3
   14b84:	10c00104 	addi	r3,r2,4
   14b88:	e0bffe17 	ldw	r2,-8(fp)
   14b8c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14b90:	e0bffd17 	ldw	r2,-12(fp)
   14b94:	1005003a 	cmpeq	r2,r2,zero
   14b98:	1000051e 	bne	r2,zero,14bb0 <alt_iic_isr_register+0xb8>
   14b9c:	e17ff917 	ldw	r5,-28(fp)
   14ba0:	e13ffb17 	ldw	r4,-20(fp)
   14ba4:	00149740 	call	14974 <alt_ic_irq_enable>
   14ba8:	e0bfff15 	stw	r2,-4(fp)
   14bac:	00000406 	br	14bc0 <alt_iic_isr_register+0xc8>
   14bb0:	e17ff917 	ldw	r5,-28(fp)
   14bb4:	e13ffb17 	ldw	r4,-20(fp)
   14bb8:	0014a100 	call	14a10 <alt_ic_irq_disable>
   14bbc:	e0bfff15 	stw	r2,-4(fp)
   14bc0:	e0bfff17 	ldw	r2,-4(fp)
   14bc4:	e0bffa15 	stw	r2,-24(fp)
   14bc8:	e0bff817 	ldw	r2,-32(fp)
   14bcc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bd0:	e0bff617 	ldw	r2,-40(fp)
   14bd4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14bd8:	e0bffa17 	ldw	r2,-24(fp)
}
   14bdc:	e037883a 	mov	sp,fp
   14be0:	dfc00117 	ldw	ra,4(sp)
   14be4:	df000017 	ldw	fp,0(sp)
   14be8:	dec00204 	addi	sp,sp,8
   14bec:	f800283a 	ret

00014bf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14bf0:	defff804 	addi	sp,sp,-32
   14bf4:	dfc00715 	stw	ra,28(sp)
   14bf8:	df000615 	stw	fp,24(sp)
   14bfc:	dc000515 	stw	r16,20(sp)
   14c00:	df000504 	addi	fp,sp,20
   14c04:	e13ffc15 	stw	r4,-16(fp)
   14c08:	e17ffd15 	stw	r5,-12(fp)
   14c0c:	e1bffe15 	stw	r6,-8(fp)
   14c10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14c14:	e13ffd17 	ldw	r4,-12(fp)
   14c18:	e17ffe17 	ldw	r5,-8(fp)
   14c1c:	e1bfff17 	ldw	r6,-4(fp)
   14c20:	0014e380 	call	14e38 <open>
   14c24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14c28:	e0bffb17 	ldw	r2,-20(fp)
   14c2c:	1004803a 	cmplt	r2,r2,zero
   14c30:	10001f1e 	bne	r2,zero,14cb0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   14c34:	e13ffb17 	ldw	r4,-20(fp)
   14c38:	04000074 	movhi	r16,1
   14c3c:	84187104 	addi	r16,r16,25028
   14c40:	01400304 	movi	r5,12
   14c44:	0012f180 	call	12f18 <__mulsi3>
   14c48:	1405883a 	add	r2,r2,r16
   14c4c:	10c00017 	ldw	r3,0(r2)
   14c50:	e0bffc17 	ldw	r2,-16(fp)
   14c54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14c58:	e13ffb17 	ldw	r4,-20(fp)
   14c5c:	04000074 	movhi	r16,1
   14c60:	84187104 	addi	r16,r16,25028
   14c64:	01400304 	movi	r5,12
   14c68:	0012f180 	call	12f18 <__mulsi3>
   14c6c:	1405883a 	add	r2,r2,r16
   14c70:	10800104 	addi	r2,r2,4
   14c74:	10c00017 	ldw	r3,0(r2)
   14c78:	e0bffc17 	ldw	r2,-16(fp)
   14c7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14c80:	e13ffb17 	ldw	r4,-20(fp)
   14c84:	04000074 	movhi	r16,1
   14c88:	84187104 	addi	r16,r16,25028
   14c8c:	01400304 	movi	r5,12
   14c90:	0012f180 	call	12f18 <__mulsi3>
   14c94:	1405883a 	add	r2,r2,r16
   14c98:	10800204 	addi	r2,r2,8
   14c9c:	10c00017 	ldw	r3,0(r2)
   14ca0:	e0bffc17 	ldw	r2,-16(fp)
   14ca4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14ca8:	e13ffb17 	ldw	r4,-20(fp)
   14cac:	00137a80 	call	137a8 <alt_release_fd>
  }
} 
   14cb0:	e037883a 	mov	sp,fp
   14cb4:	dfc00217 	ldw	ra,8(sp)
   14cb8:	df000117 	ldw	fp,4(sp)
   14cbc:	dc000017 	ldw	r16,0(sp)
   14cc0:	dec00304 	addi	sp,sp,12
   14cc4:	f800283a 	ret

00014cc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14cc8:	defffb04 	addi	sp,sp,-20
   14ccc:	dfc00415 	stw	ra,16(sp)
   14cd0:	df000315 	stw	fp,12(sp)
   14cd4:	df000304 	addi	fp,sp,12
   14cd8:	e13ffd15 	stw	r4,-12(fp)
   14cdc:	e17ffe15 	stw	r5,-8(fp)
   14ce0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14ce4:	01000074 	movhi	r4,1
   14ce8:	21187404 	addi	r4,r4,25040
   14cec:	e17ffd17 	ldw	r5,-12(fp)
   14cf0:	01800044 	movi	r6,1
   14cf4:	01c07fc4 	movi	r7,511
   14cf8:	0014bf00 	call	14bf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14cfc:	01000074 	movhi	r4,1
   14d00:	21187104 	addi	r4,r4,25028
   14d04:	e17ffe17 	ldw	r5,-8(fp)
   14d08:	000d883a 	mov	r6,zero
   14d0c:	01c07fc4 	movi	r7,511
   14d10:	0014bf00 	call	14bf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14d14:	01000074 	movhi	r4,1
   14d18:	21187704 	addi	r4,r4,25052
   14d1c:	e17fff17 	ldw	r5,-4(fp)
   14d20:	01800044 	movi	r6,1
   14d24:	01c07fc4 	movi	r7,511
   14d28:	0014bf00 	call	14bf0 <alt_open_fd>
}  
   14d2c:	e037883a 	mov	sp,fp
   14d30:	dfc00117 	ldw	ra,4(sp)
   14d34:	df000017 	ldw	fp,0(sp)
   14d38:	dec00204 	addi	sp,sp,8
   14d3c:	f800283a 	ret

00014d40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14d40:	defffa04 	addi	sp,sp,-24
   14d44:	dfc00515 	stw	ra,20(sp)
   14d48:	df000415 	stw	fp,16(sp)
   14d4c:	dc000315 	stw	r16,12(sp)
   14d50:	df000304 	addi	fp,sp,12
   14d54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14d58:	e0bffe17 	ldw	r2,-8(fp)
   14d5c:	10800217 	ldw	r2,8(r2)
   14d60:	10d00034 	orhi	r3,r2,16384
   14d64:	e0bffe17 	ldw	r2,-8(fp)
   14d68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14d6c:	e03ffd15 	stw	zero,-12(fp)
   14d70:	00002306 	br	14e00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14d74:	e13ffd17 	ldw	r4,-12(fp)
   14d78:	04000074 	movhi	r16,1
   14d7c:	84187104 	addi	r16,r16,25028
   14d80:	01400304 	movi	r5,12
   14d84:	0012f180 	call	12f18 <__mulsi3>
   14d88:	1405883a 	add	r2,r2,r16
   14d8c:	10c00017 	ldw	r3,0(r2)
   14d90:	e0bffe17 	ldw	r2,-8(fp)
   14d94:	10800017 	ldw	r2,0(r2)
   14d98:	1880161e 	bne	r3,r2,14df4 <alt_file_locked+0xb4>
   14d9c:	e13ffd17 	ldw	r4,-12(fp)
   14da0:	04000074 	movhi	r16,1
   14da4:	84187104 	addi	r16,r16,25028
   14da8:	01400304 	movi	r5,12
   14dac:	0012f180 	call	12f18 <__mulsi3>
   14db0:	1405883a 	add	r2,r2,r16
   14db4:	10800204 	addi	r2,r2,8
   14db8:	10800017 	ldw	r2,0(r2)
   14dbc:	1004403a 	cmpge	r2,r2,zero
   14dc0:	10000c1e 	bne	r2,zero,14df4 <alt_file_locked+0xb4>
   14dc4:	e13ffd17 	ldw	r4,-12(fp)
   14dc8:	01400304 	movi	r5,12
   14dcc:	0012f180 	call	12f18 <__mulsi3>
   14dd0:	1007883a 	mov	r3,r2
   14dd4:	00800074 	movhi	r2,1
   14dd8:	10987104 	addi	r2,r2,25028
   14ddc:	1887883a 	add	r3,r3,r2
   14de0:	e0bffe17 	ldw	r2,-8(fp)
   14de4:	18800326 	beq	r3,r2,14df4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14de8:	00bffcc4 	movi	r2,-13
   14dec:	e0bfff15 	stw	r2,-4(fp)
   14df0:	00000a06 	br	14e1c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14df4:	e0bffd17 	ldw	r2,-12(fp)
   14df8:	10800044 	addi	r2,r2,1
   14dfc:	e0bffd15 	stw	r2,-12(fp)
   14e00:	00800074 	movhi	r2,1
   14e04:	109cf104 	addi	r2,r2,29636
   14e08:	10800017 	ldw	r2,0(r2)
   14e0c:	1007883a 	mov	r3,r2
   14e10:	e0bffd17 	ldw	r2,-12(fp)
   14e14:	18bfd72e 	bgeu	r3,r2,14d74 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14e18:	e03fff15 	stw	zero,-4(fp)
   14e1c:	e0bfff17 	ldw	r2,-4(fp)
}
   14e20:	e037883a 	mov	sp,fp
   14e24:	dfc00217 	ldw	ra,8(sp)
   14e28:	df000117 	ldw	fp,4(sp)
   14e2c:	dc000017 	ldw	r16,0(sp)
   14e30:	dec00304 	addi	sp,sp,12
   14e34:	f800283a 	ret

00014e38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14e38:	defff404 	addi	sp,sp,-48
   14e3c:	dfc00b15 	stw	ra,44(sp)
   14e40:	df000a15 	stw	fp,40(sp)
   14e44:	df000a04 	addi	fp,sp,40
   14e48:	e13ffb15 	stw	r4,-20(fp)
   14e4c:	e17ffc15 	stw	r5,-16(fp)
   14e50:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14e54:	00bfffc4 	movi	r2,-1
   14e58:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   14e5c:	00bffb44 	movi	r2,-19
   14e60:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   14e64:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14e68:	e13ffb17 	ldw	r4,-20(fp)
   14e6c:	01400074 	movhi	r5,1
   14e70:	295cef04 	addi	r5,r5,29628
   14e74:	00151e80 	call	151e8 <alt_find_dev>
   14e78:	e0bffa15 	stw	r2,-24(fp)
   14e7c:	e0bffa17 	ldw	r2,-24(fp)
   14e80:	1004c03a 	cmpne	r2,r2,zero
   14e84:	1000051e 	bne	r2,zero,14e9c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14e88:	e13ffb17 	ldw	r4,-20(fp)
   14e8c:	001527c0 	call	1527c <alt_find_file>
   14e90:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   14e94:	00800044 	movi	r2,1
   14e98:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14e9c:	e0bffa17 	ldw	r2,-24(fp)
   14ea0:	1005003a 	cmpeq	r2,r2,zero
   14ea4:	1000311e 	bne	r2,zero,14f6c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14ea8:	e13ffa17 	ldw	r4,-24(fp)
   14eac:	001539c0 	call	1539c <alt_get_fd>
   14eb0:	e0bff815 	stw	r2,-32(fp)
   14eb4:	e0bff817 	ldw	r2,-32(fp)
   14eb8:	1004403a 	cmpge	r2,r2,zero
   14ebc:	1000031e 	bne	r2,zero,14ecc <open+0x94>
    {
      status = index;
   14ec0:	e0bff817 	ldw	r2,-32(fp)
   14ec4:	e0bff715 	stw	r2,-36(fp)
   14ec8:	00002a06 	br	14f74 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   14ecc:	e13ff817 	ldw	r4,-32(fp)
   14ed0:	01400304 	movi	r5,12
   14ed4:	0012f180 	call	12f18 <__mulsi3>
   14ed8:	1007883a 	mov	r3,r2
   14edc:	00800074 	movhi	r2,1
   14ee0:	10987104 	addi	r2,r2,25028
   14ee4:	1885883a 	add	r2,r3,r2
   14ee8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14eec:	e0fffc17 	ldw	r3,-16(fp)
   14ef0:	00900034 	movhi	r2,16384
   14ef4:	10bfffc4 	addi	r2,r2,-1
   14ef8:	1886703a 	and	r3,r3,r2
   14efc:	e0bff917 	ldw	r2,-28(fp)
   14f00:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14f04:	e0bff617 	ldw	r2,-40(fp)
   14f08:	1004c03a 	cmpne	r2,r2,zero
   14f0c:	1000061e 	bne	r2,zero,14f28 <open+0xf0>
   14f10:	e13ff917 	ldw	r4,-28(fp)
   14f14:	0014d400 	call	14d40 <alt_file_locked>
   14f18:	e0bff715 	stw	r2,-36(fp)
   14f1c:	e0bff717 	ldw	r2,-36(fp)
   14f20:	1004803a 	cmplt	r2,r2,zero
   14f24:	1000131e 	bne	r2,zero,14f74 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14f28:	e0bffa17 	ldw	r2,-24(fp)
   14f2c:	10800317 	ldw	r2,12(r2)
   14f30:	1005003a 	cmpeq	r2,r2,zero
   14f34:	1000091e 	bne	r2,zero,14f5c <open+0x124>
   14f38:	e0bffa17 	ldw	r2,-24(fp)
   14f3c:	10800317 	ldw	r2,12(r2)
   14f40:	e13ff917 	ldw	r4,-28(fp)
   14f44:	e17ffb17 	ldw	r5,-20(fp)
   14f48:	e1bffc17 	ldw	r6,-16(fp)
   14f4c:	e1fffd17 	ldw	r7,-12(fp)
   14f50:	103ee83a 	callr	r2
   14f54:	e0bfff15 	stw	r2,-4(fp)
   14f58:	00000106 	br	14f60 <open+0x128>
   14f5c:	e03fff15 	stw	zero,-4(fp)
   14f60:	e0bfff17 	ldw	r2,-4(fp)
   14f64:	e0bff715 	stw	r2,-36(fp)
   14f68:	00000206 	br	14f74 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14f6c:	00bffb44 	movi	r2,-19
   14f70:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14f74:	e0bff717 	ldw	r2,-36(fp)
   14f78:	1004403a 	cmpge	r2,r2,zero
   14f7c:	1000091e 	bne	r2,zero,14fa4 <open+0x16c>
  {
    alt_release_fd (index);  
   14f80:	e13ff817 	ldw	r4,-32(fp)
   14f84:	00137a80 	call	137a8 <alt_release_fd>
    ALT_ERRNO = -status;
   14f88:	0014fc40 	call	14fc4 <alt_get_errno>
   14f8c:	e0fff717 	ldw	r3,-36(fp)
   14f90:	00c7c83a 	sub	r3,zero,r3
   14f94:	10c00015 	stw	r3,0(r2)
    return -1;
   14f98:	00bfffc4 	movi	r2,-1
   14f9c:	e0bffe15 	stw	r2,-8(fp)
   14fa0:	00000206 	br	14fac <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   14fa4:	e0bff817 	ldw	r2,-32(fp)
   14fa8:	e0bffe15 	stw	r2,-8(fp)
   14fac:	e0bffe17 	ldw	r2,-8(fp)
}
   14fb0:	e037883a 	mov	sp,fp
   14fb4:	dfc00117 	ldw	ra,4(sp)
   14fb8:	df000017 	ldw	fp,0(sp)
   14fbc:	dec00204 	addi	sp,sp,8
   14fc0:	f800283a 	ret

00014fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14fc4:	defffd04 	addi	sp,sp,-12
   14fc8:	dfc00215 	stw	ra,8(sp)
   14fcc:	df000115 	stw	fp,4(sp)
   14fd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14fd4:	00800074 	movhi	r2,1
   14fd8:	109cf204 	addi	r2,r2,29640
   14fdc:	10800017 	ldw	r2,0(r2)
   14fe0:	1005003a 	cmpeq	r2,r2,zero
   14fe4:	1000061e 	bne	r2,zero,15000 <alt_get_errno+0x3c>
   14fe8:	00800074 	movhi	r2,1
   14fec:	109cf204 	addi	r2,r2,29640
   14ff0:	10800017 	ldw	r2,0(r2)
   14ff4:	103ee83a 	callr	r2
   14ff8:	e0bfff15 	stw	r2,-4(fp)
   14ffc:	00000306 	br	1500c <alt_get_errno+0x48>
   15000:	008000b4 	movhi	r2,2
   15004:	10a38c04 	addi	r2,r2,-29136
   15008:	e0bfff15 	stw	r2,-4(fp)
   1500c:	e0bfff17 	ldw	r2,-4(fp)
}
   15010:	e037883a 	mov	sp,fp
   15014:	dfc00117 	ldw	ra,4(sp)
   15018:	df000017 	ldw	fp,0(sp)
   1501c:	dec00204 	addi	sp,sp,8
   15020:	f800283a 	ret

00015024 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15024:	defffa04 	addi	sp,sp,-24
   15028:	df000515 	stw	fp,20(sp)
   1502c:	df000504 	addi	fp,sp,20
   15030:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15034:	0005303a 	rdctl	r2,status
   15038:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1503c:	e0fffd17 	ldw	r3,-12(fp)
   15040:	00bfff84 	movi	r2,-2
   15044:	1884703a 	and	r2,r3,r2
   15048:	1001703a 	wrctl	status,r2
  
  return context;
   1504c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15050:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   15054:	e0bfff17 	ldw	r2,-4(fp)
   15058:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1505c:	e0bffc17 	ldw	r2,-16(fp)
   15060:	10c00017 	ldw	r3,0(r2)
   15064:	e0bffc17 	ldw	r2,-16(fp)
   15068:	10800117 	ldw	r2,4(r2)
   1506c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   15070:	e0bffc17 	ldw	r2,-16(fp)
   15074:	10c00117 	ldw	r3,4(r2)
   15078:	e0bffc17 	ldw	r2,-16(fp)
   1507c:	10800017 	ldw	r2,0(r2)
   15080:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15084:	e0fffc17 	ldw	r3,-16(fp)
   15088:	e0bffc17 	ldw	r2,-16(fp)
   1508c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   15090:	e0fffc17 	ldw	r3,-16(fp)
   15094:	e0bffc17 	ldw	r2,-16(fp)
   15098:	18800015 	stw	r2,0(r3)
   1509c:	e0bffe17 	ldw	r2,-8(fp)
   150a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150a4:	e0bffb17 	ldw	r2,-20(fp)
   150a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   150ac:	e037883a 	mov	sp,fp
   150b0:	df000017 	ldw	fp,0(sp)
   150b4:	dec00104 	addi	sp,sp,4
   150b8:	f800283a 	ret

000150bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   150bc:	defffb04 	addi	sp,sp,-20
   150c0:	dfc00415 	stw	ra,16(sp)
   150c4:	df000315 	stw	fp,12(sp)
   150c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   150cc:	d0a00c17 	ldw	r2,-32720(gp)
   150d0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   150d4:	d0a6a917 	ldw	r2,-25948(gp)
   150d8:	10800044 	addi	r2,r2,1
   150dc:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   150e0:	00003106 	br	151a8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   150e4:	e0bffe17 	ldw	r2,-8(fp)
   150e8:	10800017 	ldw	r2,0(r2)
   150ec:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   150f0:	e0bffe17 	ldw	r2,-8(fp)
   150f4:	10800403 	ldbu	r2,16(r2)
   150f8:	10803fcc 	andi	r2,r2,255
   150fc:	1005003a 	cmpeq	r2,r2,zero
   15100:	1000051e 	bne	r2,zero,15118 <alt_tick+0x5c>
   15104:	d0a6a917 	ldw	r2,-25948(gp)
   15108:	1004c03a 	cmpne	r2,r2,zero
   1510c:	1000021e 	bne	r2,zero,15118 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   15110:	e0bffe17 	ldw	r2,-8(fp)
   15114:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15118:	e0bffe17 	ldw	r2,-8(fp)
   1511c:	10c00217 	ldw	r3,8(r2)
   15120:	d0a6a917 	ldw	r2,-25948(gp)
   15124:	10c01e36 	bltu	r2,r3,151a0 <alt_tick+0xe4>
   15128:	e0bffe17 	ldw	r2,-8(fp)
   1512c:	10800403 	ldbu	r2,16(r2)
   15130:	10803fcc 	andi	r2,r2,255
   15134:	1004c03a 	cmpne	r2,r2,zero
   15138:	1000191e 	bne	r2,zero,151a0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1513c:	e0bffe17 	ldw	r2,-8(fp)
   15140:	10c00317 	ldw	r3,12(r2)
   15144:	e0bffe17 	ldw	r2,-8(fp)
   15148:	11000517 	ldw	r4,20(r2)
   1514c:	183ee83a 	callr	r3
   15150:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15154:	e0bffd17 	ldw	r2,-12(fp)
   15158:	1004c03a 	cmpne	r2,r2,zero
   1515c:	1000031e 	bne	r2,zero,1516c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   15160:	e13ffe17 	ldw	r4,-8(fp)
   15164:	00150240 	call	15024 <alt_alarm_stop>
   15168:	00000d06 	br	151a0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1516c:	e0bffe17 	ldw	r2,-8(fp)
   15170:	10c00217 	ldw	r3,8(r2)
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	1887883a 	add	r3,r3,r2
   1517c:	e0bffe17 	ldw	r2,-8(fp)
   15180:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15184:	e0bffe17 	ldw	r2,-8(fp)
   15188:	10c00217 	ldw	r3,8(r2)
   1518c:	d0a6a917 	ldw	r2,-25948(gp)
   15190:	1880032e 	bgeu	r3,r2,151a0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   15194:	e0fffe17 	ldw	r3,-8(fp)
   15198:	00800044 	movi	r2,1
   1519c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   151a0:	e0bfff17 	ldw	r2,-4(fp)
   151a4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   151a8:	d0e00c04 	addi	r3,gp,-32720
   151ac:	e0bffe17 	ldw	r2,-8(fp)
   151b0:	10ffcc1e 	bne	r2,r3,150e4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   151b4:	e037883a 	mov	sp,fp
   151b8:	dfc00117 	ldw	ra,4(sp)
   151bc:	df000017 	ldw	fp,0(sp)
   151c0:	dec00204 	addi	sp,sp,8
   151c4:	f800283a 	ret

000151c8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   151c8:	deffff04 	addi	sp,sp,-4
   151cc:	df000015 	stw	fp,0(sp)
   151d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   151d4:	000170fa 	wrctl	ienable,zero
}
   151d8:	e037883a 	mov	sp,fp
   151dc:	df000017 	ldw	fp,0(sp)
   151e0:	dec00104 	addi	sp,sp,4
   151e4:	f800283a 	ret

000151e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   151e8:	defff904 	addi	sp,sp,-28
   151ec:	dfc00615 	stw	ra,24(sp)
   151f0:	df000515 	stw	fp,20(sp)
   151f4:	df000504 	addi	fp,sp,20
   151f8:	e13ffd15 	stw	r4,-12(fp)
   151fc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15200:	e0bffe17 	ldw	r2,-8(fp)
   15204:	10800017 	ldw	r2,0(r2)
   15208:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1520c:	e13ffd17 	ldw	r4,-12(fp)
   15210:	0010e380 	call	10e38 <strlen>
   15214:	10800044 	addi	r2,r2,1
   15218:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1521c:	00000d06 	br	15254 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15220:	e0bffc17 	ldw	r2,-16(fp)
   15224:	11000217 	ldw	r4,8(r2)
   15228:	e1bffb17 	ldw	r6,-20(fp)
   1522c:	e17ffd17 	ldw	r5,-12(fp)
   15230:	00154b80 	call	154b8 <memcmp>
   15234:	1004c03a 	cmpne	r2,r2,zero
   15238:	1000031e 	bne	r2,zero,15248 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1523c:	e0bffc17 	ldw	r2,-16(fp)
   15240:	e0bfff15 	stw	r2,-4(fp)
   15244:	00000706 	br	15264 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15248:	e0bffc17 	ldw	r2,-16(fp)
   1524c:	10800017 	ldw	r2,0(r2)
   15250:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15254:	e0fffe17 	ldw	r3,-8(fp)
   15258:	e0bffc17 	ldw	r2,-16(fp)
   1525c:	10fff01e 	bne	r2,r3,15220 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15260:	e03fff15 	stw	zero,-4(fp)
   15264:	e0bfff17 	ldw	r2,-4(fp)
}
   15268:	e037883a 	mov	sp,fp
   1526c:	dfc00117 	ldw	ra,4(sp)
   15270:	df000017 	ldw	fp,0(sp)
   15274:	dec00204 	addi	sp,sp,8
   15278:	f800283a 	ret

0001527c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1527c:	defffa04 	addi	sp,sp,-24
   15280:	dfc00515 	stw	ra,20(sp)
   15284:	df000415 	stw	fp,16(sp)
   15288:	df000404 	addi	fp,sp,16
   1528c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15290:	00800074 	movhi	r2,1
   15294:	109ced04 	addi	r2,r2,29620
   15298:	10800017 	ldw	r2,0(r2)
   1529c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   152a0:	00003306 	br	15370 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   152a4:	e0bffd17 	ldw	r2,-12(fp)
   152a8:	11000217 	ldw	r4,8(r2)
   152ac:	0010e380 	call	10e38 <strlen>
   152b0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   152b4:	e0bffd17 	ldw	r2,-12(fp)
   152b8:	10c00217 	ldw	r3,8(r2)
   152bc:	e0bffc17 	ldw	r2,-16(fp)
   152c0:	1885883a 	add	r2,r3,r2
   152c4:	10bfffc4 	addi	r2,r2,-1
   152c8:	10800003 	ldbu	r2,0(r2)
   152cc:	10803fcc 	andi	r2,r2,255
   152d0:	1080201c 	xori	r2,r2,128
   152d4:	10bfe004 	addi	r2,r2,-128
   152d8:	10800bd8 	cmpnei	r2,r2,47
   152dc:	1000031e 	bne	r2,zero,152ec <alt_find_file+0x70>
    {
      len -= 1;
   152e0:	e0bffc17 	ldw	r2,-16(fp)
   152e4:	10bfffc4 	addi	r2,r2,-1
   152e8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   152ec:	e0bffc17 	ldw	r2,-16(fp)
   152f0:	1007883a 	mov	r3,r2
   152f4:	e0bffe17 	ldw	r2,-8(fp)
   152f8:	1885883a 	add	r2,r3,r2
   152fc:	10800003 	ldbu	r2,0(r2)
   15300:	10803fcc 	andi	r2,r2,255
   15304:	1080201c 	xori	r2,r2,128
   15308:	10bfe004 	addi	r2,r2,-128
   1530c:	10800be0 	cmpeqi	r2,r2,47
   15310:	10000a1e 	bne	r2,zero,1533c <alt_find_file+0xc0>
   15314:	e0bffc17 	ldw	r2,-16(fp)
   15318:	1007883a 	mov	r3,r2
   1531c:	e0bffe17 	ldw	r2,-8(fp)
   15320:	1885883a 	add	r2,r3,r2
   15324:	10800003 	ldbu	r2,0(r2)
   15328:	10803fcc 	andi	r2,r2,255
   1532c:	1080201c 	xori	r2,r2,128
   15330:	10bfe004 	addi	r2,r2,-128
   15334:	1004c03a 	cmpne	r2,r2,zero
   15338:	10000a1e 	bne	r2,zero,15364 <alt_find_file+0xe8>
   1533c:	e0bffd17 	ldw	r2,-12(fp)
   15340:	11000217 	ldw	r4,8(r2)
   15344:	e1bffc17 	ldw	r6,-16(fp)
   15348:	e17ffe17 	ldw	r5,-8(fp)
   1534c:	00154b80 	call	154b8 <memcmp>
   15350:	1004c03a 	cmpne	r2,r2,zero
   15354:	1000031e 	bne	r2,zero,15364 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15358:	e0bffd17 	ldw	r2,-12(fp)
   1535c:	e0bfff15 	stw	r2,-4(fp)
   15360:	00000806 	br	15384 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   15364:	e0bffd17 	ldw	r2,-12(fp)
   15368:	10800017 	ldw	r2,0(r2)
   1536c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15370:	00c00074 	movhi	r3,1
   15374:	18dced04 	addi	r3,r3,29620
   15378:	e0bffd17 	ldw	r2,-12(fp)
   1537c:	10ffc91e 	bne	r2,r3,152a4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15380:	e03fff15 	stw	zero,-4(fp)
   15384:	e0bfff17 	ldw	r2,-4(fp)
}
   15388:	e037883a 	mov	sp,fp
   1538c:	dfc00117 	ldw	ra,4(sp)
   15390:	df000017 	ldw	fp,0(sp)
   15394:	dec00204 	addi	sp,sp,8
   15398:	f800283a 	ret

0001539c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1539c:	defffa04 	addi	sp,sp,-24
   153a0:	dfc00515 	stw	ra,20(sp)
   153a4:	df000415 	stw	fp,16(sp)
   153a8:	dc000315 	stw	r16,12(sp)
   153ac:	df000304 	addi	fp,sp,12
   153b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   153b4:	00bffa04 	movi	r2,-24
   153b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   153bc:	e03ffe15 	stw	zero,-8(fp)
   153c0:	00002006 	br	15444 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   153c4:	e13ffe17 	ldw	r4,-8(fp)
   153c8:	04000074 	movhi	r16,1
   153cc:	84187104 	addi	r16,r16,25028
   153d0:	01400304 	movi	r5,12
   153d4:	0012f180 	call	12f18 <__mulsi3>
   153d8:	1405883a 	add	r2,r2,r16
   153dc:	10800017 	ldw	r2,0(r2)
   153e0:	1004c03a 	cmpne	r2,r2,zero
   153e4:	1000141e 	bne	r2,zero,15438 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   153e8:	e13ffe17 	ldw	r4,-8(fp)
   153ec:	04000074 	movhi	r16,1
   153f0:	84187104 	addi	r16,r16,25028
   153f4:	01400304 	movi	r5,12
   153f8:	0012f180 	call	12f18 <__mulsi3>
   153fc:	1407883a 	add	r3,r2,r16
   15400:	e0bfff17 	ldw	r2,-4(fp)
   15404:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   15408:	00800074 	movhi	r2,1
   1540c:	109cf104 	addi	r2,r2,29636
   15410:	10c00017 	ldw	r3,0(r2)
   15414:	e0bffe17 	ldw	r2,-8(fp)
   15418:	1880040e 	bge	r3,r2,1542c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   1541c:	00c00074 	movhi	r3,1
   15420:	18dcf104 	addi	r3,r3,29636
   15424:	e0bffe17 	ldw	r2,-8(fp)
   15428:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1542c:	e0bffe17 	ldw	r2,-8(fp)
   15430:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15434:	00000606 	br	15450 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15438:	e0bffe17 	ldw	r2,-8(fp)
   1543c:	10800044 	addi	r2,r2,1
   15440:	e0bffe15 	stw	r2,-8(fp)
   15444:	e0bffe17 	ldw	r2,-8(fp)
   15448:	10800810 	cmplti	r2,r2,32
   1544c:	103fdd1e 	bne	r2,zero,153c4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15450:	e0bffd17 	ldw	r2,-12(fp)
}
   15454:	e037883a 	mov	sp,fp
   15458:	dfc00217 	ldw	ra,8(sp)
   1545c:	df000117 	ldw	fp,4(sp)
   15460:	dc000017 	ldw	r16,0(sp)
   15464:	dec00304 	addi	sp,sp,12
   15468:	f800283a 	ret

0001546c <atexit>:
   1546c:	200b883a 	mov	r5,r4
   15470:	000d883a 	mov	r6,zero
   15474:	0009883a 	mov	r4,zero
   15478:	000f883a 	mov	r7,zero
   1547c:	001552c1 	jmpi	1552c <__register_exitproc>

00015480 <exit>:
   15480:	defffe04 	addi	sp,sp,-8
   15484:	000b883a 	mov	r5,zero
   15488:	dc000015 	stw	r16,0(sp)
   1548c:	dfc00115 	stw	ra,4(sp)
   15490:	2021883a 	mov	r16,r4
   15494:	00156640 	call	15664 <__call_exitprocs>
   15498:	00800074 	movhi	r2,1
   1549c:	109cec04 	addi	r2,r2,29616
   154a0:	11000017 	ldw	r4,0(r2)
   154a4:	20800f17 	ldw	r2,60(r4)
   154a8:	10000126 	beq	r2,zero,154b0 <exit+0x30>
   154ac:	103ee83a 	callr	r2
   154b0:	8009883a 	mov	r4,r16
   154b4:	00158540 	call	15854 <_exit>

000154b8 <memcmp>:
   154b8:	00c000c4 	movi	r3,3
   154bc:	1980032e 	bgeu	r3,r6,154cc <memcmp+0x14>
   154c0:	2144b03a 	or	r2,r4,r5
   154c4:	10c4703a 	and	r2,r2,r3
   154c8:	10000f26 	beq	r2,zero,15508 <memcmp+0x50>
   154cc:	31ffffc4 	addi	r7,r6,-1
   154d0:	3000061e 	bne	r6,zero,154ec <memcmp+0x34>
   154d4:	00000a06 	br	15500 <memcmp+0x48>
   154d8:	39ffffc4 	addi	r7,r7,-1
   154dc:	00bfffc4 	movi	r2,-1
   154e0:	21000044 	addi	r4,r4,1
   154e4:	29400044 	addi	r5,r5,1
   154e8:	38800526 	beq	r7,r2,15500 <memcmp+0x48>
   154ec:	20c00003 	ldbu	r3,0(r4)
   154f0:	28800003 	ldbu	r2,0(r5)
   154f4:	18bff826 	beq	r3,r2,154d8 <memcmp+0x20>
   154f8:	1885c83a 	sub	r2,r3,r2
   154fc:	f800283a 	ret
   15500:	0005883a 	mov	r2,zero
   15504:	f800283a 	ret
   15508:	180f883a 	mov	r7,r3
   1550c:	20c00017 	ldw	r3,0(r4)
   15510:	28800017 	ldw	r2,0(r5)
   15514:	18bfed1e 	bne	r3,r2,154cc <memcmp+0x14>
   15518:	31bfff04 	addi	r6,r6,-4
   1551c:	21000104 	addi	r4,r4,4
   15520:	29400104 	addi	r5,r5,4
   15524:	39bff936 	bltu	r7,r6,1550c <memcmp+0x54>
   15528:	003fe806 	br	154cc <memcmp+0x14>

0001552c <__register_exitproc>:
   1552c:	defffa04 	addi	sp,sp,-24
   15530:	00800074 	movhi	r2,1
   15534:	109cec04 	addi	r2,r2,29616
   15538:	dc000015 	stw	r16,0(sp)
   1553c:	14000017 	ldw	r16,0(r2)
   15540:	dd000415 	stw	r20,16(sp)
   15544:	2829883a 	mov	r20,r5
   15548:	81405217 	ldw	r5,328(r16)
   1554c:	dcc00315 	stw	r19,12(sp)
   15550:	dc800215 	stw	r18,8(sp)
   15554:	dc400115 	stw	r17,4(sp)
   15558:	dfc00515 	stw	ra,20(sp)
   1555c:	2023883a 	mov	r17,r4
   15560:	3027883a 	mov	r19,r6
   15564:	3825883a 	mov	r18,r7
   15568:	28002526 	beq	r5,zero,15600 <__register_exitproc+0xd4>
   1556c:	29000117 	ldw	r4,4(r5)
   15570:	008007c4 	movi	r2,31
   15574:	11002716 	blt	r2,r4,15614 <__register_exitproc+0xe8>
   15578:	8800101e 	bne	r17,zero,155bc <__register_exitproc+0x90>
   1557c:	2105883a 	add	r2,r4,r4
   15580:	1085883a 	add	r2,r2,r2
   15584:	20c00044 	addi	r3,r4,1
   15588:	1145883a 	add	r2,r2,r5
   1558c:	0009883a 	mov	r4,zero
   15590:	15000215 	stw	r20,8(r2)
   15594:	28c00115 	stw	r3,4(r5)
   15598:	2005883a 	mov	r2,r4
   1559c:	dfc00517 	ldw	ra,20(sp)
   155a0:	dd000417 	ldw	r20,16(sp)
   155a4:	dcc00317 	ldw	r19,12(sp)
   155a8:	dc800217 	ldw	r18,8(sp)
   155ac:	dc400117 	ldw	r17,4(sp)
   155b0:	dc000017 	ldw	r16,0(sp)
   155b4:	dec00604 	addi	sp,sp,24
   155b8:	f800283a 	ret
   155bc:	29802204 	addi	r6,r5,136
   155c0:	00800044 	movi	r2,1
   155c4:	110e983a 	sll	r7,r2,r4
   155c8:	30c04017 	ldw	r3,256(r6)
   155cc:	2105883a 	add	r2,r4,r4
   155d0:	1085883a 	add	r2,r2,r2
   155d4:	1185883a 	add	r2,r2,r6
   155d8:	19c6b03a 	or	r3,r3,r7
   155dc:	14802015 	stw	r18,128(r2)
   155e0:	14c00015 	stw	r19,0(r2)
   155e4:	00800084 	movi	r2,2
   155e8:	30c04015 	stw	r3,256(r6)
   155ec:	88bfe31e 	bne	r17,r2,1557c <__register_exitproc+0x50>
   155f0:	30804117 	ldw	r2,260(r6)
   155f4:	11c4b03a 	or	r2,r2,r7
   155f8:	30804115 	stw	r2,260(r6)
   155fc:	003fdf06 	br	1557c <__register_exitproc+0x50>
   15600:	008000b4 	movhi	r2,2
   15604:	10a3dd04 	addi	r2,r2,-28812
   15608:	100b883a 	mov	r5,r2
   1560c:	80805215 	stw	r2,328(r16)
   15610:	003fd606 	br	1556c <__register_exitproc+0x40>
   15614:	00800074 	movhi	r2,1
   15618:	10817004 	addi	r2,r2,1472
   1561c:	1000021e 	bne	r2,zero,15628 <__register_exitproc+0xfc>
   15620:	013fffc4 	movi	r4,-1
   15624:	003fdc06 	br	15598 <__register_exitproc+0x6c>
   15628:	01006404 	movi	r4,400
   1562c:	103ee83a 	callr	r2
   15630:	1007883a 	mov	r3,r2
   15634:	103ffa26 	beq	r2,zero,15620 <__register_exitproc+0xf4>
   15638:	80805217 	ldw	r2,328(r16)
   1563c:	180b883a 	mov	r5,r3
   15640:	18000115 	stw	zero,4(r3)
   15644:	18800015 	stw	r2,0(r3)
   15648:	80c05215 	stw	r3,328(r16)
   1564c:	18006215 	stw	zero,392(r3)
   15650:	18006315 	stw	zero,396(r3)
   15654:	0009883a 	mov	r4,zero
   15658:	883fc826 	beq	r17,zero,1557c <__register_exitproc+0x50>
   1565c:	003fd706 	br	155bc <__register_exitproc+0x90>

00015660 <register_fini>:
   15660:	f800283a 	ret

00015664 <__call_exitprocs>:
   15664:	00800074 	movhi	r2,1
   15668:	109cec04 	addi	r2,r2,29616
   1566c:	10800017 	ldw	r2,0(r2)
   15670:	defff304 	addi	sp,sp,-52
   15674:	df000b15 	stw	fp,44(sp)
   15678:	d8800115 	stw	r2,4(sp)
   1567c:	00800074 	movhi	r2,1
   15680:	10816b04 	addi	r2,r2,1452
   15684:	1005003a 	cmpeq	r2,r2,zero
   15688:	d8800215 	stw	r2,8(sp)
   1568c:	d8800117 	ldw	r2,4(sp)
   15690:	dd400815 	stw	r21,32(sp)
   15694:	dd000715 	stw	r20,28(sp)
   15698:	10805204 	addi	r2,r2,328
   1569c:	dfc00c15 	stw	ra,48(sp)
   156a0:	ddc00a15 	stw	r23,40(sp)
   156a4:	dd800915 	stw	r22,36(sp)
   156a8:	dcc00615 	stw	r19,24(sp)
   156ac:	dc800515 	stw	r18,20(sp)
   156b0:	dc400415 	stw	r17,16(sp)
   156b4:	dc000315 	stw	r16,12(sp)
   156b8:	282b883a 	mov	r21,r5
   156bc:	2039883a 	mov	fp,r4
   156c0:	d8800015 	stw	r2,0(sp)
   156c4:	2829003a 	cmpeq	r20,r5,zero
   156c8:	d8800117 	ldw	r2,4(sp)
   156cc:	14405217 	ldw	r17,328(r2)
   156d0:	88001026 	beq	r17,zero,15714 <__call_exitprocs+0xb0>
   156d4:	ddc00017 	ldw	r23,0(sp)
   156d8:	88800117 	ldw	r2,4(r17)
   156dc:	8c802204 	addi	r18,r17,136
   156e0:	143fffc4 	addi	r16,r2,-1
   156e4:	80000916 	blt	r16,zero,1570c <__call_exitprocs+0xa8>
   156e8:	05bfffc4 	movi	r22,-1
   156ec:	a000151e 	bne	r20,zero,15744 <__call_exitprocs+0xe0>
   156f0:	8409883a 	add	r4,r16,r16
   156f4:	2105883a 	add	r2,r4,r4
   156f8:	1485883a 	add	r2,r2,r18
   156fc:	10c02017 	ldw	r3,128(r2)
   15700:	a8c01126 	beq	r21,r3,15748 <__call_exitprocs+0xe4>
   15704:	843fffc4 	addi	r16,r16,-1
   15708:	85bff81e 	bne	r16,r22,156ec <__call_exitprocs+0x88>
   1570c:	d8800217 	ldw	r2,8(sp)
   15710:	10003126 	beq	r2,zero,157d8 <__call_exitprocs+0x174>
   15714:	dfc00c17 	ldw	ra,48(sp)
   15718:	df000b17 	ldw	fp,44(sp)
   1571c:	ddc00a17 	ldw	r23,40(sp)
   15720:	dd800917 	ldw	r22,36(sp)
   15724:	dd400817 	ldw	r21,32(sp)
   15728:	dd000717 	ldw	r20,28(sp)
   1572c:	dcc00617 	ldw	r19,24(sp)
   15730:	dc800517 	ldw	r18,20(sp)
   15734:	dc400417 	ldw	r17,16(sp)
   15738:	dc000317 	ldw	r16,12(sp)
   1573c:	dec00d04 	addi	sp,sp,52
   15740:	f800283a 	ret
   15744:	8409883a 	add	r4,r16,r16
   15748:	88c00117 	ldw	r3,4(r17)
   1574c:	2105883a 	add	r2,r4,r4
   15750:	1445883a 	add	r2,r2,r17
   15754:	18ffffc4 	addi	r3,r3,-1
   15758:	11800217 	ldw	r6,8(r2)
   1575c:	1c001526 	beq	r3,r16,157b4 <__call_exitprocs+0x150>
   15760:	10000215 	stw	zero,8(r2)
   15764:	303fe726 	beq	r6,zero,15704 <__call_exitprocs+0xa0>
   15768:	00c00044 	movi	r3,1
   1576c:	1c06983a 	sll	r3,r3,r16
   15770:	90804017 	ldw	r2,256(r18)
   15774:	8cc00117 	ldw	r19,4(r17)
   15778:	1884703a 	and	r2,r3,r2
   1577c:	10001426 	beq	r2,zero,157d0 <__call_exitprocs+0x16c>
   15780:	90804117 	ldw	r2,260(r18)
   15784:	1884703a 	and	r2,r3,r2
   15788:	10000c1e 	bne	r2,zero,157bc <__call_exitprocs+0x158>
   1578c:	2105883a 	add	r2,r4,r4
   15790:	1485883a 	add	r2,r2,r18
   15794:	11400017 	ldw	r5,0(r2)
   15798:	e009883a 	mov	r4,fp
   1579c:	303ee83a 	callr	r6
   157a0:	88800117 	ldw	r2,4(r17)
   157a4:	98bfc81e 	bne	r19,r2,156c8 <__call_exitprocs+0x64>
   157a8:	b8800017 	ldw	r2,0(r23)
   157ac:	147fd526 	beq	r2,r17,15704 <__call_exitprocs+0xa0>
   157b0:	003fc506 	br	156c8 <__call_exitprocs+0x64>
   157b4:	8c000115 	stw	r16,4(r17)
   157b8:	003fea06 	br	15764 <__call_exitprocs+0x100>
   157bc:	2105883a 	add	r2,r4,r4
   157c0:	1485883a 	add	r2,r2,r18
   157c4:	11000017 	ldw	r4,0(r2)
   157c8:	303ee83a 	callr	r6
   157cc:	003ff406 	br	157a0 <__call_exitprocs+0x13c>
   157d0:	303ee83a 	callr	r6
   157d4:	003ff206 	br	157a0 <__call_exitprocs+0x13c>
   157d8:	88800117 	ldw	r2,4(r17)
   157dc:	1000081e 	bne	r2,zero,15800 <__call_exitprocs+0x19c>
   157e0:	89000017 	ldw	r4,0(r17)
   157e4:	20000726 	beq	r4,zero,15804 <__call_exitprocs+0x1a0>
   157e8:	b9000015 	stw	r4,0(r23)
   157ec:	8809883a 	mov	r4,r17
   157f0:	00105ac0 	call	105ac <free>
   157f4:	bc400017 	ldw	r17,0(r23)
   157f8:	883fb71e 	bne	r17,zero,156d8 <__call_exitprocs+0x74>
   157fc:	003fc506 	br	15714 <__call_exitprocs+0xb0>
   15800:	89000017 	ldw	r4,0(r17)
   15804:	882f883a 	mov	r23,r17
   15808:	2023883a 	mov	r17,r4
   1580c:	883fb21e 	bne	r17,zero,156d8 <__call_exitprocs+0x74>
   15810:	003fc006 	br	15714 <__call_exitprocs+0xb0>

00015814 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   15814:	defffd04 	addi	sp,sp,-12
   15818:	df000215 	stw	fp,8(sp)
   1581c:	df000204 	addi	fp,sp,8
   15820:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   15824:	e0bfff17 	ldw	r2,-4(fp)
   15828:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1582c:	e0bffe17 	ldw	r2,-8(fp)
   15830:	1005003a 	cmpeq	r2,r2,zero
   15834:	1000021e 	bne	r2,zero,15840 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   15838:	002af070 	cmpltui	zero,zero,43969
   1583c:	00000106 	br	15844 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   15840:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   15844:	e037883a 	mov	sp,fp
   15848:	df000017 	ldw	fp,0(sp)
   1584c:	dec00104 	addi	sp,sp,4
   15850:	f800283a 	ret

00015854 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15854:	defffd04 	addi	sp,sp,-12
   15858:	dfc00215 	stw	ra,8(sp)
   1585c:	df000115 	stw	fp,4(sp)
   15860:	df000104 	addi	fp,sp,4
   15864:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   15868:	e13fff17 	ldw	r4,-4(fp)
   1586c:	00158140 	call	15814 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15870:	003fff06 	br	15870 <_exit+0x1c>
   15874:	00015660 	cmpeqi	zero,zero,1369
