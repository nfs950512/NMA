// altera_merlin_interconnect_wrapper.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2016.11.02.14:27:50

`timescale 1 ps / 1 ps
module altera_merlin_interconnect_wrapper (
		input  wire        vectadd_inst_clk_bfm_clk_clk,                                               //                                             vectadd_inst_clk_bfm_clk.clk
		input  wire        vectadd_inst_onchip_memory2_0_s2_bfm_clk_reset_reset_bridge_in_reset_reset, // vectadd_inst_onchip_memory2_0_s2_bfm_clk_reset_reset_bridge_in_reset.reset
		input  wire        vectadd_inst_reset_reset_bridge_in_reset_reset,                             //                             vectadd_inst_reset_reset_bridge_in_reset.reset
		input  wire [17:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_address,                            //                              vectadd_inst_onchip_memory2_0_s2_bfm_m0.address
		input  wire [3:0]  vectadd_inst_onchip_memory2_0_s2_bfm_m0_byteenable,                         //                                                                     .byteenable
		input  wire        vectadd_inst_onchip_memory2_0_s2_bfm_m0_read,                               //                                                                     .read
		output wire [31:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_readdata,                           //                                                                     .readdata
		input  wire        vectadd_inst_onchip_memory2_0_s2_bfm_m0_write,                              //                                                                     .write
		input  wire [31:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_writedata,                          //                                                                     .writedata
		input  wire        vectadd_inst_onchip_memory2_0_s2_bfm_m0_clken,                              //                                                                     .clken
		output wire [17:0] vectadd_inst_onchip_memory2_0_s2_address,                                   //                                     vectadd_inst_onchip_memory2_0_s2.address
		output wire        vectadd_inst_onchip_memory2_0_s2_write,                                     //                                                                     .write
		input  wire [31:0] vectadd_inst_onchip_memory2_0_s2_readdata,                                  //                                                                     .readdata
		output wire [31:0] vectadd_inst_onchip_memory2_0_s2_writedata,                                 //                                                                     .writedata
		output wire [3:0]  vectadd_inst_onchip_memory2_0_s2_byteenable,                                //                                                                     .byteenable
		output wire        vectadd_inst_onchip_memory2_0_s2_chipselect,                                //                                                                     .chipselect
		output wire        vectadd_inst_onchip_memory2_0_s2_clken                                      //                                                                     .clken
	);

	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_waitrequest;   // vectadd_inst_onchip_memory2_0_s2_translator:uav_waitrequest -> vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_waitrequest
	wire   [2:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_burstcount;    // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_burstcount -> vectadd_inst_onchip_memory2_0_s2_translator:uav_burstcount
	wire  [31:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_writedata;     // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_writedata -> vectadd_inst_onchip_memory2_0_s2_translator:uav_writedata
	wire  [19:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_address;       // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_address -> vectadd_inst_onchip_memory2_0_s2_translator:uav_address
	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_clken;         // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_clken -> vectadd_inst_onchip_memory2_0_s2_translator:uav_clken
	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_lock;          // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_lock -> vectadd_inst_onchip_memory2_0_s2_translator:uav_lock
	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_write;         // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_write -> vectadd_inst_onchip_memory2_0_s2_translator:uav_write
	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_read;          // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_read -> vectadd_inst_onchip_memory2_0_s2_translator:uav_read
	wire  [31:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_readdata;      // vectadd_inst_onchip_memory2_0_s2_translator:uav_readdata -> vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_readdata
	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_debugaccess;   // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_debugaccess -> vectadd_inst_onchip_memory2_0_s2_translator:uav_debugaccess
	wire   [3:0] vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_byteenable;    // vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_byteenable -> vectadd_inst_onchip_memory2_0_s2_translator:uav_byteenable
	wire         vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_readdatavalid; // vectadd_inst_onchip_memory2_0_s2_translator:uav_readdatavalid -> vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator:uav_readdatavalid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (0),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator (
		.clk                      (vectadd_inst_clk_bfm_clk_clk),                                                               //                       clk.clk
		.reset                    (vectadd_inst_onchip_memory2_0_s2_bfm_clk_reset_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address              (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.uav_clken                (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_clken),         //                          .clken
		.av_address               (vectadd_inst_onchip_memory2_0_s2_bfm_m0_address),                                            //      avalon_anti_master_0.address
		.av_byteenable            (vectadd_inst_onchip_memory2_0_s2_bfm_m0_byteenable),                                         //                          .byteenable
		.av_read                  (vectadd_inst_onchip_memory2_0_s2_bfm_m0_read),                                               //                          .read
		.av_readdata              (vectadd_inst_onchip_memory2_0_s2_bfm_m0_readdata),                                           //                          .readdata
		.av_write                 (vectadd_inst_onchip_memory2_0_s2_bfm_m0_write),                                              //                          .write
		.av_writedata             (vectadd_inst_onchip_memory2_0_s2_bfm_m0_writedata),                                          //                          .writedata
		.av_clken                 (vectadd_inst_onchip_memory2_0_s2_bfm_m0_clken),                                              //                          .clken
		.av_waitrequest           (),                                                                                           //               (terminated)
		.av_burstcount            (1'b1),                                                                                       //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                                       //               (terminated)
		.av_begintransfer         (1'b0),                                                                                       //               (terminated)
		.av_chipselect            (1'b0),                                                                                       //               (terminated)
		.av_readdatavalid         (),                                                                                           //               (terminated)
		.av_lock                  (1'b0),                                                                                       //               (terminated)
		.av_debugaccess           (1'b0),                                                                                       //               (terminated)
		.uav_response             (2'b00),                                                                                      //               (terminated)
		.av_response              (),                                                                                           //               (terminated)
		.uav_writeresponserequest (),                                                                                           //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                       //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                       //               (terminated)
		.av_writeresponsevalid    ()                                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (1),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vectadd_inst_onchip_memory2_0_s2_translator (
		.clk                      (vectadd_inst_clk_bfm_clk_clk),                                                               //                      clk.clk
		.reset                    (vectadd_inst_onchip_memory2_0_s2_bfm_clk_reset_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_burstcount),    //                         .burstcount
		.uav_read                 (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_read),          //                         .read
		.uav_write                (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_write),         //                         .write
		.uav_waitrequest          (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_byteenable),    //                         .byteenable
		.uav_readdata             (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_readdata),      //                         .readdata
		.uav_writedata            (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_writedata),     //                         .writedata
		.uav_lock                 (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_lock),          //                         .lock
		.uav_debugaccess          (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_debugaccess),   //                         .debugaccess
		.uav_clken                (vectadd_inst_onchip_memory2_0_s2_bfm_m0_translator_avalon_universal_master_0_clken),         //                         .clken
		.av_address               (vectadd_inst_onchip_memory2_0_s2_address),                                                   //      avalon_anti_slave_0.address
		.av_write                 (vectadd_inst_onchip_memory2_0_s2_write),                                                     //                         .write
		.av_readdata              (vectadd_inst_onchip_memory2_0_s2_readdata),                                                  //                         .readdata
		.av_writedata             (vectadd_inst_onchip_memory2_0_s2_writedata),                                                 //                         .writedata
		.av_byteenable            (vectadd_inst_onchip_memory2_0_s2_byteenable),                                                //                         .byteenable
		.av_chipselect            (vectadd_inst_onchip_memory2_0_s2_chipselect),                                                //                         .chipselect
		.av_clken                 (vectadd_inst_onchip_memory2_0_s2_clken),                                                     //                         .clken
		.av_read                  (),                                                                                           //              (terminated)
		.av_begintransfer         (),                                                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                                                           //              (terminated)
		.av_burstcount            (),                                                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                       //              (terminated)
		.av_waitrequest           (1'b0),                                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                                           //              (terminated)
		.av_lock                  (),                                                                                           //              (terminated)
		.av_debugaccess           (),                                                                                           //              (terminated)
		.av_outputenable          (),                                                                                           //              (terminated)
		.uav_response             (),                                                                                           //              (terminated)
		.av_response              (2'b00),                                                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                                                           //              (terminated)
		.av_writeresponserequest  (),                                                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                        //              (terminated)
	);

endmodule
